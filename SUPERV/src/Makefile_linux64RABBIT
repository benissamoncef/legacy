#
#  FICHIER: Makefile_linux64EMS
#
#  Ce fichier est dependant des variables d'environnement :
#  $HOME, $PROJECTDIR, $RTHOME
#
###############################################################################
# Inhibition de l'echo des commandes
#
.SILENT:
#
# Ajout des suffixes des fichiers sources concernes
#
#.SUFFIXES: .sc 
#
###############################################################################
# Historique
#
# JPL	11/01/17 : Creation d'apres Makefile_linux V1.2 (DEM 1256)  1.1
# JPL	07/06/22 : Prise en compte des scripts (copie en repertoire executables)  (SAE-388)
# LCL	27/07/23 : Adaptation rabbitmq
###############################################################################

#
# Definitions des variables du makefile
#
#
# nom du sous systeme
#

CIBLE = x86_64
SSYST = SUPERV
PROJHOME  = $(HOME)/migrazur

#
# definitions de variables decrivant les differents chemins d'acces
#

DIRINC = $(CI_PROJECT_DIR)/$(SSYST)/inc
DIRSRC = $(CI_PROJECT_DIR)/$(SSYST)/src
DIRLIB = $(CI_PROJECT_DIR)/$(SSYST)/libx64RABBIT
DIREXE = $(CI_PROJECT_DIR)/$(SSYST)/binx64RABBIT

# Paths  communs
# A decommenter une fois livre
#XDMICGINC = $(PROJECTDIR)/valid/ICG/inc
#XDMICGLIB = $(PROJECTDIR)/valid/ICG/lib
XDMICGINC = $(CI_PROJECT_DIR)/XDMICG/inc
XDMICGLIB = $(CI_PROJECT_DIR)/XDMICG/libx64RABBIT
LIBCOMMUN = $(CI_PROJECT_DIR)/XDMICG/libx64RABBIT
INCCOMMUN = $(CI_PROJECT_DIR)/XDMICG/inc


# Definition des flags de compilation et de correcteur syntaxique
#
DIRRTWORKS = $(RTHOME)/include
DIREMS = /opt/tibco/ems/8.5

# rtlink
RTLINK = $(RTHOME)/bin/rtlink  -verbose -64bit
RTLINK = cc
#-purify

RABBIT_PATH_LIB = /usr/local/lib64
RABBIT_LIB = -lrabbitmq
RABBIT_INC = /usr/local/include/rabbitmq-c


# Includes SYBASE
#SYBINCLUDE = $(SYBASE)/$(SYBASE_OCS)/include


# compilateur
#CC =  purify cc
CC =  cc

OPTLINT=no

CFLAGS = -g\
	-D_TIBCO_EMS\
	-D_RABBITMQ\
	-I$(DIRRTWORKS)\
	-I$(DIREMS)/include\
	-I$(INCCOMMUN)\
	-I$(DIRINC)\
	-I$(RABBIT_INC)


# Definition des flags du lint
LFLAGS = -u\
-I$(DIRRTWORKS)\
-I$(INCCOMMUN)\
-I$(DIREMS)/include\
-L$(DIREMS)/lib/64\
-L$(DIREMS)/lib\
-I$(DIRINC)\
-L$(RABBIT_LIB)


# Librairies SYBASE
#SYB_COMN_LIB = -lsybtcl -lsybcs -lsybcomn -lsybintl -lsybunic
#LDSYBASE = -L$(SYBASE)/$(SYBASE_OCS)/lib  -lsybct  $(SYB_COMN_LIB)


# Librairies RTWORKS
#LDRTWORKS = -L$(RTHOME)/lib/i86_linux -lrtutil -lrtipc


TIBEMS_LIB64=-ltibems64 -ltibemslookup64
TIBEMSUFO_LIB64=-ltibemsufo64
TIBEMSADMIN_LIB64=-ltibemsadmin64
TIBEMS_SSL_LIB64=-lssl -lcrypto
TIBEMS_LDAP_LIB64=-lldap -llber
TIBEMS_XML_LIB64=-lxml2
TIBEMS_ZLIB64=-lz

TLIBS=-lpthread -lm

LIBS=$(TIBEMS_LIB64) \
     $(TIBEMSADMIN_LIB64) $(TIBEMS_LDAP_LIB64) $(TIBEMS_XML_LIB64) $(TIBEMS_SSL_LIB64) $(TIBEMS_ZLIB64) $(TLIBS) \
     $(TIBEMSUFO_LIB64)
RT_LIB=-L$(DIREMS)/lib/64 -L$(DIREMS)/lib $(LIBS)

# librairies communes applicatives utilisees

LIBICG = \
	$(XDMICGLIB)/xzs.a \
	$(XDMICGLIB)/xzi.a \
	$(XDMICGLIB)/xd.a \
	$(XDMICGLIB)/xzeh.a


########### Zone a modifier par le developpeur ################
#
# DEFINITION DES SOURCES D'UNE  TACHE
#
# sources d'un executable
#
# x code du sous-systeme
# yyy nom du module
#

#
# includes
#

INCICG = $(XDMICGINC)/xdc.h 	\
	 $(XDMICGINC)/xdy.h	\
	 $(XDMICGINC)/xdg.h	\
	 $(XDMICGINC)/xdl.h	\
	 $(XDMICGINC)/xdm.h	\
	 $(XDMICGINC)/xdf.h


INCTIM=	$(DIRINC)/stim_ser.h	\
	$(DIRINC)/stim_tra.h

INCTSP= $(XDMICGINC)/xdc.h      \
	$(XDMICGINC)/xdy.h      \
	$(DIRINC)/spng_dir.h	\
	$(DIRINC)/spng_don.h	\
	$(DIRINC)/spng_tra.h

INCAPL= $(DIRINC)/sapl_com.h	\
	$(DIRINC)/sapl_dir.h	\
	$(DIRINC)/sapl_don.h	\
	$(DIRINC)/sapl_ini.h	\
	$(DIRINC)/sapl_sur.h	\
	$(DIRINC)/sapl_tra.h

INCETA= $(DIRINC)/seta_dir.h	\
	$(DIRINC)/seta_don.h	\
	$(DIRINC)/seta_ini.h	\
	$(DIRINC)/seta_act.h	\
	$(DIRINC)/seta_con.h	\
	$(DIRINC)/seta_tra.h	\
	$(DIRINC)/seta_bas.h	\
	$(DIRINC)/seta_sur.h	\
	$(DIRINC)/seta_rep.h	\
	$(DIRINC)/seta_arc.h


### INCCON = $(DIRINC)/scon_var.h \
### 	$(DIRINC)/scon_ser.h \
### 	$(DIRINC)/scon_gri.h \
### 	$(DIRINC)/scon_ecr.h \
### 	$(DIRINC)/scon_lit.h \
### 	$(DIRINC)/scon_div.h \
### 	$(DIRINC)/scon_dir.h \
### 	$(DIRINC)/scon_tac.h \
### 	$(DIRINC)/scon_jad.h \
### 	$(DIRINC)/scon_fad.h


#
# Sources
#

SRCTIM=	$(DIRSRC)/stim_ins.c	\
	$(DIRSRC)/stim_sup.c	\
	$(DIRSRC)/stim_tra.c	\
	$(DIRSRC)/stim_dir.c

SRCTSP= $(DIRSRC)/spng_dir.c	\
	$(DIRSRC)/spng_tra.c	\
	$(DIRSRC)/spng_don.c


SRCAPL= $(DIRSRC)/sapl_dir.c 	\
	$(DIRSRC)/sapl_com.c 	\
	$(DIRSRC)/sapl_don.c 	\
	$(DIRSRC)/sapl_ini.c	\
	$(DIRSRC)/sapl_sur.c 	\
	$(DIRSRC)/sapl_tra.c

SRCETA= $(DIRSRC)/seta_dir.c	\
	$(DIRSRC)/seta_don.c	\
	$(DIRSRC)/seta_ini.c	\
	$(DIRSRC)/seta_act.c	\
	$(DIRSRC)/seta_con.c	\
	$(DIRSRC)/seta_tra.c	\
	$(DIRSRC)/seta_bas.c	\
	$(DIRSRC)/seta_sur.c	\
	$(DIRSRC)/seta_rep.c	\
	$(DIRSRC)/seta_arc.c

SRCHOR= $(DIRSRC)/shor_dir.c\
	$(DIRSRC)/shor_tra.c

SRCCMD= $(DIRSRC)/scmd_root.c


### UIL = $(DIRSRC)/scon_fr.uil
### 
### SRCCON= $(DIRSRC)/scon_var.c \
### 	$(DIRSRC)/scon_gri.c \
### 	$(DIRSRC)/scon_ecr.c \
### 	$(DIRSRC)/scon_lit.c \
### 	$(DIRSRC)/scon_div.c \
### 	$(DIRSRC)/scon_dir.c \
### 	$(DIRSRC)/scon_tac.c \
### 	$(DIRSRC)/scon_jad.c \
### 	$(DIRSRC)/scon_fad.c
### 
### SRCINIT= $(DIRSRC)/init_heure.c
### 
### SRCBAS = $(DIRSRC)/tsbas_dir.c
### 
### SRCSYS= $(DIRSRC)/tssys_dir.c
### 
### SRCDIS= $(DIRSRC)/tsdis_dir.c
### 
### SRCINQ= $(DIRSRC)/tsinq_dir.c



#
# librairie d'un executable
#

OBJTIM = $(DIRLIB)/stim.a
OBJTSP = $(DIRLIB)/spng.a
OBJAPL = $(DIRLIB)/sapl.a
OBJETA = $(DIRLIB)/seta.a
OBJHOR = $(DIRLIB)/shor.a

### OBJCON = $(DIRLIB)/scon.a
### OBJINIT = $(DIRSRC)/init_heure.o
### OBJBAS = $(DIRLIB)/tsbas.a
### OBJSYS = $(DIRLIB)/tssys.a
### OBJDIS = $(DIRLIB)/tsdis.a
### OBJINQ = $(DIRLIB)/tsinq.a



#
# DEFINITION DU NOM DES EXECUTABLES
#
# nom des executables
#

EXETIM = $(DIREXE)/tstim.x
EXETSP = $(DIREXE)/tspng.x
EXEAPL = $(DIREXE)/tsaplg.x
EXEETA = $(DIREXE)/tsetat.x
EXEHOR = $(DIREXE)/tshor.x
EXECMD = $(DIREXE)/tscmd.x

### UID = $(DIREXE)/scon_fr.uid
### EXECON = $(DIREXE)/tsconf.x
### EXEINIT = $(DIREXE)/init_heure.x
### EXEBAS = $(DIREXE)/tsbas.x
### EXESYS = $(DIREXE)/tssys.x
### EXEDIS = $(DIREXE)/tsdis.x
### EXEINQ = $(DIREXE)/tsinq.x


EXE = $(EXETIM) $(EXETSP) $(EXEAPL) $(EXEETA) $(EXEHOR) $(EXECMD)
# $(EXECON) $(EXEINIT)  $(EXEBAS)



#
# DEFINITION DES REGLES DE GENERATION
#
# Premiere regle il faut tout faire : les communs et les executables

tout : verifier_plateforme  tsscr $(EXE)
	echo
	@echo LE SOUS-SYSTEME $(SSYST) EST A JOUR.
	echo


tsscr :
	@rm -f $(DIREXE)/xzsa01_ListeMachine.sh $(DIREXE)/xzsx_cmd_sur.sh
	cp -p $(DIRSRC)/xzsa01_ListeMachine.sh $(DIRSRC)/xzsx_cmd_sur.sh  $(DIREXE)
	@chmod ug+wx $(DIREXE)/*.sh



# Regles utiles simplement pour lancer independamment les compilations.
#  Exemple : make tsetat.x

tstim.x : $(EXETIM)
	echo
tspng.x : $(EXETSP)
	echo
tsaplg.x : $(EXEAPL)
	echo
tsetat.x : $(EXEETA)
	echo
tshor.x : $(EXEHOR)
	echo
tscmd.x : $(EXECMD)
	echo

### tsconf.x : $(EXECON)
### 	echo
### init_heure.x : $(EXEINIT)
### 	echo
### tssys.x : $(EXESYS)
### 	echo
### tsbas.x : $(EXEBAS)
### 	echo
### tsdis.x : $(EXEDIS)
### 	echo
### tsinq.x : $(EXEINQ)
### 	echo


#
# GENERATION  D'UN EXECUTABLE
#
# Regle de generation d'un executable a partir de ses fichiers sources,
#  de ses objets et des librairies communes
#
# Phase edition de lien
#

$(EXETIM) : $(SRCTIM) $(OBJTIM)  $(LIBICG)
	echo
	@[ "$(MODELE)" = "$(CIBLE)" ] || { echo "Ce Makefile N'EST PAS DESTINE A CETTE PLATEFORME !!!" >&2 ; false ; }
	echo "PHASE EDITION DE LIEN :"$@
	echo $(RTLINK) $(CFLAGS) $(OBJTIM) $(LIBICG) $(LDFLAGS) $(LDSIGNAL) $(RT_LIB) -L$(RABBIT_PATH_LIB) $(RABBIT_LIB) -o $@
	$(RTLINK) $(CFLAGS) $(OBJTIM) $(LIBICG) $(LDFLAGS) $(LDSIGNAL) $(RT_LIB) -L$(RABBIT_PATH_LIB) $(RABBIT_LIB) -o $@
	#$(CC)  $(OBJTIM) $(LIBICG) $(LDFLAGS) $(LDRTWORKS)  -o $@
	touch $@
	echo
	echo "TAILLE DE L'EXECUTABLE :"$@
	@size $@
	@echo Executable $@ a jour.

$(EXETSP) : $(SRCTSP) $(OBJTSP) $(LIBICG)
	echo
	@[ "$(MODELE)" = "$(CIBLE)" ] || { echo "Ce Makefile N'EST PAS DESTINE A CETTE PLATEFORME !!!" >&2 ; false ; }
	echo "PHASE EDITION DE LIEN :"$@
	echo $(RTLINK)  $(CFLAGS) $(OBJTSP) $(LIBICG) $(LDFLAGS) $(RT_LIB) -L$(RABBIT_PATH_LIB) $(RABBIT_LIB) -o $@
	$(RTLINK) $(CFLAGS)  $(OBJTSP) $(LIBICG) $(LDFLAGS) $(RT_LIB) -L$(RABBIT_PATH_LIB) $(RABBIT_LIB) -o $@
	echo
	echo "TAILLE DE L'EXECUTABLE :"$@
	@size $@
	@echo Executable $@ a jour.

$(EXEAPL) : $(SRCAPL) $(OBJAPL) $(LIBICG)
	echo
	@[ "$(MODELE)" = "$(CIBLE)" ] || { echo "Ce Makefile N'EST PAS DESTINE A CETTE PLATEFORME !!!" >&2 ; false ; }
	echo "PHASE EDITION DE LIEN :"$@
	$(RTLINK) -g  $(CFLAGS) $(OBJAPL)  $(LIBICG) $(LDFLAGS)  $(RT_LIB) -L$(RABBIT_PATH_LIB) $(RABBIT_LIB) -o $@
	echo
	echo "TAILLE DE L'EXECUTABLE :"$@
	@size $@
	@echo Executable $@ a jour.

$(EXEETA) : $(SRCETA) $(OBJETA) $(LIBICG)
	echo
	@[ "$(MODELE)" = "$(CIBLE)" ] || { echo "Ce Makefile N'EST PAS DESTINE A CETTE PLATEFORME !!!" >&2 ; false ; }
	echo "PHASE EDITION DE LIEN :"$@
	$(RTLINK) -g  $(CFLAGS) $(OBJETA) $(LIBICG) $(LDFLAGS)  $(RT_LIB) -L$(RABBIT_PATH_LIB) $(RABBIT_LIB) -o $@
	echo
	echo "TAILLE DE L'EXECUTABLE :"$@
	@size $@
	@echo Executable $@ a jour.


$(EXEHOR) : $(SRCHOR) $(OBJHOR) $(LIBICG)
	echo
	@[ "$(MODELE)" = "$(CIBLE)" ] || { echo "Ce Makefile N'EST PAS DESTINE A CETTE PLATEFORME !!!" >&2 ; false ; }
	echo "PHASE EDITION DE LIEN :"$@
	$(RTLINK) $(CFLAGS) $(OBJHOR) $(LIBICG) $(LDFLAGS)  $(RT_LIB) -L$(RABBIT_PATH_LIB) $(RABBIT_LIB) -o $@
	echo
	echo "TAILLE DE L'EXECUTABLE :"$@
	@size $@

$(EXECMD) : $(SRCCMD)
	echo
	@[ "$(MODELE)" = "$(CIBLE)" ] || { echo "Ce Makefile N'EST PAS DESTINE A CETTE PLATEFORME !!!" >&2 ; false ; }
	echo "PHASE EDITION DE LIEN :"$@
	cc $(CFLAGS) -o $@ $(SRCCMD)
	rm -f $(SRCCMD:.c=.o)
	# changement du sticky-bit pour le reboot
	chmod +s $@
	echo "ATTENTION : *** pour le reboot  dans tscmd.x **********"
	echo "IL FAUT MODIFIER L'UTILISATEUR DE tscmd.x A ROOT "
	echo "exemple : sous root : chown root tscmd.x"
	echo
	echo "TAILLE DE L'EXECUTABLE :"$@
	@size $@


### $(UID): $(UIL)
### 	echo "Generation fichier :"$@ $?
### 	uil -o $@ $?
### 	@echo le module $@ EST A JOUR.
### 
### $(EXECON) : $(SRCCON) $(OBJCON) $(UID) $(LIBICG)
### 	echo
### 	@[ "$(MODELE)" = "$(CIBLE)" ] || { echo "Ce Makefile N'EST PAS DESTINE A CETTE PLATEFORME !!!" >&2 ; false ; }
### 	echo "PHASE EDITION DE LIEN :"$@
### 	$(RTLINK)  $(OBJCON) $(LIBICG) $(LDSYS) -o $@
### 	echo
### 	echo "TAILLE DE L'EXECUTABLE :"$@
### 	@size $@
### 
### $(EXEINIT) : $(SRCINIT)
### 	echo
### 	@[ "$(MODELE)" = "$(CIBLE)" ] || { echo "Ce Makefile N'EST PAS DESTINE A CETTE PLATEFORME !!!" >&2 ; false ; }
### 	echo "PHASE DE COMPILATION             : "   $(SRCINIT)
### 	$(CC)   $(CFLAGS) -c $(SRCINIT)
### 	echo "PHASE EDITION DE LIEN :"$@
### 	$(RTLINK)  $(OBJINIT) $(LIBICG) $(LDFLAGS)  -o $@
### 	rm -f $(OBJINIT)
### 	# changement du sticky-bit pour le reboot
### 	chmod +s $@
### 	echo
### 	echo
### 	echo "TAILLE DE L'EXECUTABLE :"$@
### 	@size $@
### 
### $(EXEBAS) : $(SRCBAS) $(OBJBAS) $(LIBICG)
### 	echo
### 	@[ "$(MODELE)" = "$(CIBLE)" ] || { echo "Ce Makefile N'EST PAS DESTINE A CETTE PLATEFORME !!!" >&2 ; false ; }
### 	echo "PHASE EDITION DE LIEN :"$@
### 	$(RTLINK)  $(OBJBAS) $(LIBICG) $(LDFLAGS)  -o $@
### 	echo
### 	echo "TAILLE DE L'EXECUTABLE :"$@
### 	@size $@
### 
### $(EXESYS) : $(SRCSYS) $(OBJSYS) $(LIBICG)
### 	echo
### 	@[ "$(MODELE)" = "$(CIBLE)" ] || { echo "Ce Makefile N'EST PAS DESTINE A CETTE PLATEFORME !!!" >&2 ; false ; }
### 	echo "PHASE EDITION DE LIEN :"$@
### 	$(RTLINK)  $(OBJSYS) $(LIBICG) $(LDFLAGS) $(LDSYBASE)  -o $@
### 	# changement du sticky-bit pour le reboot
### 	chmod +s $@
### 	echo
### 	echo "TAILLE DE L'EXECUTABLE :"$@
### 	@size $@
### 
### $(EXEDIS) : $(SRCDIS) $(OBJDIS) $(LIBICG)
### 	echo
### 	@[ "$(MODELE)" = "$(CIBLE)" ] || { echo "Ce Makefile N'EST PAS DESTINE A CETTE PLATEFORME !!!" >&2 ; false ; }
### 	echo "PHASE EDITION DE LIEN :"$@
### 	$(RTLINK)  $(OBJDIS) $(LIBICG) $(LDFLAGS) $(LDSYBASE)  -o $@
### 	# changement du sticky-bit pour le reboot
### 	chmod +s $@
### 	echo
### 	echo "TAILLE DE L'EXECUTABLE :"$@
### 	@size $@
### 
### $(EXEINQ) : $(SRCINQ) $(OBJINQ) $(LIBICG)
### 	echo
### 	@[ "$(MODELE)" = "$(CIBLE)" ] || { echo "Ce Makefile N'EST PAS DESTINE A CETTE PLATEFORME !!!" >&2 ; false ; }
### 	echo "PHASE EDITION DE LIEN :"$@
### 	$(RTLINK)  $(OBJINQ) $(LIBICG) $(LDFLAGS) $(LDSYBASE)   -o $@
### 	echo
### 	echo "TAILLE DE L'EXECUTABLE :"$@
### 	@size $@


#
# Regle liant les sources aux fichiers include communs et au makefile
#

$(SRCTIM) : $(INCICG)  $(INCTIM)
	touch $@

$(SRCTSP) : $(INCICG)  $(INCTSP)
	touch $@

$(SRCAPL) : $(INCICG)  $(INCAPL)
	touch $@

$(SRCETA) : $(INCICG)  $(INCETA)
	touch $@

$(SRCHOR) : $(INCICG)
	touch $@


### $(SRCCON) : $(INCCON)
### 	touch $@
### 
### $(SRCSYS) : $(INCICG)
### 	touch $@
### 
### $(SRCDIS) : $(INCICG)
### 	touch $@
### 
### $(SRCINQ) : $(INCICG)
### 	touch $@


#
# Regle de generation d'une librairie  a partir de ses fichiers objets
#

$(OBJTIM): \
	$(OBJTIM)(stim_ins.o) \
	$(OBJTIM)(stim_sup.o) \
	$(OBJTIM)(stim_tra.o)	\
	$(OBJTIM)(stim_dir.o)

$(OBJTSP): \
	$(OBJTSP)(spng_dir.o) \
	$(OBJTSP)(spng_tra.o) \
	$(OBJTSP)(spng_don.o)


$(OBJAPL): \
	$(OBJAPL)(sapl_sur.o) \
	$(OBJAPL)(sapl_don.o) \
	$(OBJAPL)(sapl_ini.o) \
	$(OBJAPL)(sapl_com.o) \
	$(OBJAPL)(sapl_tra.o) \
	$(OBJAPL)(sapl_dir.o)

$(OBJETA): \
	$(OBJETA)(seta_dir.o) \
	$(OBJETA)(seta_don.o) \
	$(OBJETA)(seta_ini.o) \
	$(OBJETA)(seta_act.o) \
	$(OBJETA)(seta_con.o) \
	$(OBJETA)(seta_tra.o) \
	$(OBJETA)(seta_bas.o) \
	$(OBJETA)(seta_sur.o) \
	$(OBJETA)(seta_rep.o) \
	$(OBJETA)(seta_arc.o)

$(OBJHOR): \
	$(OBJHOR)(shor_dir.o) \
	$(OBJHOR)(shor_tra.o)


### $(OBJCON): \
### 	   $(OBJCON)(scon_var.o)\
### 	   $(OBJCON)(scon_gri.o)\
### 	   $(OBJCON)(scon_ecr.o) \
### 	   $(OBJCON)(scon_lit.o) \
### 	   $(OBJCON)(scon_div.o) \
### 	   $(OBJCON)(scon_dir.o) \
### 	   $(OBJCON)(scon_tac.o) \
### 	   $(OBJCON)(scon_jad.o) \
### 	   $(OBJCON)(scon_fad.o)
### 
### $(OBJBAS): $(OBJBAS)(tsbas_dir.o)
### 
### $(OBJSYS): $(OBJSYS)(tssys_dir.o)
### 
### $(OBJDIS): $(OBJDIS)(tsdis_dir.o)
### 
### $(OBJINQ): $(OBJINQ)(tsinq_dir.o)


########### Fin de zone a modifier par le developpeur ################

verifier_plateforme :
	if test "$(MODELE)" != "$(CIBLE)" ; \
	then	echo "Ce fichier Makefile N'EST PAS DESTINE A CETTE PLATEFORME. NE PAS GENERER DE BINAIRE !!!" ; \
		false ; \
	fi

#
# phase de menage du makefile
#
clean : verifier_plateforme
	rm -f $(DIRLIB)/*.a
	rm -f $(EXE)
#
#
# Redefinition de la regles de construction d'un .o a partir d'un .c
#
#
.c.o : verifier_plateforme
	echo " "
	if test $(OPTLINT) = yes;\
          then echo "PHASE DE VERIFICATION SYNTAXIQUE : "   $<;\
               $(LINT) $(LFLAGS)  $<;\
          else echo $< "PAS DE VERIFICATION SYNTAXIQUE ";\
        fi;
	echo
	echo "PHASE DE COMPILATION             : "   $<
	echo " "
	$(CC)   $(CFLAGS) -c $<

#
# Redefinition de la regles de construction d'un .a a partir d'un .o
#
.o.a : verifier_plateforme
	echo "CREATION DE LIBRAIRIE "$@.a
	ar rv $@.a $<
	touch $@.a
	rm -f $<

#
# Redefinition de la regles de construction d'un .a a partir d'un .c
#
.c.a : verifier_plateforme
	echo " "
	if test $(OPTLINT) = yes;\
          then echo "PHASE DE VERIFICATION SYNTAXIQUE : "   $*.c;\
               $(LINT) $(LFLAGS)  $*.c;\
          else echo  "PAS DE VERIFICATION SYNTAXIQUE " $*.c;\
        fi;
	echo
	echo "PHASE DE COMPILATION             : "   $*.c
	echo " "
	$(CC)   $(CFLAGS) -c $*.c
	echo "MISE A JOUR DE LIBRAIRIE :"$@
	ar r $@ $*.o
	touch $@
	rm -f $*.o
