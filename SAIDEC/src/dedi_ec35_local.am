/*E*/
/* Fichier : $Id: dedi_ec35_local.am,v 1.2 1995/09/13 16:56:33 gesconf Exp $	      Release : $Revision: 1.2 $        Date : $Date: 1995/09/13 16:56:33 $ 
-------------------------------------------------------------------------------
* STERIA *  PROJET MIGRAZUR
-------------------------------------------------------------------------------
* SOUS-SYSTEME  GESIHM
-------------------------------------------------------------------------------
* MODULE dedi * FICHIER dedi_ec35_local.am
-------------------------------------------------------------------------------
* DESCRIPTION DU MODULE :
* 
* formulation de l'element localisation pour PMV
*   
*
-------------------------------------------------------------------------------
* HISTORIQUE :
*
* Guilhou	29 nov 1994	: Creation						V1.1
---------------------------------------------------------------------------- */
include "dedi_init.h"


VAR	tm_data

/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
* formulation de l'element localisation
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO dedi_ec35_local ()

/*
* ARGUMENTS EN ENTREE :
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Indefini
*
* CONDITION D'UTILISATION
*
* FONCTION
*
---------------------------------------------------------------------------- */
var vl_fenetre
var vl_evt
var vl_indice
var tl_pokes

/* initialisation des parametres de la fenetre */
vl_fenetre = DB_LOAD@("dedi_ec35_local")

/*A messages que je peux recevoir*/
tl_pokes[0]=dedi_canal_fin
DB_ACCEPT_POKES@(vl_fenetre,tl_pokes)

/*A positionne la fenetre a l'ecran*/
DB_XPOS@(vl_fenetre,5)
DB_YPOS@(vl_fenetre,72)

DB_DISPLAY_ONLY@(vl_fenetre, TRUE)
DB_DISPLAY@(vl_fenetre)

/*initialisation du module*/
ec35_local_init(vl_fenetre)

DB_DISPLAY_ONLY@(vl_fenetre, FALSE)


/*A boucle principale */
WHILE 1
	DB_DISPLAY@(vl_fenetre)	
	vl_evt = DB_EXIT_CTRL@(vl_fenetre)

	/*A suivant l'evenement*/
	CASE  OF vl_evt
		/*A appui sur le bouton valider*/
		CASE "BP_valider"
			/*A curseur devient une montre*/
			MACRO_WINS_BUSY@()

			/*fonction de validation*/
			IF ec35_local_valide(vl_fenetre)=TRUE
				RETURN

		/*A appui sur le bouton annuler*/
		CASE "BP_annuler"
			RETURN
	
		/*A reception d'un poke*/
		CASE "poke_"
			/*A suivant le message recu*/
			CASE OF (DB_GET_POKE@(vl_fenetre))
				/*A message de fin*/
				CASE dedi_canal_fin
					RETURN

			ENDCASE
	ENDCASE
WEND

ENDMACRO





/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
* macro d'initialisation du module
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

FUNCTION ec35_local_init (va_fenetre)

/*
* ARGUMENTS EN ENTREE :
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Indefini
*
* CONDITION D'UTILISATION
*
* FONCTION
*
---------------------------------------------------------------------------- */
VAR tl_data
VAR vl_indice
VAR vl_boite
VAR vl_index
VAR vl_designation

	/*A affichage du seuil*/
	tl_data=READ_ASCII_FILE@(AX_PATH++IE_FILE_SEUIL_EVT_PMV)
	DB_CTRL_VALUE@(va_fenetre,"BS_seuil",tl_data[0])

	/*A affichage des variables autorisees*/
	tl_data=dedi_var_fenetre(IE_FILE_LOCAL_PMV)
	DB_CTRL_STRINGS@(va_fenetre,"BL_variables",tl_data)

	/*A chargement des perturbations depuis le fichier de config*/
	tl_data=READ_ASCII_FILE@(AX_PATH++IE_FILE_LOCAL_PMV)

	/*A parcourt le tableau lu et extrait les champs*/
	FOR vl_indice=0 TO (ARRAY_SIZE@(tl_data)-1)
		tm_data[vl_indice]=ARRAY_FROM_STRING@(tl_data[vl_indice],
											DEDI_CAR_SEPAR)
	NEXT vl_indice

	/*A affichage des donnees lues*/
	FOR vl_designation=1 TO 4
		vl_boite="BS_"++vl_designation
		FOR vl_indice=1 TO 3
			FOR vl_index=1 TO 3
				DB_CTRL_VALUE@(va_fenetre,vl_boite++vl_indice++"_"++vl_index,
					tm_data[(vl_designation-1)*3+(vl_indice-1)][vl_index-1])
			NEXT vl_index
		NEXT vl_indice
	NEXT vl_designation


ENDFUNCTION






/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
* macro de validation des objectifs
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

FUNCTION ec35_local_valide (va_fenetre)

/*
* ARGUMENTS EN ENTREE :
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Indefini
*
* CONDITION D'UTILISATION
*
* FONCTION
* verifie que toutes les perturb ont un objectif au moins
* verifie que tous les objectifs sont au moins associes a une perturbation
---------------------------------------------------------------------------- */
VAR tl_data
VAR vl_indice
VAR vl_index
VAR vl_designation
VAR vl_boite

	/*A curseur devient une montre*/
	MACRO_WINS_BUSY@()

	/*A le seuil */
	tl_data[0]=DB_CTRL_GET_VALUE@(va_fenetre,"BS_seuil")
	IF tl_data[0]=NULL
	{
		INFO_MESSAGE@("Le seuil doit être renseigné. Validation refusée.")
		RETURN(FALSE)
	}

	WRITE_ASCII_FILE@(AX_PATH++IE_FILE_SEUIL_EVT_PMV,tl_data)

	/*A affichage des donnees lues*/
	FOR vl_designation=1 TO 4
		vl_boite="BS_"++vl_designation
		FOR vl_indice=1 TO 3
			FOR vl_index=1 TO 3
				tl_data[(vl_designation-1)*3+(vl_indice-1)][vl_index-1]=
						DB_CTRL_GET_VALUE@(va_fenetre,
							vl_boite++vl_indice++"_"++vl_index)
			NEXT vl_index
		NEXT vl_indice
	NEXT vl_designation

	/*A on genere le fichier de config*/
	FOR vl_indice=0 TO (ARRAY_SIZE@(tl_data)-1)	
		/*A transforme le tableau en une chaine*/
		tl_data[vl_indice]=ARRAY_TO_STRING@(tl_data[vl_indice],
											DEDI_CAR_SEPAR)++"|"
	NEXT vl_indice
	WRITE_ASCII_FILE@(AX_PATH++IE_FILE_LOCAL_PMV,tl_data)
	
	RETURN(TRUE)

ENDMACRO



