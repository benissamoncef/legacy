/*E*/
/* Fichier :@(#)ITMA_TRG_Simulation.am	1.1    Release : 1.1   Date : 04/19/12
*------------------------------------------------------------------------
* STERIA *  PROJET MIGRAZUR
*------------------------------------------------------------------------
* SOUS-SYSTEME  GESIHM
*------------------------------------------------------------------------
* MODULE ITMA_TRG * FICHIER ITMA_TRG_Simulation.am
*-----------------------------------------------------------------------
* DESCRIPTION DU MODULE :
*
* Tester le fonctionnement du module de régulation avec un paramétrage
* de travail
*	chargement de l'ensemble des données trafic terrain sur la journée
* 		choisie
*	chargement des événements impactants sur la journée choisie
*	chargement des états de pannes des équipements PRV sur la journée
* 		choisie
*	chargement du paramétrage en cours sur la base CFT
*	démarrage de la régulation
*
* ---------------------------------------------------------------------
* HISTORIQUE :
*
* MGI 	12/04/12 : creation
* JMG	14/02/13 : traces
*-----------------------------------------------------------------------*/

INCLUDE	"dbase_.am"
INCLUDE	"datetim_.am"

INCLUDE	"../inc/ITMA_TRG.h"
INCLUDE	"../inc/ITMA_COM.h"
INCLUDE	"../inc/ITMA_TAR.h"
INCLUDE	"../inc/ITMA_TDO.h"
INCLUDE	"../inc/ITMA_TMC.h"
INCLUDE	"../inc/ITMA_TCV.h"

INCLUDE	"../inc/xzav02sp.h"

INCLUDE	"../../XDMICG/inc/xdc_ax.h"
INCLUDE	"../../XDMICG/inc/xzic_ax.h"
INCLUDE	"../../XDMICG/inc/xdf_ax.h"
INCLUDE	"../../XDMICG/inc/xzaec_ax.h"


VAR FORMAT T_zone  vm_zones


DEFINE	C_MODULE	"MTRG"			' Nom du module

VAR	tg_stations
VAR	tm_stations_select
VAR	vm_nb_lignes_station
VAR	vm_simulation


/*A
 * Definition des codes et des libelles
 * d'erreurs specifiques au module
 * ------------------------------------
 */

DEFINE	C_ERR_IHM			1

/*A
 * Noms des images digitalisees particularisant
 *     les caracteristiques d'un evenement
 * --------------------------------------------
 */

DEFINE	C_PICTO_FIGE		"pix_croix"
DEFINE	C_PICTO_MODIFIABLE	"pix_crayon"
DEFINE	C_PICTO_VERT		"pix_vert"
DEFINE	C_PICTO_ROUGE		"pix_rouge"


VAR FORMAT TCV_Donnees_Station vl_info_station	'informations sur station
VAR vm_l_picto_lib
VAR vm_nom_poste_ope, vm_num_poste_ope

/* ---------------------------------------------------------------------
* SERVICE RENDU :
*------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TRG_Simulation ()

/*
* ARGUMENTS EN ENTREE :
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Indefini
*
* CONDITION D'UTILISATION
*   Activation par menu principal.
*
* FONCTION
*
----------------------------------------------------------------------*/
	VAR vl_fenetre_events			' Nom de la fenetre du module
	VAR vl_objet_selecte			' L'objet courant de la fenetre
	VAR   vl_la_fenetre_est_active
	VAR   vl_installer_traitement_erreur
	VAR	vl_les_messages_acceptes		'pour reception de signaux

	VAR  vl_select				' Selection(s) dans la table
	VAR   i
	VAR   vl_indice,vl_index
	VAR FORMAT SQL_Procedure_Params@ vl_parametres
	VAR FORMAT SQL_Procedure_Result@ vl_resultats
	VAR   vl_data
	VAR vl_date_deb, vl_date_fin
	VAR vl_date,vl_jour,vl_mois, vl_annee, vl_heure, vl_minute
	VAR vl_jour_fin, vl_mois_fin, vl_annee_fin, vl_heure_fin, vl_minute_fin
	VAR vl_titres_sta, vl_titres_zon
	VAR vl_selection
	VAR vl_type_select
	VAR vl_lib_select
	VAR vl_valeur
	VAR tl_params, vl_param1, vl_param2, vl_param3
	VAR tl_cmd, tl_args


/*A
 * Traitements en cas d'erreur durant l'initialisation :
 * informer l'operateur, tracer l'erreur et abandonner
 * -----------------------------------------------------
 */

ON ERROR {
    ERROR_BOX@
    COM01_Trace (COM_WARNING, COM03_Message_Erreur (C_MODULE))
    RETURN
}

/*A
 * Charger la fenetre "Visualisation Simulation"
 * ---------------------------------------------
 */

vl_fenetre_events = DB_LOAD@ ("ITMA_TRG_Simulation")
DB_WINDOW_REMAIN@ (vl_fenetre_events, TRUE)

DB_XPOS@ (vl_fenetre_events, 250)
DB_YPOS@ (vl_fenetre_events, 75)

COM02_Attacher_Aide (vl_fenetre_events, "ITMA_TRG_Simulation")


/*A
* Definir les caracteristiques (initiales) des objets graphiques
* ---------------------------------------------------------------
*/
DB_CTRL_RETURN_ON_CHANGE@(vl_fenetre_events, "BA_1", TRUE)
DB_CTRL_RETURN_ON_CHANGE@ (vl_fenetre_events, "BA_2", TRUE)
DB_CTRL_RETURN_ON_CHANGE@ (vl_fenetre_events, "BA_3", TRUE)
DB_CTRL_RETURN_ON_CHANGE@ (vl_fenetre_events, "BA_4", TRUE)
DB_CTRL_RETURN_ON_CHANGE@ (vl_fenetre_events, "BA_5", TRUE)
DB_CTRL_RETURN_ON_CHANGE@ (vl_fenetre_events, "BA_6", TRUE)
DB_CTRL_RETURN_ON_CHANGE@ (vl_fenetre_events, "BA_7", TRUE)
DB_CTRL_RETURN_ON_CHANGE@(vl_fenetre_events, "BA_8", TRUE)
DB_CTRL_RETURN_ON_CHANGE@ (vl_fenetre_events, "BA_9", TRUE)

DB_CTRL_VALUE@(vl_fenetre_events, "BA_1", TRUE)
DB_CTRL_VALUE@(vl_fenetre_events, "BA_2", TRUE)
DB_CTRL_VALUE@(vl_fenetre_events, "BA_3", TRUE)
DB_CTRL_VALUE@(vl_fenetre_events, "BA_4", TRUE)
DB_CTRL_VALUE@(vl_fenetre_events, "BA_5", TRUE)
DB_CTRL_VALUE@(vl_fenetre_events, "BA_6", TRUE)
DB_CTRL_VALUE@(vl_fenetre_events, "BA_7", TRUE)
DB_CTRL_VALUE@(vl_fenetre_events, "BA_8", TRUE)
DB_CTRL_VALUE@(vl_fenetre_events, "BA_9", TRUE)

DB_CTRL_DISPLAY@(vl_fenetre_events, "BS_Heure_Debut", TRUE)
DB_CTRL_DISPLAY@(vl_fenetre_events, "BS_Minute_Debut", FALSE)
DB_CTRL_DISPLAY@(vl_fenetre_events, "BS_Seconde_Debut", FALSE)
DB_CTRL_DISPLAY@(vl_fenetre_events, "BS_Heure_Fin", FALSE)
DB_CTRL_DISPLAY@(vl_fenetre_events, "BS_Minute_Fin", FALSE)
DB_CTRL_DISPLAY@(vl_fenetre_events, "BS_Seconde_Fin", FALSE)

DB_CTRL_VALUE@(vl_fenetre_events, "BS_Heure_Debut", "06")
DB_CTRL_VALUE@(vl_fenetre_events, "BS_Minute_Debut", "00")
DB_CTRL_VALUE@(vl_fenetre_events, "BS_Seconde_Debut", "00")

DB_CTRL_VALUE@(vl_fenetre_events, "BS_Heure_Fin", "23")
DB_CTRL_VALUE@(vl_fenetre_events, "BS_Minute_Fin", "59")
DB_CTRL_VALUE@(vl_fenetre_events, "BS_Seconde_Fin", "59")

/*A
 * Mettre en place la reception des messages
 * -----------------------------------------
 */

vl_les_messages_acceptes[0] = COM_CANAL_FIN_SIMU
vl_les_messages_acceptes[1] = COM_CANAL_DEJA_SIMU
DB_ACCEPT_POKES@ (vl_fenetre_events, vl_les_messages_acceptes)

/*A
 * Initialiser la visualisation (liste des evenements)
 * ---------------------------------------------------
 */
MACRO_WINS_BUSY@()
IF TRG_Init_Visualisation (vl_fenetre_events) <> COM_OK
    RETURN

/*A
 * Traitements en cas d'erreur durant la visualisation :
 * informer l'operateur, tracer l'erreur et continuer
 * -----------------------------------------------------
 */
vm_simulation = 0

vl_installer_traitement_erreur = TRUE
WHILE vl_installer_traitement_erreur
    vl_installer_traitement_erreur = FALSE

    ON ERROR {
	ERROR_BOX@
	IF ERROR_NUMBER@() <> C_ERR_IHM
	    COM01_Trace (COM_WARNING, COM03_Message_Erreur (C_MODULE))
	vl_installer_traitement_erreur = TRUE
    }
WEND


/*A
 * Visualiser la fenetre tant que la tache
 * n'est pas stoppee par le signal de fin
 * ---------------------------------------
 */

vl_type_select = -1
vl_lib_select = -1

vl_la_fenetre_est_active = TRUE
WHILE vl_la_fenetre_est_active
    DB_DISPLAY@ (vl_fenetre_events)
    vl_objet_selecte = DB_EXIT_CTRL@ (vl_fenetre_events)
	 IF vl_objet_selecte <> "poke_"  AND  SYSTEM_VAR@ (vg_verrou)
		vl_objet_selecte = NULL

    CASE OF vl_objet_selecte
 
	/*A
	*	traitement des pokes
	*	--------------------------------------
	*/
	CASE "poke_"
        	CASE OF  DB_GET_POKE@ (vl_fenetre_events)
        		CASE COM_CANAL_FIN_SIMU
			/* récuperation et affichage des traces par apple a xzav02 */
			TRG_Recup_Trace(vl_fenetre_events,XZAV02_Recup_Trace,vl_date_deb, vl_date_fin,1)

		/* récuperation des courbes de Q, TO, et V par appel a xzas06 */				/*TRG_Recup_Courbe(vl_fenetre_events,XZAS06,vm_stations[vl_select].numero,vl_date_fin)*/

	    	 CASE COM_CANAL_DEJA_SIMU
	     	 INFO_MESSAGE@("Simulation deja en cours")
	 ENDCASE
	
	/*A
     * Sur selection bouton lancer simulation,
     * ---------------------------------------
     */
	CASE "BP_lancerSimu"
		/*B Déclenchement de la simulation */
		vl_date_deb = COM23_Horodate (vl_fenetre_events, "BS_Jour_Debut", "BS_Mois_Debut", "BS_Annee_Debut", "BS_Heure_Debut", "BS_Minute_Debut", "BS_Seconde_Debut")
	
	vl_date_fin = COM23_Horodate (vl_fenetre_events, "BS_Jour_Fin", "BS_Mois_Fin", "BS_Annee_Fin", "BS_Heure_Fin", "BS_Minute_Fin", "BS_Seconde_Fin")
		
		IF NOT IS_NULL@ (vl_date_deb)
		{
			IF NOT IS_NULL@ (vl_date_fin)
			{
				/* appel a xzav03_demarrer_simulation */
				/* envoyer la commande de forcage */
				tl_args[0] = vl_date_deb
				tl_args[1] = vl_date_fin
				tl_args[2] = SYSTEM_VAR@(vg_numero_poste)
				tl_args[3] = SYSTEM_VAR@(vg_poste)
				tl_cmd = MTAR_MSG_EXEC, 1, MTAR_FCT_XZAV03, ARRAY_TO_STRING@(tl_args, MTAR_CAR_SEPAR)
				DB_SEND_POKE@ (COM_CANAL_TAR01, tl_cmd)
				vm_simulation = 1
			}
			ELSE
			{
				INFO_MESSAGE@("veuillez rentrer une horodate de fin")				
			}

		}
		ELSE 		
		{
			IF IS_NULL@(vl_date_fin)
				INFO_MESSAGE@("veuillez rentrer une horodate de début et une horodate de fin") 
			ELSE
			{
				INFO_MESSAGE@("veuillez rentrer une horodate de début")
			}
		}

	/*A
     * Sur selection bouton arret simulation,
     * ---------------------------------------
     */
	CASE "BP_arretSimu"
        	COM24_Afficher_Horodate (COM09_Date_Courante(TRUE), vl_fenetre_events,"BS_Jour_Debut","BS_Mois_Debut","BS_Annee_Debut")
		vl_date_deb = COM23_Horodate (vl_fenetre_events, "BS_Jour_Debut", "BS_Mois_Debut", "BS_Annee_Debut", "BS_Heure_Debut", "BS_Minute_Debut", "BS_Seconde_Debut")
		vl_date_fin = vl_date_deb
				/* appel a xzav03_demarrer_simulation */
				/* envoyer la commande de forcage */
				tl_args[0] = vl_date_deb
				tl_args[1] = vl_date_fin
				tl_args[2] = SYSTEM_VAR@(vg_numero_poste)
				tl_args[3] = SYSTEM_VAR@(vg_poste)
				tl_cmd = MTAR_MSG_EXEC, 1, MTAR_FCT_XZAV03, ARRAY_TO_STRING@(tl_args, MTAR_CAR_SEPAR)
				DB_SEND_POKE@ (COM_CANAL_TAR01, tl_cmd)

		
			
	/*A
	*	selection bouton horodate courante
	*	------------------------------------
	*/
	CASE "BP_horodeb"
        	COM24_Afficher_Horodate (COM09_Date_Courante(TRUE), vl_fenetre_events,"BS_Jour_Debut","BS_Mois_Debut","BS_Annee_Debut")
	
	/*A
	*	selection bouton horodate courante
	*	------------------------------------
	*/	
	CASE "BP_horofin"
        	COM24_Afficher_Horodate (COM09_Date_Courante(TRUE), vl_fenetre_events,"BS_Jour_Fin", "BS_Mois_Fin", "BS_Annee_Fin")


	CASE "BP_lancerRecherche"
			/*récuperation et affichage des traces par appel a xzav02*/
			TRG_Recup_Trace(vl_fenetre_events,XZAV02_Recup_Trace,vl_date_deb, vl_date_fin,1)



	/*A
	* Sur selection bouton Annuler
	* ---------------------------- 
	*/
	CASE "BP_Annuler"
		
		DB_CTRL_VALUE@(vl_fenetre_events, "BS_Jour_Debut", NULL)
		DB_CTRL_VALUE@(vl_fenetre_events, "BS_Mois_Debut", NULL)
		DB_CTRL_VALUE@(vl_fenetre_events, "BS_Annee_Debut", NULL)
		DB_CTRL_VALUE@(vl_fenetre_events, "BS_Heure_Debut", NULL)
		DB_CTRL_VALUE@(vl_fenetre_events, "BS_Minute_Debut", NULL)
		DB_CTRL_VALUE@(vl_fenetre_events, "BS_Seconde_Debut", NULL)
		DB_CTRL_VALUE@(vl_fenetre_events, "BS_Jour_Fin", NULL)
		DB_CTRL_VALUE@(vl_fenetre_events, "BS_Mois_Fin", NULL)
		DB_CTRL_VALUE@(vl_fenetre_events, "BS_Annee_Fin", NULL)
		DB_CTRL_VALUE@(vl_fenetre_events, "BS_Heure_Fin", NULL)
		DB_CTRL_VALUE@(vl_fenetre_events, "BS_Minute_Fin", NULL)
		DB_CTRL_VALUE@(vl_fenetre_events, "BS_Seconde_Fin", NULL)

		DB_CTRL_VALUE@(vl_fenetre_events, "BA_1", FALSE)
		DB_CTRL_VALUE@(vl_fenetre_events, "BA_2", FALSE)
		DB_CTRL_VALUE@(vl_fenetre_events, "BA_3", FALSE)
		DB_CTRL_VALUE@(vl_fenetre_events, "BA_4", FALSE)
		DB_CTRL_VALUE@(vl_fenetre_events, "BA_5", FALSE)				
		DB_CTRL_VALUE@(vl_fenetre_events, "BA_6", FALSE)
		DB_CTRL_VALUE@(vl_fenetre_events, "BA_7", FALSE)
		DB_CTRL_VALUE@(vl_fenetre_events, "BA_8", FALSE)
		DB_CTRL_VALUE@(vl_fenetre_events, "BA_9", FALSE)

		DB_TABLE_CLEAR_DATA@(vl_fenetre_events, "TA_Traces", -1)

	/* Sur selection bouton Quitter
	* ---------------------------- 
	*/
	CASE "BP_Quitter"
		vl_la_fenetre_est_active = FALSE
	
    ENDCASE
WEND

ENDMACRO


/*X*/
/* ---------------------------------------------------------------------
* SERVICE RENDU :
*  Initialise la visualisation.
------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO TRG_Init_Visualisation (va_fenetre)

/*
* ARGUMENTS EN ENTREE :
*   va_fenetre        : Id. de la fenetre a initialiser.
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : COM_OK en cas d'execution correcte, COM_NOK sinon.
*
* CONDITION D'UTILISATION
*   ITMA_TPL_Param_Libelles
*
* FONCTION
*   Initialise les valeurs a afficher et le fonctionnement general du module.
*
--------------------------------------------------------------------- */
  

/*A
 * Valuer la table a afficher
 * --------------------------
 */

DB_DISPLAY_ONLY@ (va_fenetre, TRUE)                   ' Pour avoir acces
DB_DISPLAY@ (va_fenetre)                              '  a l'objet table
DB_DISPLAY_ONLY@ (va_fenetre, FALSE)


RETURN (COM_OK)

ENDMACRO




/* ---------------------------------------------------------------------
* SERVICE RENDU :
* ----------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO TRG_Recup_Trace (va_fenetre, va_proc, va_debut, va_fin,va_simu)

/*
* ARGUMENTS EN ENTREE :
*   va_fenetre        : Id. de la fenetre contenant les objets a initialiser.
*   va_proc		: Nom de la procedure stockee a executer
*   va_type_select    : 
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : COM_OK en cas d'execution correcte, COM_NOK sinon.
*
* CONDITION D'UTILISATION
*   ITMA_TRG_Param_Libelles ;
*
* FONCTION
*   creation ou modification d'un libelle predefini.
*
--------------------------------------------------------------------- */

    VAR FORMAT SQL_Procedure_Params@ vl_parametres
    VAR FORMAT SQL_Procedure_Result@ vl_resultats
    VAR i, j, vl_num_param, vl_num_lib, vl_base, vl_res
    VAR vl_data, vl_t_titres
	VAR vm_Trace, vm_Trace_ord

vl_base = XDC_BASE_EXP

vl_parametres = null	
vl_parametres[0].type = SYB#CHAR_
vl_parametres[0].data = vl_base
vl_parametres[0].output = FALSE

vl_parametres[1].type = SYB#DATETIME_
vl_parametres[1].data = va_debut
vl_parametres[1].output = FALSE

vl_parametres[2].type = SYB#DATETIME_
vl_parametres[2].data = va_fin
vl_parametres[2].output = FALSE

vl_parametres[3].type = SYB#BIT_
vl_parametres[3].data = DB_CTRL_GET_VALUE@(va_fenetre, "BA_1")
vl_parametres[3].output = FALSE

vl_parametres[4].type = SYB#BIT_
vl_parametres[4].data = DB_CTRL_GET_VALUE@(va_fenetre, "BA_2")
vl_parametres[4].output = FALSE

vl_parametres[5].type = SYB#BIT_
vl_parametres[5].data = DB_CTRL_GET_VALUE@(va_fenetre, "BA_3")
vl_parametres[5].output = FALSE

vl_parametres[6].type = SYB#BIT_
vl_parametres[6].data = DB_CTRL_GET_VALUE@(va_fenetre, "BA_4")
vl_parametres[6].output = FALSE

vl_parametres[7].type = SYB#BIT_
vl_parametres[7].data = DB_CTRL_GET_VALUE@(va_fenetre, "BA_5")
vl_parametres[7].output = FALSE

vl_parametres[8].type = SYB#BIT_
vl_parametres[8].data = DB_CTRL_GET_VALUE@(va_fenetre, "BA_6")
vl_parametres[8].output = FALSE

vl_parametres[9].type = SYB#BIT_
vl_parametres[9].data = DB_CTRL_GET_VALUE@(va_fenetre, "BA_7")
vl_parametres[9].output = FALSE

vl_parametres[10].type = SYB#BIT_
vl_parametres[10].data = DB_CTRL_GET_VALUE@(va_fenetre, "BA_8")
vl_parametres[10].output = FALSE

vl_parametres[11].type = SYB#BIT_
vl_parametres[11].data = DB_CTRL_GET_VALUE@(va_fenetre, "BA_9")
vl_parametres[11].output = FALSE


vl_parametres[12].type = SYB#INT2_
vl_parametres[12].data = va_simu
vl_parametres[12].output = FALSE

vl_resultats = null

	IF COM05_SQL_Procedure(va_proc,vl_parametres, vl_resultats,C_MODULE) <> COM_OK
 	RETURN (COM_NOK)

if vl_resultats.select_results[0] = null
{
	return
}
vm_Trace = null
vm_Trace = vl_resultats.select_results[0]

/*A  Affichage des libelles du type de libelles choisi */

vl_t_titres[0] = "horodate ",			80	' Titre colonne,taille en pixels
vl_t_titres[1] = "zone",				100
vl_t_titres[2] = "scenario",			120
vl_t_titres[3] = "libelle",			250
vl_t_titres[4] = "condition",			250
vl_t_titres[5] = "num_FMC",			70
vl_t_titres[6] = "cle_FMC",			60
vl_t_titres[7] = "alerte",			90
vl_t_titres[8] = "acq_alerte",		75
vl_t_titres[9] = "station",			75
vl_t_titres[10] = "sens_station",		75
vl_t_titres[11] = "simulation",		30
vl_t_titres[12] = "type",			25

DB_TABLE_CLEAR_DATA@(va_fenetre, "TA_Traces",0,-1)
if vm_Trace <> null 

for i = 0 to (array_size@(vm_trace)-1)
	vm_trace[i][0] = SUBSTRING@(COM18_Date_SGBD_Formatee(vm_trace[i][0]),12)
	vm_Trace_ord[array_size@(vm_trace)-1-i]=vm_Trace[i]
next i


	DB_TABLE_SET_DATA@(va_fenetre, "TA_Traces", vm_Trace_ord, vl_t_titres)

RETURN (COM_OK)

ENDMACRO

