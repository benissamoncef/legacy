/*E*/
/* Fichier : $Id: ITMA_TLT_Liste_FMC_Locales.am,v 1.9 2020/11/03 17:40:00 pc2dpdy Exp $     Release : $Revision: 1.9 $        Date : $Date: 2020/11/03 17:40:00 $ 
-------------------------------------------------------------------------------
* STERIA *  PROJET MIGRAZUR
-------------------------------------------------------------------------------
* SOUS-SYSTEME  GESIHM
-------------------------------------------------------------------------------
* MODULE ITMA_TLT * FICHIER ITMA_TLT_Liste_FMC_Locales.am
-------------------------------------------------------------------------------
* DESCRIPTION DU MODULE :
*
* Liste des Fiches Main Courante locales sur un PC simplifie 
*
*
-------------------------------------------------------------------------------
* HISTORIQUE :
*
* Guilhou		22 aut 1996	: Creation
* Torregrossa	04 dec 1996	: Affichage des icones des fmc (680) (V1.2-1.3)
* Torregrossa	10 dec 1996	: Grisage et degrisage des boutons (V1.4)
* Guilhou	1Å nov 1997 : mise des liste en vg pour dem/1502 1.5
* Niepceron	21 Jan 1999	: decalage vers le bas de la fenetre pour demasquer  les icones (1727) 1.6
* ???		??/03/1999 : Datex 1.7
* JPL		27/04/2007 : Prise en compte FMC "Vehicule en Marche Arriere" 1.8
* LCL   	22/04/20        : MOVIS Ajout site local pilotage DEM-SAE93
---------------------------------------------------------------------------- */

INCLUDE	"dbase_.am"
INCLUDE	"../inc/ITMA_COM.h"
INCLUDE	"../inc/ITMA_TDO.h"

INCLUDE	"../inc/ITMA_TLV.h"
INCLUDE	"../inc/ITMA_TAR.h"
INCLUDE	"../inc/xzae104sp.h"
INCLUDE	"../inc/xzae106sp.h"
INCLUDE	"../inc/itre_son_ax.h"
INCLUDE	"../../XDMICG/inc/xzic_ax.h"
INCLUDE    "../../XDMICG/inc/xdc_ax.h"
INCLUDE    "../../XDMICG/inc/xzaec_ax.h"



DEFINE	C_MODULE	"MTLT"			' Nom du module



/*A
 * Definition des codes et des libelles
 * d'erreurs specifiques au module
 * ------------------------------------
 */

DEFINE	C_ERR_IHM			1

DEFINE	C_LIB_FMC_INCONNUE	"Cet événement ne vous est pas destiné"

/*A
 * Position des donnees lues en base
 * ---------------------------------
 */

DEFINE  C_COL_DEBUT     5
DEFINE  C_COL_OPERATION 7
DEFINE	C_COL_DATEX	8

/*A
 * Noms des images digitalisees particularisant
 *     les caracteristiques d'un evenement
 * --------------------------------------------
 */

DEFINE  C_PICTO_EN_PREV_ENRICHIR        "pix_crayon_gris"
DEFINE  C_PICTO_EN_COURS_ENRICHIR       "pix_crayon_vert"
DEFINE  C_PICTO_FIN_ENRICHIR            "pix_crayon_rouge"
DEFINE  C_PICTO_EN_PREV_PAR_DEFAUT      "pix_designer_gris"
DEFINE  C_PICTO_EN_COURS_PAR_DEFAUT     "pix_designer_vert"
DEFINE  C_PICTO_FIN_PAR_DEFAUT          "pix_designer_rouge"
DEFINE  C_PICTO_SURCHARGE			"pix_designer"
DEFINE	C_PICTO_DATEX				"pix_designer_datex"
DEFINE	C_PICTO_DATEX_FIN			"pix_designer_datex_fin"


/*A
 * Description du format des donnees affichees
 * -------------------------------------------
 */

FORMAT	TLT_Evenement
	numero,					' Numero evenement
	cle,						' Poste enrichisseur (3 car)
	type,					' Type evenement (25 car)
	date_debut,				' Date debut (16 car)
	localisation				' Localisation event. (28 car)


/*A
 * Description du format des donnees internes
 * ------------------------------------------
 */

FORMAT	TLT_Info_Evenement
	FORMAT COM_Intitule_FMC info_evt,	' Informations evenement
	enrichir,				' A-t-on les droits d'enrichir ?
	date_debut,				' date de debut fmc
	date_debut_prevu,			' date de debut prevu fmc
	date_fin,				' date de fin fmc
	date_fin_prevue,				' date de fin prevue fmc
	datex					' FMC datex ?

/*A
 * Description du format des donnees lues en base
 * ----------------------------------------------
 */

FORMAT	TLT_Donnees_Evenement
	num_evt,				' Numero d'evenement
	cle_evt,				' Cle evenement
	type,				' Numero de type evenement
	date,
	localisation,
	debut,
	fin,
	operation,
	datex



VAR FORMAT TLT_Evenement vm_t_evt	' Table des evenements affichee
VAR	vm_l_picto				' Noms des pictogrammes

VAR FORMAT TLT_Info_Evenement vm_t_info		' Table des infos internes
VAR	vm_mode_formation		'mode formation

/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
*  Visualisation de la liste des fiches Main Courante a traiter pour le poste
*  operateur.
*  Sur reception d'un signal de modification, rafraichissement de la liste.
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TLT_Liste_FMC_Locales (va_appelant,va_horodate)

/*
* ARGUMENTS EN ENTREE :
*  va_appelant        : Nom de la macro Applix ayant invoque la presente.
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Indefini
*
* CONDITION D'UTILISATION
*   Activation par MTMT.
*
* FONCTION
*   affiche la liste des fiches Main Courante locales
*   a traiter associee au poste operateur.
*   Se met en attente d'un signal (message d'une autre tache) de changements
*   et sur occurrence du signal, reinitialise la liste des fiches.
*   Sur reception de messages, edite la liste (ajoute ou supprime une fiche)
*   ou visualise la liste des elements Main Courante.
*   Ne termine que sur reception d'un message de fin.
*
---------------------------------------------------------------------------- */

    VAR     vl_fenetre_events			' Nom de la fenetre du module
    VAR     vl_objet_selecte			' L'objet courant de la fenetre
    VAR     vl_les_messages_acceptes		' Pour reception de signaux
    VAR     vl_la_fenetre_est_active
    VAR     vl_installer_traitement_erreur

    VAR     vl_message				' Message recu d'un autre module
    VAR     vl_args_msg				' Differents elements du message
    VAR     vl_mode_FMC				' Le mode actuel

    VAR     vl_select				' Selection(s) dans la table
    VAR     i
	VAR vl_indice,vl_index
	VAR vl_cmd,vl_type
	VAR FORMAT  TLT_Evenement vl_evt
	VAR FORMAT  TLT_info_Evenement vl_info
	VAR vl_operateur

/*A
 * Traitements en cas d'erreur durant l'initialisation :
 * informer l'operateur, tracer l'erreur et abandonner
 * -----------------------------------------------------
 */

ON ERROR {
    ERROR_BOX@
    COM01_Trace (COM_WARNING, COM03_Message_Erreur (C_MODULE))
    RETURN
}

/*A recupere le mode d'appel*/
IF (SUBSTRING@(va_appelant,6,3)="TSC")
{
	vm_mode_formation=TRUE
}
ELSE
	vm_mode_formation=FALSE

/*A
 * Charger la fenetre "Liste evenements a traiter"
 * -----------------------------------------------
 */

vl_fenetre_events = DB_LOAD@ ("ITMA_TLT_Locales")
DB_WINDOW_REMAIN@ (vl_fenetre_events, TRUE)

DB_XPOS@ (vl_fenetre_events, 0)
DB_YPOS@ (vl_fenetre_events, 105)


/*A
 * Mettre en place la reception des messages
 * -----------------------------------------
 */

vl_les_messages_acceptes[0] = COM_CANAL_FIN
vl_les_messages_acceptes[1] = COM_CANAL_MTLT
vl_les_messages_acceptes[2] = COM_CANAL_MTLT_FIN
DB_ACCEPT_POKES@ (vl_fenetre_events, vl_les_messages_acceptes)

/*A
 * Definir les caracteristiques (initiales) des objets graphiques
 * --------------------------------------------------------------
 */

DB_TABLE_SET_MARKER_WIDTH@ (vl_fenetre_events, "TA_Evenements", 23)
DB_TABLE_ALLOW_COLUMN_RESIZING@ (vl_fenetre_events, "TA_Evenements", FALSE)
DB_CTRL_HORIZ_SCROLL@ (vl_fenetre_events, "TA_Evenements", TRUE)
DB_CTRL_RETURN_ON_CHANGE@ (vl_fenetre_events, "TA_Evenements", TRUE)


/*A
 * Initialiser la visualisation (liste des evenements)
 * ---------------------------------------------------
 */
MACRO_WINS_BUSY@()
IF Init_Visualisation_Locales (vl_fenetre_events,va_horodate) <> COM_OK
    RETURN

/*A
 * Traitements en cas d'erreur durant la visualisation :
 * informer l'operateur, tracer l'erreur et continuer
 * -----------------------------------------------------
 */

vl_installer_traitement_erreur = TRUE
WHILE vl_installer_traitement_erreur
    vl_installer_traitement_erreur = FALSE

    ON ERROR {
	ERROR_BOX@
	IF ERROR_NUMBER@() <> C_ERR_IHM
	    COM01_Trace (COM_WARNING, COM03_Message_Erreur (C_MODULE))
	vl_installer_traitement_erreur = TRUE
    }
WEND


/*A
 * Visualiser la fenetre tant que la tache
 * n'est pas stoppee par le signal de fin
 * ---------------------------------------
 */

vl_la_fenetre_est_active = TRUE
WHILE vl_la_fenetre_est_active
    DB_DISPLAY@ (vl_fenetre_events)
    vl_objet_selecte = DB_EXIT_CTRL@ (vl_fenetre_events)

    IF vl_objet_selecte <> "poke_"  AND  SYSTEM_VAR@ (vg_verrou)
	vl_objet_selecte = NULL

    CASE OF vl_objet_selecte

    CASE "poke_"
	CASE OF  DB_GET_POKE@ (vl_fenetre_events)
	CASE COM_CANAL_FIN
	    vl_la_fenetre_est_active = FALSE

	/*poke de fin de la liste des fmc (utilise par module MTSC)*/
	CASE COM_CANAL_MTLT_FIN
		RETURN



	/*poke de demande d'ouverture d'une fiche */
	CASE COM_CANAL_MTLT_FMC
		vl_message = DB_GET_POKE_DATA@ (vl_fenetre_events)

		/*A cherche l'evenement */
		i = TLT_Index_FMC (vl_message[0], vl_message[1],vm_t_info)

		/*A s'il n'est pas trouve dans la liste des fiches a traiter*/
		IF (i=ARRAY_SIZE@ (vm_t_info))
		{	
			ERROR@ (C_ERR_IHM, C_LIB_FMC_INCONNUE)
		}
		ELSE IF SYSTEM_VAR@ (vg_fmc_ouverte)
		{	
			ERROR@ (C_ERR_IHM, COM_LIB_FMC_OUVERTE)
		}
		ELSE
		{
		    	NEW_TASK@ ("ITMA_TMC_Fiche_Main_Courante",
					  "ITMA_TLT_Liste_FMC_A_Traiter",
			  		vm_t_info[i].info_evt,
			  		vm_t_info[i].enrichir,
					XDC_FMC_ETAT_TRAI)
		}

	CASE COM_CANAL_MTLT
		/*A
		 * Sur reception du signal de modification,
		 * reinitialiser la liste des evenements
		 * ----------------------------------------
		 */

		TLT_Init_Liste_FMC_Locales (vl_fenetre_events)
		DB_TABLE_CLEAR_DATA@ (vl_fenetre_events, "TA_Evenements", 0, -1)
		DB_TABLE_SET_NEW_DATA@ (vl_fenetre_events, "TA_Evenements",
				   vm_t_evt, 0)
		DB_TABLE_MARKER_PIXMAPS@ (vl_fenetre_events, "TA_Evenements",
				     0, vm_l_picto)
		DB_CTRL_GRAYED@(vl_fenetre_events, "BP_achever", TRUE)
		DB_CTRL_GRAYED@(vl_fenetre_events, "BP_consulter", TRUE)
		DB_CTRL_GRAYED@(vl_fenetre_events, "BP_depanneur", TRUE)

    ENDCASE

     /* appui sur une fmc*/
     CASE "TA_Evenements"
	vl_select = DB_TABLE_GET_SELECTIONS@ (vl_fenetre_events,"TA_Evenements")
	i = vl_select[0]
     IF vm_t_info[i] <> NULL
     {
		DB_CTRL_GRAYED@(vl_fenetre_events, "BP_achever", FALSE)
		DB_CTRL_GRAYED@(vl_fenetre_events, "BP_consulter", FALSE)
		DB_CTRL_GRAYED@(vl_fenetre_events, "BP_depanneur", FALSE)
    	}
     ELSE {
		DB_CTRL_GRAYED@(vl_fenetre_events, "BP_achever", TRUE)
		DB_CTRL_GRAYED@(vl_fenetre_events, "BP_consulter", TRUE)
		DB_CTRL_GRAYED@(vl_fenetre_events, "BP_depanneur", TRUE)
    	}

     /* appui sur le bouton Depanneur*/
     CASE "BP_depanneur"
	MACRO_WINS_BUSY@()
	vl_select = DB_TABLE_GET_SELECTIONS@ (vl_fenetre_events,"TA_Evenements")
	i = vl_select[0]

	/*si une FMC est bien selectionnee*/
	IF ( (i++"")<>null) {
     	IF vm_t_info[i] = NULL
     	{
      	     /* ligne separatrice sélectionnée : rien a faire */
      	     DB_TABLE_SET_SELECTIONS@ (vl_fenetre_events,"TA_Evenements",NULL)
     	}
		ELSE
     	{
			vl_info=vm_t_info[i]
	   		vl_type=vl_info.info_evt.Numtype

			/*si c'est une fiche du bon type*/
			if ( 	(vl_type=XZAEC_FMC_Accident) OR
				(vl_type=XZAEC_FMC_VehPanne) OR
				(vl_type=XZAEC_FMC_VehArrete) OR
				(vl_type=XZAEC_FMC_Contresens) OR
				(vl_type=XZAEC_FMC_VehMarcheArr) OR
				(vl_type=XZAEC_FMC_VehFeu) ) {
				NEW_TASK@("ITMA_TLT_Depanneurs",
						"ITMA_TLT_Liste_FMC_Locales",
						vl_info.info_evt.idfmc.numero,
						vl_info.info_evt.idfmc.cle,
						"intitule fmc")
			}
			else
				INFO_MESSAGE@("Pas de fiche depanneur associee a ce type de FMC")
		}
	}

     /* appui sur le bouton Achever FMC*/
     CASE "BP_achever"
        MACRO_WINS_BUSY@()
	vl_select = DB_TABLE_GET_SELECTIONS@ (vl_fenetre_events,"TA_Evenements")
	i = vl_select[0]

	/*si une FMC est bien selectionnee*/
	IF ( (i++"")<>null) {
		vl_evt=vm_t_evt[i]
     	IF vm_t_info[i] = NULL
     	{
      	     /* ligne separatrice sélectionnée : rien a faire */
      	     DB_TABLE_SET_SELECTIONS@ (vl_fenetre_events,"TA_Evenements",NULL)
     	}
		ELSE IF (TLT_achever(vl_fenetre_events,vl_evt)=COM_OK) {
			/*mise a jour de la liste*/
			vm_t_evt=ARRAY_DELETE@(vm_t_evt,i)
			vm_l_picto=ARRAY_DELETE@(vm_l_picto,i)
			DB_TABLE_CLEAR_DATA@ (vl_fenetre_events, "TA_Evenements", 0, -1)
			DB_TABLE_SET_NEW_DATA@ (vl_fenetre_events, "TA_Evenements",
					vm_t_evt, 0)
			DB_TABLE_MARKER_PIXMAPS@ (vl_fenetre_events, "TA_Evenements",
					0, vm_l_picto)
		}
	}

     /* appui sur le bouton Consulter FMC */
     CASE "BP_consulter"
	MACRO_WINS_BUSY@()
	vl_select = DB_TABLE_GET_SELECTIONS@ (vl_fenetre_events,"TA_Evenements")
	i = vl_select[0]

	IF SYSTEM_VAR@ (vg_fmc_ouverte)
   	  ERROR@ (C_ERR_IHM, COM_LIB_FMC_OUVERTE)
	/*si une FMC est bien selectionnee*/
	else if ( (i++"")<>null) {
		vl_evt=vm_t_evt[i]

     	IF vm_t_info[i] = NULL
     	{
      	     /* ligne separatrice sélectionnée : rien a faire */
      	     DB_TABLE_SET_SELECTIONS@ (vl_fenetre_events,"TA_Evenements",NULL)
     	}
		/*je regarde si c'est ma fiche operateur*/
		ELSE IF ( (vl_evt.numero=SYSTEM_VAR@(vg_num_fiche_operateur)) and (vl_evt.cle=SYSTEM_VAR@(vg_cle_fiche_operateur))) {
			/*je l'ouvre*/
		    	NEW_TASK@ ("ITMA_TMC_Fiche_Main_Courante",
				  	"ITMA_TLT_Liste_FMC_Locales",
			  		vm_t_info[i].info_evt,
			  		1,
					XDC_FMC_ETAT_TRAI)
		}
		else {/*si ce n'est pas ma fiche operateur*/
			/*si j'ai perdu la communication avec le CI*/
			if (SYSTEM_VAR@(vg_comm_CI)<>XDC_OK) {
				INFO_MESSAGE@(C_LIB_PERTE_CI)
			}
			else { /*j'affiche la synthese*/
				PEND_FOR_NEW_TASK@("ITMA_TSE_Synthese_Evt",
				"ITMA_TLT_Liste_FMC_Locales",
				vl_evt)
			}	
		}
	}
    ENDCASE
WEND

ENDMACRO



/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
*  Initialise la visualisation.
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO Init_Visualisation_Locales (va_fenetre,va_horodate)

/*
* ARGUMENTS EN ENTREE :
*   va_fenetre        : Id. de la fenetre a initialiser.
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : COM_OK en cas d'execution correcte, COM_NOK sinon.
*
* CONDITION D'UTILISATION
*   ITMA_TLT_Liste_FMC_A_Traiter
*
* FONCTION
*   Initialise les valeurs a afficher et le fonctionnement general du module.
*
---------------------------------------------------------------------------- */

	VAR     vl_t_titres				' Titres colonnes de la table
	VAR     vl_texte
	VAR     i
	VAR     vl_type_fmc
	VAR     vl_index
	VAR     tl_types_fmc

/*A
 * Valuer ensuite les donnees de la table
 * --------------------------------------
 */

IF TLT_Init_Liste_FMC_Locales (va_fenetre,va_horodate) <> COM_OK
    RETURN (COM_NOK)


/*A
 * Definir les titres des colonnes de la table
 * -------------------------------------------
 */

vl_t_titres[0] = "Numéro",		54	' Titre colonne,taille en pixels
vl_t_titres[1] = "Site",		50
vl_t_titres[2] = "Type",		105
vl_t_titres[3] = "Date de début",	106
vl_t_titres[4] = "Localisation",	182


/*A
 * Valuer la table a afficher
 * --------------------------
 */

DB_DISPLAY_ONLY@ (va_fenetre, TRUE)                     ' Pour avoir acces
DB_DISPLAY@ (va_fenetre)                                '  a l'objet table
DB_DISPLAY_ONLY@ (va_fenetre, FALSE)

DB_TABLE_SET_DATA@(va_fenetre, "TA_Evenements", vm_t_evt, vl_t_titres)
DB_TABLE_MARKER_PIXMAPS@ (va_fenetre, "TA_Evenements", 0, vm_l_picto)

RETURN (COM_OK)

ENDMACRO



/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
*  Initialise la liste des messages a diffuser ;
*  met en evidence les messages dont le nombre de diffusions est 0.
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO TLT_Init_Liste_FMC_Locales (va_fenetre,va_horodate)

/*
* ARGUMENTS EN ENTREE :
*   va_fenetre        : Id. de la fenetre contenant les objets a initialiser.
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : COM_OK en cas d'execution correcte, COM_NOK sinon.
*
* CONDITION D'UTILISATION
*   TLT_Init_Visualisation	  a l'initialisation ;
*   ITMA_TLT_Liste_FMC_A_Traiter  sur reception d'un signal de modification.
*
* FONCTION
*   (re)initialise les valeurs de la liste des fiches Main Courante.
*
---------------------------------------------------------------------------- */

VAR FORMAT TDO_Type_FMC		vl_les_types_FMC
VAR					vl_numeros_FMC

VAR vl_type
VAR i
VAR 	FORMAT SQL_Procedure_Params@ vl_parametres
VAR 	FORMAT SQL_Procedure_Result@ vl_resultats
VAR	tl_tab
VAR 	FORMAT COM_Intitule_FMC vl_FMC
VAr vl_evt
VAR vl_start
VAR FORMAT TLT_Evenement tl_evt		' Table des evenements affichee

VAR FORMAT TLT_Donnees_Evenement tl_info


/*A
 * Lire dans l'environnement les listes des types FMC et des districts
 * -------------------------------------------------------------------
 */

vl_les_types_FMC = SYSTEM_VAR@ (vg_les_types_FMC)
vl_numeros_FMC = ARRAY_COLUMN@ (vl_les_types_FMC, TDO_NUMERO_FMC)

/*si ma fiche operateur est en tete de liste*/
if (vm_t_evt[0].numero=SYSTEM_VAR@(vg_num_fiche_operateur)) AND
		(vm_t_evt[0].cle=SYSTEM_VAR@(vg_cle_fiche_operateur)) {
	tl_evt=vm_t_evt[0]
	goto pos_loop
}

/*recherche de ma fmc operateur*/
tl_evt=null
vl_resultats=null

vl_parametres[0].type = SYB#CHAR_                               ' Site local
vl_parametres[0].data = SYSTEM_VAR@(vg_nom_site)
vl_parametres[0].output = FALSE

IF (COM05_SQL_Procedure (XZAE104_FMC_Operateur_En_Cours, vl_parametres, vl_resultats, C_MODULE) <> COM_OK)
  return (com_nok)
i=ARRAY_SIZE@(vl_resultats.select_results[0])
tl_evt=vl_resultats.select_results[0][i-1]
tl_evt.date_debut=COM18_Date_SGBD_Formatee(tl_evt.date_debut)


pos_loop:
vm_t_evt = NULL
vm_t_info = NULL
vm_l_picto = NULL

tl_info = SYSTEM_VAR@(vg_fmc_locales)

tl_info = ARRAY_INSERT@(tl_info,tl_evt,0)
tl_info[0].debut=tl_evt.date_debut

FOR i = 0  TO ARRAY_SIZE@ (tl_info) - 1
	vm_t_evt[i].numero = tl_info[i].num_evt
	vm_t_evt[i].cle = tl_info[i].cle_evt
	vm_t_evt[i].type = tl_info[i].type
	vm_t_evt[i].date_debut = tl_info[i].date
	vm_t_evt[i].localisation = tl_info[i].localisation

	vl_FMC.IdFMC.numero = vm_t_evt[i].numero
    vl_FMC.IdFMC.cle = vm_t_evt[i].cle
    vl_FMC.Numtype = vm_t_evt[i].type
    vl_FMC.localisation.NumAuto = null
    vl_FMC.localisation.PR = null
    vl_FMC.localisation.sens_circulation = null 
    vl_FMC.date =  vm_t_evt[i].date_debut

    vm_t_info[i].info_evt = vl_FMC

    vl_type = ARRAY_INDEX@ (vl_numeros_FMC, vm_t_evt[i].type)
    IF vl_type >= 0
	vm_t_evt[i].type = vl_les_types_FMC[vl_type].abbrev

    IF tl_info[i].datex
	{
		IF tl_info[i].fin <> NULL  AND tl_info[i].debut <> NULL
	    		vm_l_picto[i] = C_PICTO_DATEX_FIN, NULL
		ELSE
	    		vm_l_picto[i] = C_PICTO_DATEX, NULL
	}
    ELSE
    {
    IF tl_info[i].fin <> NULL AND tl_info[i].debut <> NULL
    	vm_l_picto[i] = C_PICTO_FIN_PAR_DEFAUT, NULL
    ELSE IF tl_info[i].debut <> NULL AND tl_info[i].debut <> 0
    	vm_l_picto[i] = C_PICTO_EN_COURS_PAR_DEFAUT, NULL
    ELSE vm_l_picto[i] = C_PICTO_EN_PREV_PAR_DEFAUT, NULL
    }

NEXT i

/*A
 *  Intercaler des lignes separatrices
 *  entre les evenements en cours et les operations en cours et entre
 *  les operations en cours et les fmc prevues
 *  -----------------------------------------------------------------
 */
/* ligne vide de separation apres fmc operation en cours */
i =  ARRAY_INDEX@ (ARRAY_COLUMN@(tl_info,C_COL_DEBUT), NULL)
IF i > 0
{
        tl_info = ARRAY_INSERT@(tl_info,NULL,i)
        vm_t_evt = ARRAY_INSERT@(vm_t_evt,NULL,i)
        vm_t_info = ARRAY_INSERT@(vm_t_info,NULL,i)
        vm_l_picto = ARRAY_INSERT@(vm_l_picto,NULL,i)
}

/* ligne vide de separation apres fmc evenements en cours */
i =  ARRAY_INDEX@ (ARRAY_COLUMN@(tl_info,C_COL_OPERATION), XDC_VRAI)
IF i > 0
     IF tl_info[i].debut <> NULL
	{
		vm_t_evt = ARRAY_INSERT@(vm_t_evt,NULL,i)
		vm_t_info = ARRAY_INSERT@(vm_t_info,NULL,i)
		vm_l_picto = ARRAY_INSERT@(vm_l_picto,NULL,i)
	}
i =  ARRAY_INDEX@ (ARRAY_COLUMN@(tl_info,C_COL_DATEX), XDC_VRAI)
IF i > 0
     IF tl_info[i].debut <> NULL
	{
		vm_t_evt = ARRAY_INSERT@(vm_t_evt,NULL,i)
		vm_t_info = ARRAY_INSERT@(vm_t_info,NULL,i)
		vm_l_picto = ARRAY_INSERT@(vm_l_picto,NULL,i)
	}
/* ligne vide de separation apres fmc operateur */
vm_t_evt = ARRAY_INSERT@(vm_t_evt,NULL,1)
vm_t_info = ARRAY_INSERT@(vm_t_info,NULL,1)
vm_l_picto = ARRAY_INSERT@(vm_l_picto,NULL,1)

/*A si j'ai trouve ma fiche operateur*/
if (vm_t_evt[0].numero=SYSTEM_VAR@(vg_num_fiche_operateur)) AND
			(vm_t_evt[0].cle=SYSTEM_VAR@(vg_cle_fiche_operateur))
{
  vm_l_picto[0]=C_PICTO_EN_COURS_ENRICHIR,NULL
  vm_t_info[0].info_evt.NumType=XZAEC_FMC_PosteOperateur
}

SET_SYSTEM_VAR@(vg_t_evt_pcs,vm_t_evt)
SET_SYSTEM_VAR@(vg_t_info_pcs,vm_t_info)
SET_SYSTEM_VAR@(vg_t_picto_pcs,vm_l_picto)

RETURN (XDC_OK)

ENDMACRO


/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
* acheve une fmc sur le PC simplifie
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO TLT_Achever (va_fenetre,FORMAT  TLT_Evenement va_evt)

/*
* ARGUMENTS EN ENTREE :
*   va_fenetre        : Id. de la fenetre contenant les objets a initialiser.
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : COM_OK en cas d'execution correcte, COM_NOK sinon.
*
* CONDITION D'UTILISATION
*
* FONCTION
*
---------------------------------------------------------------------------- */
VAR     FORMAT SQL_Procedure_Params@ vl_parametres
VAR     FORMAT SQL_Procedure_Result@ vl_resultats
VAR	vl_ret

  vl_ret=COM_OK

  /*je regarde si c'est ma fiche operateur*/
if ( (va_evt.numero=SYSTEM_VAR@(vg_num_fiche_operateur)) and (va_evt.cle=SYSTEM_VAR@(vg_cle_fiche_operateur))) {
  IF (ITMA_TMC_achever_fiche(null,va_evt,FALSE)=COM_OK)
    /*fin de poste*/
    ITMA_TMT_quitter(1)
}
else {
  /*si mode degrade avec le CI*/
  if (SYSTEM_VAR@(vg_comm_CI)<>COM_OK) {
    INFO_MESSAGE@(C_LIB_PERTE_CI)
    return (COM_NOK)
  }

  /*verifie si les actions liees a la fmc sont terminees*/
  if (ITMA_TMC_actions_fiche(va_evt.numero,va_evt.cle)=COM_OK) {
  /*achevement au CI de cette fmc*/
  vl_parametres[0].type = SYB#INT4_
  vl_parametres[0].data = va_evt.numero
  vl_parametres[0].output = FALSE

  vl_parametres[1].type = SYB#INT2_
  vl_parametres[1].data = va_evt.cle
  vl_parametres[1].output = FALSE

  vl_parametres[2].type = SYB#INT2_    
  vl_parametres[2].data = SYSTEM_VAR@(vg_site)
  vl_parametres[2].output = FALSE

  if COM39_SQL_Procedure_PCS (XZAE106_Forcer_Achever_FMC_Sur_District,
				     vl_parametres, vl_resultats, C_MODULE) <> COM_OK
    vl_ret=COM_NOK

  SQL_DISCONNECT@(SYSTEM_VAR@(vg_canal_SGBD_pcs))
  SET_SYSTEM_VAR@(vg_canal_SGBD_pcs,null)
  }
}

  return (vl_ret)
ENDMACRO
