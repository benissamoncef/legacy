/*E*/
/* Fichier : $Id: ITMA_TNA_pilotage_NAV.am,v 1.70 2020/11/23 09:41:31 pc2dpdy Exp $      Release : $Revision: 1.70 $        Date : $Date: 2020/11/23 09:41:31 $
------------------------------------------------------------------------
* GTIE *  PROJET MIGRAZUR
------------------------------------------------------------------------
* SOUS-SYSTEME  GESIHM
------------------------------------------------------------------------
* MODULE MTPM * FICHIER  ITMA_TNA_pilotage_NAV.am
------------------------------------------------------------------------
* DESCRIPTION DU MODULE :
*
* IHM de commande des NAV.
*
*
------------------------------------------------------------------------
* HISTORIQUE :
*
* Cornu 	24 Nov 1994	: Creation						1.1
* Charles	30 Mai 1995	: Remplacement vg_ par vl_			1.39
* Mismer 	04 Aug 1995	: Correction commande fin NAV en Manuel	1.40
* Mismer	27 Sep 1995	: Verif nombre de barrieres (res:292)	1.41
* Volcic	22 Nov 1995	: Suppr Lien FMC & Ajout vg_formation	1.42
* Volcic	18 Dec 1995	: Modif Lien FMC PA					1.43
* Mismer	25 Jan 1996	: Modif pour affichage temps reel au CI	1.44
* Mismer	05 Fev 1996	: Correction pilotage 1er module(flash)	1.45
* Mismer	13 Jun 1996	: Correction  succes/echec pour TMC(DEM/1136) 
													1.46
* Guilhou	17 sep 1996	: modif gestion lien causes pour applix 4.2
													1.47
* Mismer	20 Sep 1996	: Correction  appel aide (RADT_W)		1.48
* Mismer	09 Oct 1996	: Correction  droit pilotage manuel 		
											(RADT_W)	1.49
* Orengo	01 Oct 1996	: Clean Up et Ajout BRA voie lente(DEM/1228) 
													1.50
* Orengo	25 Nov 1996	: Suppression define pour test (DEM/1228)  1.51
* Orengo	09 Dec 1996	: Correction passage des tests (DEM/1228)  1.52
* Mismer	12 Dec 1996	: Ajout formation par synoptique (DEM/1326)1.53
* Guilhou 03 oct 1997 : liste des FMC cause a le m look que celle des FMC a traiter (ana/65) 1.54
* Hilmarcher    25/09/2003      : Modification condition utilisation des BRA sur PODFA 1.57
* Hilmarcher    25/02/2004      : Annulation report telephone repondeur pdt action BRA (DEM 321, 1.58)
* Cluchague     01/12/2004      : PODFA peut piloter les BRA des districts des PC1 (tests bra NG) 1.60
* JMG   13/11/07        : ajout site de gestion DEM715
* JMG   29/09/09                : SECTO DEM 887
* JPL   19/11/09                : Simple gestion de constantes 1.64
* PNI	9/11/10		: Dégriser " Lier FMC " sur clic " commande manuelle " DEM 959 v1.65
* JPL	31/01/11	: Envoi message a la fenetre de pilotage rapide pour associer camera (DEM 949)  1.66
* JMG	05/12/11	: linux
* PNI	19/07/2012	: Prise en cpte du site de gestion dans le pilotage FI 1330 DEM 1043 1.68
* JPL	23/03/17	: Changement du terme Secteur en Region (DEM 1173)  1.69
* LCL	23/11/20	: Ajout cle action pour commande de fin mode PRA 1.70
--------------------------------------------------------------------- */



/*A Description des modules a inclures 
* ------------------------------------ */
INCLUDE	"dbase_.am"

INCLUDE	"XDMICG/inc/xdc_ax.h"
INCLUDE	"XDMICG/inc/xzic_ax.h"

INCLUDE	"GESIHM/inc/ITMA_COM.h"
INCLUDE	"GESIHM/inc/ITMA_TDO.h"
INCLUDE	"GESIHM/inc/ITMA_TAR.h"
INCLUDE	"GESIHM/inc/ITMA_TNA.h"

 /*A Description des procedures sotckees a appeler
* ------------------------------------------------ */
INCLUDE	"GESIHM/inc/xzao162sp.h"
INCLUDE	"GESIHM/inc/xzao163sp.h"
INCLUDE	"GESIHM/inc/xzao164sp.h"
INCLUDE	"GESIHM/inc/xzae72sp.h"
INCLUDE	"GESIHM/inc/xzac41sp.h"
INCLUDE	"GESIHM/inc/xzac62sp.h"
INCLUDE	"GESIHM/inc/xzac03sp.h"
INCLUDE	"GESIHM/inc/xzac02sp.h"
INCLUDE	"GESIHM/inc/xzat06sp.h"
INCLUDE	"GESIHM/inc/xzat01sp.h"
INCLUDE	"GESIHM/inc/xzat06sp.h"
INCLUDE	"GESIHM/inc/xzao05sp.h"
INCLUDE	"GESIHM/inc/xzap13sp.h"


/*A Declaration des variables globales 
* ------------------------------------ */
var	vm_auto	'mode automatique


/*X*/
/* ---------------------------------------------------------------------
* SERVICE RENDU :	Commande le pilotage des NAV
*
*  ---------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TNA_pilotage_NAV(va_appelant,va_1,va_2,va_3,va_4,
											va_5,va_6,va_7)
/*----------------------------------------------------------------------
* ARGUMENTS EN ENTREE :
*
*  va_appelant		: Nom de la macro Applix ayant invoque la presente.
*  va_1 a va_6		: Suivant la procedure d'appel
*
*	Trois appels possibles:
*
*		ITMA_TPA	<Numero plan d'action>	<Numero d'ordre>
*
*			^			^				^
*			|			|				|
*			|		Numero FMC		Numero cle FMC	
*			|
*			|
*		Appel depuis le plan d'action
*
*
*
*		ITMA_TMT
*
*			^
*			|
*		Appel depuis le menu textuel --> Liste des NAVs
*
*
*
*		ISYN_SOP	<Numero de la NAV>
*
*			^
*			|
*		Appel depuis le synoptique Bp de droite
*
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Status OK ou NOK suivant resultat
*
* CONDITION D'UTILISATION
*   Selection de Piloter -> NAV dans MTMT
*
* FONCTION
*    Pilote les NAV
*
--------------------------------------------------------------------- */

/*A Declaration des variables */
/*A ------------------------- */

/*A Variables secondaires ou de travail */
/*A ----------------------------------- */

VAR FORMAT 	TMC_actionFiche	vl_ficheAction

var	vl_appel_connu		' Flag de reconnaisance de l'appel
var	vl_Poste			' Le nom de la machine
var	vl_fenetre_active	' flag de fenetre active
var	vl_controle_sortie	' flag de sortie
var	vl_erreur			' flag d'erreur
var	i,j,vl_mess		' index de loop
var	vl_taille			' taille de tableau
var	vl_message		' message affiche
var	vl_objet			' objet en edition
var	vl_rang			' rang de la selection dans la liste
var	vl_expliquer		' expliquation du PA
var	vl_abt_panneau		' flag d'abonnement des panneaux
var	vl_manuel			' flag de commande manuelle
var	vl_trouve			' flag pour trouver le bon scenario 		d'après le code
var	vl_fmc			' libelle fmc a construire
var	vl_lib_fmc		' tableau du libelle fmc a construire
var	vl_renvoi_appel	' flag de renvoi d'appel
var	vl_repondeur		' flag de renvoi d'appel
var	vl_cpt			' compte-rendu
var	vl_sens			' Sens de la boucle d'envoi des CMD manu
var	vl_debut			' Origine de la boucle d'envoi des CMD  manu
var	vl_fin			' Limite de la boucle d'envoi des CMD manuelles
var	tl_data,tl_retour	' param. table evenements
var	tl_titres			' titre evenements
var	vl_1,vl_2,vl_3,vl_4	' var locales pour l'appel de la camera
var	vl_flag			' flag de condition
var	vl_Appel			' appelant
var	vl_panneau_interdiction_doubler	' Indice du tableau correspondant au panneau interdiction de doubler sur la NAV
var	vl_lecture		' le n° d'evenement lie + cle
var	vl_Nummachine		' n° de la machine
var	vl_NumAction		' Numero d'action
var	vl_mode_formation	' Mode Formation
var	tl_liste_causes
var	vl_text			' text en edition
var	vl_etat_actuel_man	' Etat actuel recherche pour la cmd manuelle
var	vl_message_man		' Message envoye par la commande manuelle
var	vl_autorisation_executer	'Autorisation d'executer la commande "excuter" depuis le CI

/*A Variables principales */
/*A --------------------- */

/*A Numero du district
*/
var	vl_District

/*A Item de la fenetre du module
*/
var 	vl_fenetre_TNA

/*A Messages acceptes dans la boucle principale
*/
var	vl_messages_acceptes

/*A Nom du site en cours
*/
var	vl_NomSite

/*A Numero du scenario en cours
*/
var	vl_NumScenario

/*A Nom du scenario en cours
*/
var	vl_NomScenario

/*A Nom de l'operateur
*/
var	vl_NomOperateur

/*A Mode de retour du plan d'action
*/
var	vl_mode_PA


/*A Liste des BRA et leurs infos associees Table sur indice numero NAV
*/

var	FORMAT Config_BRA vl_info_liste_BRA

/*A Liste des scenarios autorises pour un BRA Table sur indice numero
													NAV
 */
var  FORMAT Config_Scenario vl_liste_scenario_autorises

/*A Liste de nom des NAV disponibles
*/
var	vl_liste_nom_NAV_dispo

/*A Liste des scenarios
*/
var	FORMAT ST_scenario vl_ST_scenario

/*A Tableau contenant la liste des libelles des scenarios presentes dans
				la "liste des scenarios" dans la boite de dialogue
*/ 
var		vl_BL_scenario

/*A Booleen utilise par "Executer" pour savoir si la CMD est une fin
												d'action
*/
var	vl_fin_action

/*A Structure infos NAV plan d'action
*/
var	FORMAT PA_NAV vl_NAV

/*A Tableau d'infos contenant les infos sur la configuration des
	messages et des affichages pour les NAVs Indice du tableau le
							numero de l'equipement dans la NAV */ 
var	FORMAT ST_affichage_et_message vl_ST_aff_msg


/*A liste des objets pour la boite de dialogue consultation
*/
var FORMAT	ST_objet	vl_liste_objet_consultation

/*A liste des objets pour la boite de dialogue pilotage
*/
var	FORMAT	ST_objet	vl_liste_objet_pilotage





/*A MAJ des variables statiques */

vl_District 	= SYSTEM_VAR@(vg_site)
vl_NomSite 	= SYSTEM_VAR@(vg_nom_site)
vl_mode_formation = (SYSTEM_VAR@ (vg_formation) <> NULL)
vl_poste 		= SYSTEM_VAR@(vg_numero_operateur)
vl_abt_panneau	= FALSE
vl_manuel 	= FALSE
vl_NomOperateur = SYSTEM_VAR@(vg_operateur)
vl_Nummachine 	= SYSTEM_VAR@(vg_numero_poste)
vl_NomOperateur = SUBSTRING@(vl_NomOperateur, 1, 25)
vl_mode_PA 	= COM_QUITTE
vl_renvoi_appel = FALSE
vl_repondeur 	= "auto"
/*vl_repondeur 	= "manu"*/
vl_Appel		= SUBSTRING@(va_appelant,1,8)
vm_auto=0

vl_appel_connu=FALSE

/*B trace du debut du traitement */
vl_text = "------------------------------------------------------------------------"
COM01_Trace(0,vl_text)
vl_text = " Start ITMA_TNA_pilotage_NAV   User : " ++ vl_NomOperateur
COM01_Trace(0,vl_text)

vl_text = "va_appelant : " ++ va_appelant
COM01_Trace(0,vl_text)

if NOT(IS_ARRAY@(va_1))
{	vl_text = "va_1 : " ++ va_1
	COM01_Trace(0,vl_text)}
else 
{	vl_text = "va_1  est un tableau"
	COM01_Trace(0,vl_text)
}

if NOT(IS_ARRAY@(va_2))
{	vl_text = "va_2 : " ++ va_2
	COM01_Trace(0,vl_text)
}

if NOT(IS_ARRAY@(va_3))
{	vl_text = "va_3 : " ++ va_3
	COM01_Trace(0,vl_text)
}

if NOT(IS_ARRAY@(va_4))
{	vl_text = "va_4 : " ++ va_4
	COM01_Trace(0,vl_text)
}

if NOT(IS_ARRAY@(va_5))
{	vl_text = "va_5 : " ++ va_5
	COM01_Trace(0,vl_text)
}

if NOT(IS_ARRAY@(va_6))
{	vl_text = "va_6 : " ++ va_6
	COM01_Trace(0,vl_text)
}

if NOT(IS_ARRAY@(va_7))
{	vl_text = "va_7 : " ++ va_7
	COM01_Trace(0,vl_text)
}


/*A Traitements en cas d'erreur durant l'initialisation :
*   informer l'operateur, tracer l'erreur et abandonner
* ------------------------------------------------------*/
ON ERROR 
{
    ERROR_BOX@
    COM01_Trace(COM_WARNING, COM03_Message_Erreur (C_MODULE))
    RETURN(COM_NOK)
}

/*A Pour initialiser les procedures communes */
/*  ---------------------------------------- */

ITMA_TNA_commun_NAV()

ITMA_TNA_Init_Config_BRA(vl_info_liste_BRA,vl_liste_scenario_autorises)

if (SYSTEM_VAR@(vg_formation) = NULL)
	 vl_liste_nom_NAV_dispo = ITMA_TNA_Liste_Eqt_Disponibles(vl_District,
										vl_info_liste_BRA)
else
	vl_liste_nom_NAV_dispo = ITMA_TNA_Liste_Eqt_Disponibles(va_4,
										vl_info_liste_BRA)



/*A Si la liste des NAV dispo est vide */
 
if vl_liste_nom_NAV_dispo[0]=""
{
	/*A Alors */ 
	if (vl_Appel = "ITMA_TMT" or vl_Appel = "ITMA_TPA") 
	{
 		info_message@("Aucun BRA n'est disponible pour cette région !") 
		RETURN(COM_NOK)
	}
}
/*A Finsi */

vl_NAV.Priorite	= 0
vl_NAV.DistanceEvt	= XDC_DISTANCE_INCONNUE


/*A si l'appelant est le menu textuel */
 
if vl_Appel ="ITMA_TMT" 
{

  /*A Ouverture de la liste des NAV */

  vl_fenetre_TNA = DB_LOAD@("ITMA_TNA_liste_NAV") 
  vl_messages_acceptes[0] = COM_CANAL_FIN 
  DB_ACCEPT_POKES@ (vl_fenetre_TNA, vl_messages_acceptes)

  /*A Positionnement de la fenetre   
  *   ---------------------------- */
  DB_XPOS@(vl_fenetre_TNA,1)

if (GET_ENV_VAR@("RTARCH")="hp700_hpux")
  DB_YPOS@(vl_fenetre_TNA,93)
else
  DB_YPOS@(vl_fenetre_TNA,105)

  DB_CTRL_RETURN_ON_CHANGE@(vl_fenetre_TNA,"BL_NAV",True)

  DB_CTRL_STRINGS@(vl_fenetre_TNA,"BL_NAV",vl_liste_nom_NAV_dispo)
  DB_CTRL_VALUE@(vl_fenetre_TNA,"BL_NAV",-1)
  DB_CTRL_DISPLAY@(vl_fenetre_TNA,"BP_piloter",True)
  DB_CTRL_DISPLAY@(vl_fenetre_TNA,"T_piloter",True)

  /*A Boucle de capture des evenements de la boite de dialogue  
  *   -------------------------------------------------------- */
  vl_fenetre_active = TRUE

  /*A tant que la fenetre est active */
  WHILE (vl_fenetre_active)

	/* affichage de la liste */
	DB_DISPLAY@(vl_fenetre_TNA)

	/*A capture de l'evenement dans la BD TCA */
	vl_controle_sortie = DB_EXIT_CTRL@(vl_fenetre_TNA)

	/*A si l'evenement n'est pas un poke & verrou = vrai */
	if vl_controle_sortie<>"poke_" and SYSTEM_VAR@(vg_verrou)
		/*A reset de l'evenement */
		vl_controle_sortie = NULL 

	/* selon l'evenement */
	CASE OF vl_controle_sortie

	/*A sur action quitter */

	CASE "BP_quitter"

		/*A fermer la fenetre */
		RETURN(COM_NOK)

	/*A sur action piloter */

	CASE "BP_piloter"

		/*A fermer la fenetre */
		vl_fenetre_active = FALSE

	/*A sur  liste NAV */

	CASE "BL_NAV"

		/*A Capture du rang dans la liste des NAV */

		vl_rang = DB_CTRL_GET_VALUE@(vl_fenetre_TNA,"BL_NAV")
		for i=0 to ARRAY_SIZE@(vl_info_liste_BRA)

			if vl_info_liste_BRA[i].Identifiant=
								vl_liste_nom_NAV_dispo[vl_rang]
			{
				vl_NAV.NumEqt = i
			}
		next i
		DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_piloter",False)
	
	/*A sur reception de poke */

	CASE "poke_"
	
		/*A suivant le canal de reception de poke */

		CASE OF DB_GET_POKE@(vl_fenetre_TNA)

		/*A si poke de fin de canal */

		CASE COM_CANAL_FIN

			/*A fermer la fenetre */

			RETURN(COM_NOK)

		ENDCASE

	ENDCASE

  /*A fin tant que */
  WEND

  ITMA_TNA_INIT_NAV(vl_ST_aff_msg,vl_BL_scenario,vl_ST_scenario,
			vl_liste_objet_consultation,vl_liste_objet_pilotage,
					vl_info_liste_BRA[vl_NAV.NumEqt].NumType,
								vl_liste_scenario_autorises)


 /*A lecture de l'etat actuel du BRA */
 ITMA_TNA_Lecture_NAV(vl_NAV.NumEqt,vl_NAV)

 ITMA_TNA_init_boite_dialogue_pilotage(vl_fenetre_TNA,
		vl_messages_acceptes,vl_ST_aff_msg,vl_liste_objet_pilotage)

 ITMA_TNA_deselectionne_objet_PA(vl_fenetre_TNA,vl_expliquer,
							vl_lecture,vl_info_liste_BRA,vl_NAV)
	vl_appel_connu=TRUE
}

/*A Si l'appelant est le synoptique BP de droite */

if vl_Appel = "ISYN_SOP"
{
	if NOT(IS_ARRAY@(va_1))
	{
		vl_NAV.NumEqt = va_1+0
	}
	else
	{
		vl_NAV.NumEqt = va_1[0] +0
	}
	if (vl_info_liste_BRA[vl_NAV.NumEqt].Disponible=FALSE)
		AND (SYSTEM_VAR@(vg_poste)<>XDC_PODFA)
	{
		info_message@("Le BRA demande n'est pas disponible")
		RETURN(COM_NOK)
	} 
     if NOT vl_mode_formation  and
     NOT(COM04_Operateur_A_Le_Droit_De(XDC_FAM_EXPLOITATION_DISTRICT)) and  
	  NOT(COM04_Operateur_A_Le_Droit_De(XDC_FAM_PC_SIMPLIFIE)) and
     NOT(COM04_Operateur_A_Le_Droit_De(XDC_FAM_EXPLOITATION_PC2)) and
       NOT(COM04_Operateur_A_Le_Droit_De(XDC_FAM_EXPLOITATION_CI) and
	    (SYSTEM_VAR@(vg_site) = XDC_CI)) and (SYSTEM_VAR@(vg_poste)<>XDC_PODFA)
	{               
		vl_text=" Appel pilotage NAV depuis syno par un utilisateur non autorisé"
		COM01_Trace(0,vl_text)
		RETURN(COM_OK)
	}

	ITMA_TNA_INIT_NAV(vl_ST_aff_msg,vl_BL_scenario,vl_ST_scenario,
			vl_liste_objet_consultation,vl_liste_objet_pilotage,
					vl_info_liste_BRA[vl_NAV.NumEqt].NumType,
								vl_liste_scenario_autorises)

	/* Au CI si appel depuis depuis le synoptique prendre le district du BRA  */
	if vl_District = XDC_CI 
	{ 
		if NOT ITMA_COM_District_pilotable(vl_info_liste_BRA[vl_NAV.NumEqt].sitegestion, 
				XDC_LIB_NAV,TRUE,vl_info_liste_BRA[vl_NAV.NumEqt].Identifiant) and (SYSTEM_VAR@(vg_poste)<>XDC_PODFA) 
		{ 
			vl_text = " Appel pilotage PMV depuis syno pour un BRA pilotable en région " ++ vl_info_liste_BRA[vl_NAV.NumEqt].NomSite
			COM01_Trace(0,vl_text)
				RETURN(COM_OK)
 		}
	}
	else
	{ 
		if (vl_District <> vl_info_liste_BRA[vl_NAV.NumEqt].NumSite)
		{ 
			vl_text=
			" Appel pilotage BRA depuis syno pour un BRA hors région"

			COM01_Trace(0,vl_text)
			RETURN(COM_OK)
 		}
	}

	/*A lecture de l'etat actuel du BRA */
	ITMA_TNA_Lecture_NAV(vl_NAV.NumEqt,vl_NAV)

	ITMA_TNA_init_boite_dialogue_pilotage(vl_fenetre_TNA,
		vl_messages_acceptes,vl_ST_aff_msg,vl_liste_objet_pilotage)

	ITMA_TNA_deselectionne_objet_PA(vl_fenetre_TNA,vl_expliquer,
							vl_lecture,vl_info_liste_BRA,vl_NAV)
	vl_appel_connu=TRUE
}

/*A si l'appelant est le PA */

if vl_Appel="ITMA_TPA" 
{
	/*A lecture de la proposition du PA */
	vm_auto=0
	vm_auto=va_5
	vl_erreur = ITMA_TNA_Lire_Prop_NAV(va_1,va_2,vl_NAV) 


	ITMA_TNA_INIT_NAV(vl_ST_aff_msg,vl_BL_scenario,vl_ST_scenario,
			vl_liste_objet_consultation,vl_liste_objet_pilotage,
					vl_info_liste_BRA[vl_NAV.NumEqt].NumType,
								vl_liste_scenario_autorises)

	if vl_info_liste_BRA[vl_NAV.NumEqt].Disponible=FALSE
	{
		info_message@("Le BRA demande n'est pas disponible")
	}
	
	/*A Memorisation de l'explication */
	vl_expliquer = vl_NAV.Explication 

	ITMA_TNA_init_boite_dialogue_pilotage(vl_fenetre_TNA,
		vl_messages_acceptes,vl_ST_aff_msg,vl_liste_objet_pilotage)

	/*A Activation des boutons lies au PA */

     if vl_mode_formation or
       COM04_Operateur_A_Le_Droit_De(XDC_FAM_EXPLOITATION_DISTRICT)
	{
		DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_executer",False)
	}
	DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_expliquer",False)
	DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_refuser",False)


	/*A recherche du code de scenario */
	if UPPERCASE@(vl_NAV.Scenario) = "XXXX"
	{
		vl_NAV.Scenario = "LEVR"
	}
	vl_trouve = -1
	for i = 0 to ARRAY_SIZE@(vl_ST_scenario)-1
  		vl_text = "Scenar :" ++ vl_ST_scenario[i].quadrigramme++
									" propo:"++vl_NAV.Scenario
		COM01_Trace(0,vl_text)
		if vl_ST_scenario[i].quadrigramme=
								UPPERCASE@(vl_NAV.Scenario)
		{
			vl_trouve = i
			vl_NomScenario = vl_NAV.Scenario
			vl_NumScenario = i
		}
	next i

	/*A si scenario trouve */
	if vl_trouve <> -1
	{
		/*A MAJ du libelle status */
		DB_CTRL_TITLE@(vl_fenetre_TNA,
				"LI_status","PA : " ++ vl_BL_scenario[vl_trouve])

		/*A MAJ des boutons de commande */
		for i = 0 to DIM_MAX_ST_affichage_et_message

			ITMA_TNA_pos_picto(i,vl_ST_aff_msg[i].
						etat_equipement_scenario[vl_trouve],
								vl_fenetre_TNA,vl_ST_aff_msg)

		next i

		/*A MAJ de la zone remarque */
		if TRIM@(vl_NAV.Remarque)<>""
		{
			vl_lecture = ""
			vl_lecture[0] = vl_NAV.Remarque
			DB_EDITBOX_CLEAR@(vl_fenetre_TNA,"BE_remarque")
			DB_EDITBOX_SET_DATA@(vl_fenetre_TNA,"BE_remarque"
											,vl_lecture)
		}

		/*A MAJ du libelle fmc nouveau */
		ITMA_COM_Lire_Evenement ( va_3, va_4, vl_lib_fmc, C_MODULE) 
		vl_fmc = COM11_Libelle_FMC(vl_lib_fmc)
		vl_Nav.NumEvt = va_3 + 0
		vl_Nav.CleEvt = va_4 + 0
		DB_CTRL_TITLE@(vl_fenetre_TNA,"LI_fmc_nouveau",vl_fmc)

	}
	else
	{
		info_message@("Le scenario "++vl_NAV.Scenario++
							" propose par le PA n'existe pas")
	}	
	vl_appel_connu=TRUE
}

/* Autoriser la commande executer */

if NOT vl_mode_formation and (vl_district=XDC_CI and
   NOT (ITMA_COM_District_pilotable(
			vl_info_liste_BRA[vl_NAV.NumEqt].sitegestion, 
			XDC_LIB_NAV,FALSE)) )
{
	vl_autorisation_executer=True
}
else
{
	vl_autorisation_executer=False
}



/* Si l'appel est connu ( ici ITMA_TMT ou ITMA_TPA ou ITMA_SOP ) */

if(vl_appel_connu=FALSE)
{
	/* Alors */
	/* Retourner une erreur */

	info_message@("L'appel '"++vl_Appel++
			"' n'est pas reconnu pas la boite de dialogue "++ 
									"Pilotage d'un BRA")
	RETURN(COM_NOK)
}
/* Finsi */
/*A MAJ du titre de la fenetre */
DB_CTRL_TITLE@(vl_fenetre_TNA,"LI_nom",
					vl_info_liste_BRA[vl_NAV.NumEqt].Identifiant)
DB_CTRL_STRINGS@(vl_fenetre_TNA,"BL_scenario",vl_BL_scenario)

/* si constante vrai : Renvoi d'appel sur repondeur */
/* caro: Inhibition de cette fonction pour DEM 321        */
/*if (vl_repondeur="auto")
{	vl_erreur= ITMA_TNA_Renvoi_Appel(vl_NomSite,NUM_REPONDEUR,
											vl_Nummachine)
	vl_renvoi_appel = True 
}
*/
/*A Abonnement a l'etat des panneaux */ 

vl_erreur = ITMA_TNA_Abt_Etat_Panneaux_NAV(XDC_DEBUT_ABONNEMENT_EQUEXT,
					COM51_NomSite(vl_info_liste_BRA[vl_NAV.NumEqt].sitegestion))

if (vl_erreur <> COM_NOK)
{
	vl_abt_panneau = TRUE
}

/*A test les droits d'acces a la fonction manuelle*/
if ( vl_mode_formation  or
	COM04_Operateur_A_Le_Droit_De ( XDC_FAM_PILOTAGE_MANUEL_NAV ) = TRUE) or (COM04_Operateur_A_Le_Droit_De ( XDC_FAM_PC_SIMPLIFIE )= TRUE) or
	(COM04_Operateur_A_Le_Droit_De ( XDC_FAM_EXPLOITATION_PC2 )= TRUE) or
	(COM04_Operateur_A_Le_Droit_De ( XDC_FAM_EXPLOITATION_CI )= TRUE)
{	
	DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_manuel",TRUE)
	DB_CTRL_DISPLAY@(vl_fenetre_TNA,"BP_manuel",TRUE)
	DB_CTRL_DISPLAY@(vl_fenetre_TNA,"BP_cmd_doubler",FALSE)
	DB_CTRL_DISPLAY@(vl_fenetre_TNA,"panneau",FALSE)
}
else
{
	DB_CTRL_DISPLAY@(vl_fenetre_TNA,"BP_manuel",FALSE)
	DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_cmd_doubler",TRUE)
	DB_CTRL_DISPLAY@(vl_fenetre_TNA,"BP_cmd_doubler",TRUE)
	DB_CTRL_DISPLAY@(vl_fenetre_TNA,"panneau",TRUE)
}


DB_CTRL_DISPLAY@(vl_fenetre_TNA,"BP_arret",False)
DB_CTRL_VALUE@(vl_fenetre_TNA,"BL_scenario",-1)


/*A Boucle de capture des evenements de la boite de dialogue  
*   -------------------------------------------------------- */
vl_fenetre_active = TRUE

/* Si pilotage automatique alors on execute le scenario */
if (vm_auto=1)
{
		/*A Recherche du champ fin d'action */

		vl_fin_action=FALSE
		for i=0 to ARRAY_SIZE@(vl_ST_scenario)

			if vl_NomScenario=vl_ST_scenario[i].quadrigramme
			{
				vl_fin_action=vl_ST_scenario[i].fin_action
			}
		next i

		


			/*A si le scenario est une fin d'action */

			if vl_fin_action=TRUE
			{
				/* recuperation du n° d'action dans la base */
			
				vl_cpt=ITMA_TNA_Commande_fin_NAV(vl_NAV.NumEqt,
						vl_info_liste_BRA[vl_NAV.NumEqt].sitegestion,vl_manuel,
							vl_NomOperateur,vl_mode_formation,
								vl_NomScenario,vl_NumAction)
			}
			/*A sinon cmd NAV classique */
			else
			{
				/* recuperation du n° d'action dans la base */			
				vl_NumAction = 0 		
				vl_cpt=ITMA_TNA_Commande_NAV(vl_poste, 
							vl_manuel,vl_NomScenario,
							vl_mode_formation,vl_Nav.NumEvt,
								vl_Nav.CleEvt,vl_NAV.NumEqt,
								vl_NAV,vl_NumAction,vl_info_liste_BRA[vl_NAV.NumEqt].sitegestion)
			}
		
			/*A si mode manuel */
			if vl_manuel = TRUE
			{
				vl_mode_PA = COM_REFUSE
				info_message@("Pilotage manuel non exécuté")
			}

	   

	vl_fenetre_active=FALSE
}

/*A tant que la fenetre est active */
WHILE (vl_fenetre_active)

	/* affichage de la liste */
	DB_DISPLAY@(vl_fenetre_TNA)

	/*A capture de l'evenement dans la BD TNA */
	vl_controle_sortie = DB_EXIT_CTRL@(vl_fenetre_TNA)

	/*A si l'evenement n'est pas un poke & verrou = vrai */
	if vl_controle_sortie<>"poke_" and SYSTEM_VAR@(vg_verrou)
		/*A reset de l'evenement */
		vl_controle_sortie = NULL
 
	if substring@(vl_controle_sortie,1,len@(OBJET_ETAT_ACTUEL))=
											OBJET_ETAT_ACTUEL
	{
		vl_erreur=ITMA_TNA_modif_picto(vl_controle_sortie,
								vl_fenetre_TNA,vl_ST_aff_msg)
		vl_mode_PA = COM_REFUSE
	}

	/* selon l'evenement */
	CASE OF vl_controle_sortie

	/*A sur action quitter */

	CASE "BP_quitter"

		vl_fenetre_active = FALSE

	/*A sur action refuser */

	CASE "BP_refuser"

		vl_mode_PA = COM_REFUSE
		vl_fenetre_active = FALSE


	/*A sur action lier FMC */
	CASE "BP_lier_FMC"
 		DB_CTRL_TITLE@(vl_fenetre_TNA,"LI_status",
									"Status : appel lien FMC")


		/*B on lance la tache de recherche d'evt cause*/
		tl_data=PEND_FOR_NEW_TASK@("ITMA_COM_Liste_Causes",
									"ITMA_TNA_pilotage_NAV")
		tl_liste_causes=tl_data[0]
		/*B affiche la liste des evts a traiter*/
		DB_CTRL_DISPLAY@(vl_fenetre_TNA,"TA_Evenements",TRUE)
		DB_CTRL_RETURN_ON_CHANGE@(vl_fenetre_TNA,"TA_Evenements",TRUE)
		DB_TABLE_SET_MARKER_WIDTH@(vl_fenetre_TNA, "TA_Evenements", 25)
		DB_TABLE_ALLOW_COLUMN_RESIZING@(
							vl_fenetre_TNA,"TA_Evenements",True)
		tl_titres[0] = COM_CAUSE_NUMERO,COM_CAUSE_LONG_NUMERO
		tl_titres[1] = COM_CAUSE_CLE,COM_CAUSE_LONG_CLE
		tl_titres[2] = COM_CAUSE_TYPE,COM_CAUSE_LONG_TYPE
		tl_titres[3] = COM_CAUSE_DATE,COM_CAUSE_LONG_DATE
		tl_titres[4] = COM_CAUSE_LOCALISATION,
								COM_CAUSE_LONG_LOCALISATION
		DB_TABLE_SET_DATA@(vl_fenetre_TNA,"TA_Evenements",
										tl_data[1],tl_titres)
		DB_TABLE_MARKER_PIXMAPS@(vl_fenetre_TNA, "TA_Evenements", 0, tl_data[2])


	/*B selection d'un element dans la liste des fiches a traiter*/	
  	CASE "TA_Evenements"
 		DB_CTRL_TITLE@(vl_fenetre_TNA,"LI_status",
								"Status : selection evenement")

		tl_retour=ITMA_COM_Validite_Cause("ITMA_TNA_pilotage_NAV",
								vl_fenetre_TNA,tl_liste_causes)
		vl_Nav.NumEvt = tl_retour[0][0]
		vl_Nav.CleEvt = tl_retour[0][1]
		vl_fmc = tl_retour[1]
		DB_CTRL_DISPLAY@(vl_fenetre_TNA,"TA_Evenements",FALSE)
		DB_CTRL_TITLE@(vl_fenetre_TNA,"LI_fmc_nouveau",vl_fmc)
		vl_NAV.fmc_liee = vl_fmc

	/*A sur action executer OK*/
	CASE "BP_ok"


		DB_CTRL_DISPLAY@(vl_fenetre_TNA,"BP_arret",False)
		DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_ok",True)
		DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_nok",True)
		DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_quitter",False)
		DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_cmd_doubler",False)
		DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_manuel",False)
		DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_executer",
								vl_autorisation_executer)
		DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_lier_FMC",False)
		DB_CTRL_TITLE@(vl_fenetre_TNA,"LI_status",
							"Status : Bonne execution confirmee")
		ITMA_TNA_Fin_Cmd_Manu_NAV(vl_NumAction,XDC_VRAI,
							vl_NomScenario,vl_NomOperateur,vl_info_liste_BRA[vl_NAV.NumEqt].sitegestion)


	/*A sur action executer NOK*/
	CASE "BP_nok"

		DB_CTRL_DISPLAY@(vl_fenetre_TNA,"BP_arret",False)
		DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_ok",True)
		DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_nok",True)
		DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_quitter",False)
		DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_cmd_doubler",False)
		DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_manuel",False)
		DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_executer",
								vl_autorisation_executer)
		DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_lier_FMC",False)
		DB_CTRL_TITLE@(vl_fenetre_TNA,"LI_status",
						"Status : Mauvaise execution confirmee")
		ITMA_TNA_Fin_Cmd_Manu_NAV(vl_NumAction,XDC_FAUX,
							vl_NomScenario,vl_NomOperateur)


	/*A sur action executer */
	CASE "BP_executer"

		/*A Recherche du champ fin d'action */

		vl_fin_action=FALSE
		for i=0 to ARRAY_SIZE@(vl_ST_scenario)

			if vl_NomScenario=vl_ST_scenario[i].quadrigramme
			{
				vl_fin_action=vl_ST_scenario[i].fin_action
			}
		next i

		if NOT vl_fin_action and vl_Nav.NumEvt=0 and vl_Nav.CleEvt=0
		{
			info_message@(
				"Veuillez d'abord lier cette action a une F.M.C")
		}
		else
		{
			/*A Griser le bouton Executer */

			DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_executer",TRUE)
			DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_lier_FMC",TRUE)
			DB_CTRL_TITLE@(vl_fenetre_TNA,"LI_fmc_actuel",vl_fmc)
			DB_CTRL_TITLE@(vl_fenetre_TNA,"LI_fmc_nouveau","")
			DB_CTRL_DISPLAY@(vl_fenetre_TNA,"BP_arret",True)

			/*A si le scenario est une fin d'action */

			if vl_fin_action=TRUE
			{
				/* recuperation du n° d'action dans la base */
			
				vl_cpt=ITMA_TNA_Commande_fin_NAV(vl_NAV.NumEqt,
						vl_info_liste_BRA[vl_NAV.NumEqt].sitegestion,vl_manuel,
							vl_NomOperateur,vl_mode_formation,
								vl_NomScenario,vl_NumAction)
			}
			/*A sinon cmd NAV classique */
			else
			{
				/* recuperation du n° d'action dans la base */			
				vl_NumAction = 0 		
				vl_cpt=ITMA_TNA_Commande_NAV(vl_poste, 
							vl_manuel,vl_NomScenario,
							vl_mode_formation,vl_Nav.NumEvt,
								vl_Nav.CleEvt,vl_NAV.NumEqt,
								vl_NAV,vl_NumAction,vl_info_liste_BRA[vl_NAV.NumEqt].sitegestion)
			}
		
			/*A si mode manuel */
			if vl_manuel = TRUE
			{
				/*A si retour OK de la base */
				if vl_cpt=COM_OK
				{
					/* envoi de l'etat des modules */			
					vl_Sens = 1 
					vl_debut = 0
					vl_fin = ARRAY_SIZE@(vl_ST_aff_msg)

					/*A Boucle pour savoir si il y a une barrierre
												a ouvrir */
 
					for i = 0 to ARRAY_SIZE@(vl_ST_aff_msg)

						/*A Si une barriere */

						if vl_ST_aff_msg[i].equipement_barriere=
													TRUE  
						{
							/*A Alors */
							/*A Si la barriere est a rentrer */

							if vl_ST_aff_msg[i].
									etat_actuel_equipement= 
												CHAMP_ETEINT 
							{
								/*A Alors */
								/*A Boucle dans de sens
											decroissant */
 
								vl_Sens = -1 
								vl_debut = ARRAY_SIZE@(
											vl_ST_aff_msg)
								vl_fin = 0
							}
							/*A Finsi */

							/*A Alors */
							/*A Si la barriere est a sortir */

							if vl_ST_aff_msg[i].
								etat_actuel_equipement= 
											CHAMP_ALLUME_1 
							{ 
								/*A Alors */
								/*A Boucle dans de sens
												croissant */
								vl_Sens = 1 
								vl_debut = 0
								vl_fin = ARRAY_SIZE@(
											vl_ST_aff_msg)

								/*A Sortie en catastrophe */

								i = ARRAY_SIZE@(vl_ST_aff_msg)+2
							}
							/*A Finsi */
						}
						/* Finsi */

					next i
					for i = vl_debut to vl_fin step vl_sens

						vl_etat_actuel_man=vl_ST_aff_msg[i].
							etat_actuel_equipement

						if(vl_ST_aff_msg[i].
						   equipement_present=TRUE and 
							vl_etat_actuel_man<>CHAMP_NEUTRE)

						{
							vl_message_man=vl_ST_aff_msg[i].
							message_equipement[
										vl_etat_actuel_man]
							vl_erreur=
							ITMA_TNA_Commande_module_NAV(
							vl_NAV.NumEqt,i,vl_message_man,0, 
								vl_NumAction,
								vl_info_liste_BRA[vl_NAV.NumEqt]
									.nom_machine_LT,
									vl_NomOperateur,
										vl_mode_formation)
					
							if vl_erreur=COM_OK
							{
								vl_NAV.Scenario = vl_NomScenario
							}
						}
					next i

					/* si plan d'action */			
					if vl_Appel="ITMA_TPA" 
					{
						vl_mode_PA=COM_REFUSE 
			  			DB_CTRL_TITLE@(vl_fenetre_TNA,"LI_status",
					"Status : Refus du PA, Confirmer l'execution")
					}
					else
					{
						DB_CTRL_TITLE@(vl_fenetre_TNA,"LI_status",
							"Status : Confirmer l'execution")
			
					}
					DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_ok",False)
					DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_nok",False)
					DB_CTRL_GRAYED@(vl_fenetre_TNA,
										"BP_valider",True)
					DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_reset",True)
					DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_quitter",
													True)
					DB_CTRL_GRAYED@(vl_fenetre_TNA,
										"BP_cmd_doubler",True)
					DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_manuel",
													True)
					DB_CTRL_VALUE@(vl_fenetre_TNA,"BL_scenario",-1)
			}
			else
			{	DB_CTRL_TITLE@(vl_fenetre_TNA,"LI_status",
								"Status : Commande refusée")
			}

		}
		else
		{
			if vl_cpt = COM_OK
			{
		    		DB_CTRL_TITLE@(vl_fenetre_TNA,"LI_status",
								"Status : Commande envoyee")
				if vl_Appel="ITMA_TPA"				
				{
					vl_mode_PA=COM_VALIDE
		    			DB_CTRL_TITLE@(vl_fenetre_TNA,"LI_status",
								"Status : Validation du PA")	
				}
				else
				{
					vl_mode_PA=COM_QUITTE
					if vl_erreur <> COM_NOK
					{
						DB_CTRL_TITLE@(vl_fenetre_TNA,"LI_status",
								"Status : Pilotage BRA !!!")
					}
					else
					{
						DB_CTRL_TITLE@(vl_fenetre_TNA,"LI_status",
							"Status : Problème Pilotage BRA !!!")
					}
				}
			}
			else
			{	
				DB_CTRL_TITLE@(vl_fenetre_TNA,"LI_status",
					"Status : Commande refusee (manque lien FMC)") 
			}
		 }
	   	 vl_Nav.NumEvt = 0
		 vl_Nav.CleEvt = 0
	   }


	/*A sur action BP_expliquer */
	CASE "BP_expliquer"

		/* appel de MTEX avec passage en argument de l'explication */
		vl_erreur = Pend_For_NEW_TASK@("ITMA_TEX_Explication_Propo",
							"ITMA_TNA_pilotage_NAV",vl_expliquer)


	/*A sur action camera */
	CASE "BP_camera"

		DB_CTRL_TITLE@(vl_fenetre_TNA,"LI_status",
				"Status : Appel de la boite de commande camera")
	
		if vl_info_liste_BRA[vl_NAV.NumEqt].Disponible=TRUE
		{

			vl_1 = vl_info_liste_BRA[vl_NAV.NumEqt].Autoroute
			vl_2 = vl_info_liste_BRA[vl_NAV.NumEqt].PR
			vl_3 = vl_info_liste_BRA[vl_NAV.NumEqt].PR
			vl_4 = vl_info_liste_BRA[vl_NAV.NumEqt].Sens

			/*A trace de l'appel */

			vl_text = " Appel pilotage camera ("
			vl_text = vl_text++vl_1++","++vl_2++","
								++vl_3++","++vl_4++")"
			COM01_Trace(0,vl_text)
			DB_SEND_POKE@(COM_CANAL_MTCA_RAPIDE,
					{ "ITMA_TNA_pilotage_NAV",vl_1,vl_2,vl_3,vl_4 })
		}



	/*A sur action 'valider' un scenario */
	CASE "BP_valider"
				
		/*A Set du flag */

		vl_manuel = FALSE

		/*A Degriser du bouton commande panneau doubler */

		DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_cmd_doubler",FALSE)

		/*A Degriser du bouton manuel */

		DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_manuel",FALSE)

		for i=0 to ARRAY_SIZE@(vl_ST_aff_msg)-1

			if(vl_ST_aff_msg[i].equipement_present=TRUE)
			{
				/*A griser les boutons de pilotage de barrieres
											et panneaux */
				DB_CTRL_GRAYED@(vl_fenetre_TNA,
					vl_ST_aff_msg[i].nom_objet_etat_actuel,True)
			}
		next i

		/*A Griser les boutons du PA */

		DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_refuser",TRUE)
		DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_expliquer",TRUE)
		DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_valider",TRUE)

		DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_executer",
								vl_autorisation_executer)
		DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_reset",FALSE)
		DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_lier_FMC",FALSE)

		/*A si proposition PA : mode refus 
		if vl_Appel="ITMA_TPA"
		{
			vl_mode_PA = COM_REFUSE
		}
		else
		{
			vl_mode_PA = COM_QUITTE
		} */

		/*A capture du rang dans la liste et reset de la selection */

		vl_rang = DB_CTRL_GET_VALUE@(vl_fenetre_TNA,"BL_scenario")
		DB_CTRL_VALUE@(vl_fenetre_TNA,"BL_scenario",-1)

		/*A MAJ du libelle status */

		DB_CTRL_TITLE@(vl_fenetre_TNA,"LI_status",
									vl_BL_scenario[vl_rang])

		/*A MAJ des variables */

		vl_NumScenario = vl_rang
		vl_NomScenario = vl_ST_scenario[vl_rang].quadrigramme
		
		vl_text="NumSc = "++vl_NumScenario++"NomSc = "++vl_NomScenario
		COM01_Trace(0,vl_text) 

		/*A MAJ des boutons de commande */

		for i = 0 to DIM_MAX_ST_affichage_et_message
			ITMA_TNA_pos_picto(i,vl_ST_aff_msg[i]
					.etat_equipement_scenario[vl_NumScenario],
								vl_fenetre_TNA,vl_ST_aff_msg)
		next i


	/*A sur action Manuel */
	CASE "BP_manuel"

		/*A Set du flag */
		vl_manuel = TRUE
		DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_cmd_doubler",FALSE)
		DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_lier_FMC",FALSE)

		for i=0 to ARRAY_SIZE@(vl_ST_aff_msg)-1

			if(vl_ST_aff_msg[i].equipement_present=TRUE)
			{
				/*A degriser les boutons de pilotage de barrieres
											et panneaux */
				DB_CTRL_GRAYED@(vl_fenetre_TNA,
					vl_ST_aff_msg[i].nom_objet_etat_actuel,False)
			}
		next i
		DB_CTRL_TITLE@(vl_fenetre_TNA,"LI_status",
						"Status : Commande manuelle active !")
	

	/*A sur action 'BP_cmd_doubler' */

	CASE "BP_cmd_doubler"

		/*A Activer le bouton Executer */

		DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_executer",
								vl_autorisation_executer)

		/*A MAJ du status */

		DB_CTRL_TITLE@(vl_fenetre_TNA,"LI_status",
		"Status : Modification du panneau 'interdiction de doubler'")

		/*A Recuperation de l'indice du panneau interdiction de
											 doubler */
		for i=0 to DIM_MAX_ST_affichage_et_message

			if(vl_ST_aff_msg[i].nom_objet_etat_actuel=OBJET_IDPL)
			{
				vl_panneau_interdiction_doubler=i
			}

		next i

		/*A Si l'etat est eteint */

		if vl_ST_aff_msg[vl_panneau_interdiction_doubler]
							.etat_actuel_equipement=CHAMP_ETEINT

		{
			/* Alors */
			/* Le panneau passe a l'etat allume */

		 	vl_objet=vl_ST_aff_msg[vl_panneau_interdiction_doubler]
								.nom_fichier_pix[CHAMP_ALLUME_1]

			vl_ST_aff_msg[vl_panneau_interdiction_doubler]
						.etat_actuel_equipement=CHAMP_ALLUME_1
		}

		else
		{
			/*A Sinon */
			/*A Le panneau passe a l'etat eteint */

			vl_objet=vl_ST_aff_msg[vl_panneau_interdiction_doubler]
								.nom_fichier_pix[CHAMP_ETEINT]

			vl_ST_aff_msg[vl_panneau_interdiction_doubler]
							.etat_actuel_equipement=CHAMP_ETEINT
		}
		/*A Finsi */

		/*A MAJ de l'objet */
		DB_CTRL_TITLE@(vl_fenetre_TNA,OBJET_IDPL,vl_objet)

		/*A Set du flag */
		vl_manuel = TRUE


	/*A sur action arrêt d'urgence */

	CASE "BP_arret"

		DB_CTRL_DISPLAY@(vl_fenetre_TNA,"BP_arret",FALSE)
		DB_CTRL_DISPLAY@(vl_fenetre_TNA,"BP_arret_ok",TRUE)
		DB_CTRL_DISPLAY@(vl_fenetre_TNA,"BP_arret_non",TRUE)
		DB_CTRL_DISPLAY@(vl_fenetre_TNA,"LI_confirmation",TRUE)


	/*A sur action sur BP non confirmation arret d'urgence */
 
	CASE "BP_arret_non"

		DB_CTRL_DISPLAY@(vl_fenetre_TNA,"BP_arret",True)
		DB_CTRL_DISPLAY@(vl_fenetre_TNA,"BP_arret_ok",False)
		DB_CTRL_DISPLAY@(vl_fenetre_TNA,"BP_arret_non",False)
		DB_CtRL_DISPLAY@(vl_fenetre_TNA,"LI_confirmation",False)


	/*A sur action sur BP confirmation arret d'urgence */

	CASE "BP_arret_ok"

		/*A Sonnerie & MAJ du status */
		BEEP@()
		DB_CTRL_TITLE@(vl_fenetre_TNA,"LI_status",
				"Status : Arrêt d'urgence declenche sur le BRA !!!")
		BEEP@()
		
		/*A Appel de la procedure d'arrêt d'urgence */
		ITMA_TNA_Arret_Nav(vl_NAV.NumEqt,vl_NumAction,
				vl_info_liste_BRA[vl_NAV.NumEqt].nom_machine_LT,
							vl_NomOperateur,vl_mode_formation)
		BEEP@()

		DB_CTRL_DISPLAY@(vl_fenetre_TNA,"BP_arret",True)
		DB_CTRL_DISPLAY@(vl_fenetre_TNA,"BP_arret_ok",False)
		DB_CTRL_DISPLAY@(vl_fenetre_TNA,"BP_arret_non",False)
		DB_CTRL_DISPLAY@(vl_fenetre_TNA,"LI_confirmation",False)


	/*A sur action liste scenario */
	CASE "BL_scenario"

		vl_rang = DB_CTRL_GET_VALUE@(vl_fenetre_TNA,"BL_scenario")

		DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_reset",False)
		DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_valider",False)


	/*A sur action Reset affichage */
	CASE "BP_reset"

		/*A MAJ du status */
		DB_CTRL_TITLE@(vl_fenetre_TNA,"LI_status",
					"Status : Reset du scenario BRA a commander")

		/*A Reset de la position sur l'IHM */
		/*A Passage des equipements au neutre */

		for i = 0 to DIM_MAX_ST_affichage_et_message

			if vl_ST_aff_msg[i].equipement_present=TRUE
			{				
				DB_CTRL_TITLE@(vl_fenetre_TNA,
					vl_ST_aff_msg[i].nom_objet_etat_actuel,
					vl_ST_aff_msg[i].nom_fichier_pix[CHAMP_NEUTRE])

				vl_ST_aff_msg[i].etat_actuel_equipement=CHAMP_NEUTRE
			}
		next i

		vl_NumScenario = 0 ;
		DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_valider",True)
		DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_executer",True)
		DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_reset",True)
		DB_CTRL_GRAYED@(vl_fenetre_TNA,"BP_cmd_doubler",FALSE)


	/*A sur reception de poke */		
	CASE "poke_"
	
		/*A suivant le canal de reception de poke */
		CASE OF DB_GET_POKE@(vl_fenetre_TNA)

		/*A si poke de fin de canal : fermeture de fenetre */
		CASE COM_CANAL_FIN
			/*A la fenetre n'est plus active */
			vl_fenetre_active = FALSE

		/*A si poke de fin de canal : fermeture de fenetre */
		CASE COM_CANAL_MTNA

			/*A capture du message */
			vl_message = DB_GET_POKE_DATA@(vl_fenetre_TNA)

			/*A trace de la reception du message */
			vl_text = "   MsgPoke MTNA : " ++ vl_message[0]
			COM01_Trace(0,vl_text)
			COM01_Trace(0," ")

			/*A decomposition des messages en tableau */
			vl_mess = ARRAY_FROM_STRING@(vl_message[0],",")

			/*A si numero de NAV en cours d'edition */
			if vl_mess[0]+0 =  vl_NAV.NumEqt+0
			{				
				/*A on boucle sur toutes les infos du message */
				for i = 1 to ARRAY_SIZE@(vl_mess)-1 step 2
				
					ITMA_TNA_MAJ_NAV(vl_mess[i],vl_mess[i+1],
								vl_fenetre_TNA,vl_ST_aff_msg)

				next i
			}
		ENDCASE

	ENDCASE

/*A fin tant que */
WEND




/* si  Renvoi d'appel sur repondeur : Annul renvoi */

if (vl_Renvoi_Appel)
{ 
	ITMA_TNA_Annul_Renvoi(vl_NomSite,vl_Nummachine)
}

/*B Fermerture des abonnements */
if (vl_abt_panneau)
{
	ITMA_TNA_Abt_Etat_Panneaux_NAV(XDC_FERMER_ABONNEMENT_EQUEXT,
					vl_info_liste_BRA[vl_NAV.NumEqt].sitegestion)
}

/*B trace de la fin de traitement */
vl_text = " Stop ITMA_TNA_pilotage_NAV   User : " ++ vl_NomOperateur
COM01_Trace(0,vl_text)

RETURN(vl_mode_PA)

ENDMACRO


/*X*/
/* ---------------------------------------------------------------------
* SERVICE RENDU :	Initialisation generale de la boite de dialogue
*												Pilotage
*
*  ---------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TNA_init_boite_dialogue_pilotage(va_fenetre_TNA,
								va_messages_acceptes,
				FORMAT ST_affichage_et_message va_ST_aff_msg,
						FORMAT	ST_objet	va_liste_objet)

/*----------------------------------------------------------------------
* ARGUMENTS EN ENTREE :
*
*  	va_fenetre_TNA			:	Item de la boite de dialogue
*												Pilotage
*	va_messages_acceptes	:	Liste des messages acceptes par la
*											boite de dialogue
*	va_ST_aff_msg			:	Structure contenant les donnees
*							d'affichage et de messages vers
*							les equipements
*	va_liste_objet			:	Liste des objets pilotage 
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*  	va_fenetre_TNA			:	Item de la boite de dialogue
*												Pilotage
*
* CODE RETOUR         :
*
* CONDITION D'UTILISATION
*
*
* FONCTION
*    Initialisation generale de la boite de dialogue Pilotage
*
--------------------------------------------------------------------- */

var i


/*A Ouverture de la fiche de pilotage NAV */

va_fenetre_TNA = DB_LOAD@("ITMA_TNA_pilotage_NAV")

va_messages_acceptes[0] = COM_CANAL_FIN
va_messages_acceptes[1] = COM_CANAL_MTNA
DB_ACCEPT_POKES@ (va_fenetre_TNA, va_messages_acceptes)

DB_CTRL_WORK_COLORS@(va_fenetre_TNA,"BE_remarque",TRUE)
DB_CTRL_GRAYED@(va_fenetre_TNA,"BP_lier_FMC",False)

/*A Positionnement de la fenetre & assignation de la fiche d'aide  
*   ------------------------------------------------------------- */
DB_HEIGHT@(va_fenetre_TNA,880)
DB_XPOS@(va_fenetre_TNA,0)
IF (GET_ENV_VAR@("RTARCH")="hp700_hpux")
DB_YPOS@(va_fenetre_TNA, 1000)
else
DB_YPOS@(va_fenetre_TNA, 105)
DB_WIDTH@(va_fenetre_TNA,960)

ITMA_TNA_creation_dans_boite_objet_NAV(va_fenetre_TNA,va_liste_objet)

DB_CTRL_RETURN_ON_CHANGE@(va_fenetre_TNA,"BL_scenario",TRUE)

/*A Griser le bouton 'Executer' */
DB_CTRL_GRAYED@(va_fenetre_TNA,"BP_executer",True)

/* si on n'est pas en automatique alors on affiche la fenetre */
if (vm_auto=0)
{
	DB_DISPLAY_ONLY@(va_fenetre_TNA,TRUE)
	DB_DISPLAY@(va_fenetre_TNA)
	DB_DISPLAY_ONLY@(va_fenetre_TNA,FALSE)
}

ENDMACRO


/*X*/
/* ---------------------------------------------------------------------
* SERVICE RENDU :	Deselection les objets lies au PA
*
*  ---------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TNA_deselectionne_objet_PA(va_fenetre_TNA,va_expliquer,
				va_lecture,FORMAT Config_BRA va_info_liste_BRA,
										FORMAT PA_NAV va_NAV)


/*----------------------------------------------------------------------
* ARGUMENTS EN ENTREE :
*
*  	va_fenetre_TNA			:	Item de la boite de dialogue
*												Pilotage
*	va_expliquer			:	Explication sur le plan d'action
*	va_lecture			:
*	va_info_liste_BRA		:	Liste d'info sur les BRA
*	va_NAV				:	Structure de donnees sur le BRA
*									en cours en traitement
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         :
*
* CONDITION D'UTILISATION
*
*
* FONCTION
*    	Deselection les objets lies au PA
*
--------------------------------------------------------------------- */

/*A Griser les boutons lies au PA */

va_expliquer = "L'appelant n'est pas le System Expert"
DB_CTRL_GRAYED@(va_fenetre_TNA,"BP_refuser",True)
DB_CTRL_GRAYED@(va_fenetre_TNA,"BP_expliquer",True)
va_lecture = ""
va_lecture[0] = ""
DB_EDITBOX_SET_DATA@(va_fenetre_TNA,"BE_remarque",va_lecture)

/*A MAJ du titre de la fenetre */
DB_CTRL_TITLE@(va_fenetre_TNA,"LI_nom",
					va_info_liste_BRA[va_NAV.NumEqt].Identifiant)
DB_CTRL_TITLE@(va_fenetre_TNA,"LI_fmc_actuel",va_NAV.fmc_liee)

ENDMACRO
