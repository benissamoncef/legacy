/*E*/
/* Fichier : $Id: ITMA_TUR_Util_Ressources.am,v 1.3 1996/08/02 11:36:17 verdier Exp $     Release : $Revision: 1.3 $       Date : $Date: 1996/08/02 11:36:17 $
---------------------------------------------------------------------------
* STERIA *  PROJET MIGRAZUR
-------------------------------------------------------------------------------
* SOUS-SYSTEME  GESIHM
-------------------------------------------------------------------------------
* MODULE MTUR * FICHIER ITMA_TUR_Utilisations_Ressources.am
-------------------------------------------------------------------------------
* DESCRIPTION DU MODULE :
* Affiche l'utilisation des ressources PMV ou NAV
*
*
-------------------------------------------------------------------------------
* HISTORIQUE :
*
* Guilhou	28 dec 1994	: Creation						V1.1
* Guilhou 12 Sep 1995	: formattage donnees				V1.2 
* Guilhou 02 Aou 1996	: NAv -> BRA				V1.3 
--------------------------------------------------------------------------- */

INCLUDE	"dbase_.am"
INCLUDE	"../../XDMICG/inc/xzas22sp.h"
INCLUDE	"../../XDMICG/inc/xdc_ax.h"
INCLUDE	"../inc/ITMA_COM.h"
INCLUDE	"../inc/ITMA_TDO.h"
INCLUDE	"../../XDMICG/inc/xzic_ax.h"

DEFINE	C_MODULE	"MTUR"			' Nom du module


/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
* Afficher la liste des actions 
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TUR_Util_Ressources (va_appelant,va_type)

/*
* ARGUMENTS EN ENTREE :
* va_type: XDC_EQT_PMV ou XDC_EQT_NAV
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : 
*
* CONDITION D'UTILISATION
*   
*
* FONCTION
*
---------------------------------------------------------------------------- */

	VAR vl_fenetre
	VAR vl_exit_value
	VAR tl_messages_acceptes
	VAR vl_installer_traitement_erreur
	VAR tl_data,vl_taille
	VAR tl_table_data,vl_code,tl_heading,tl_pixmaps
  	VAR FORMAT SQL_Procedure_Params@ vl_parametres
    	VAR FORMAT SQL_Procedure_Result@ vl_resultats
	VAR vl_indice

/*A
 * Traitements en cas d'erreur durant l'initialisation :
 * informer l'operateur, tracer l'erreur et abandonner
 * -----------------------------------------------------
 */

ON ERROR {
    ERROR_BOX@
    COM01_Trace (COM_WARNING, COM03_Message_Erreur (C_MODULE))
    RETURN
}

/*A
 * Charger la fenetre "Liste des avertissements"
 * ----------------------------------
 */

vl_fenetre = DB_LOAD@ ("ITMA_TUR")

DB_XPOS@ (vl_fenetre, 0)
DB_YPOS@ (vl_fenetre, 93)
DB_WIDTH@ (vl_fenetre, 1264)

IF (va_type=XDC_EQT_PMV)
	DB_TITLE@ (vl_fenetre, "Utilisation des ressources PMV")
ELSE
	DB_TITLE@ (vl_fenetre, "Utilisation des ressources BRA")

COM02_Attacher_Aide (vl_fenetre, "ITMA_TUR_Utilisation_Ressources")


/*A
 * Mettre en place la reception des messages
 * -----------------------------------------
 */

tl_messages_acceptes[0] = COM_CANAL_FIN
DB_ACCEPT_POKES@ (vl_fenetre, tl_messages_acceptes)

DB_DISPLAY_ONLY@(vl_fenetre,TRUE)
DB_DISPLAY@(vl_fenetre)

tl_heading[0]="Evénement",200
tl_heading[1]="Nb utilisations",100
tl_heading[2]="Durée moyenne",100
tl_heading[3]="Durée totale",100
tl_heading[4]="Proportion",100
DB_TABLE_SET_MARKER_WIDTH@(vl_fenetre,"TA_util",25)
DB_TABLE_SET_DATA@(vl_fenetre,"TA_util",null,tl_heading,null)

MACRO_WINS_BUSY@()

/*A
 * recuperer l'utilisation des ressources pour mon equipement
 */
vl_parametres[0].type = SYB#INT4_
vl_parametres[0].data = va_type
vl_parametres[0].output = FALSE
IF COM05_SQL_Procedure (XZAS22_Utilisation_Ressources,vl_parametres, vl_resultats, C_MODULE) <> COM_OK
{
    INFO_MESSAGE@("Erreur lors de la lecture en base de l'utilisation des ressources")
	RETURN (COM_NOK)		
}

/*A
 * afficher les libelles des actions dans la boite avec une icone si realisable
 */
tl_data=vl_resultats.select_results[0]

/* formattage des resultats*/
FOR vl_indice=0 TO (ARRAY_SIZE@(tl_data)-1)
	/*duree moyenne et totale en heure minutes*/
	tl_data[vl_indice][2]=INT@(tl_data[vl_indice][2]/60)++" h "
					++(tl_data[vl_indice][2] MOD 60)++" mn"
	tl_data[vl_indice][3]=INT@(tl_data[vl_indice][3]/60)++" h "
					++(tl_data[vl_indice][3] MOD 60)++" mn"
	
	/*proportion arrondie sur 2 decimales*/
	tl_data[vl_indice][4]=INT@(tl_data[vl_indice][4]*100+0.5)/100
	IF (tl_data[vl_indice][4]<10)
		tl_data[vl_indice][4]="0"++tl_data[vl_indice][4]	
NEXT vl_indice

DB_TABLE_SET_DATA@(vl_fenetre,"TA_util",tl_data,tl_heading,null)
DB_CTRL_RETURN_ON_CHANGE@(vl_fenetre,"TA_util",TRUE)
DB_DISPLAY_ONLY@(vl_fenetre,FALSE)



/*A
 * Traitements en cas d'erreur durant la visualisation :
 * informer l'operateur et selon la nature et la gravite
 * de l'erreur la tracer ou non, continuer ou abandonner
 * -----------------------------------------------------
 */

vl_installer_traitement_erreur = TRUE
WHILE vl_installer_traitement_erreur
    vl_installer_traitement_erreur = FALSE

    ON ERROR {
	ERROR_BOX@
	COM01_Trace (COM_WARNING, COM03_Message_Erreur (C_MODULE))
	vl_installer_traitement_erreur = TRUE
    }
WEND

/*A
* boucle infinie de traitement des evenements*/
WHILE 1
	/*A
	* afficher la fenetre*/
	DB_DISPLAY@(vl_fenetre)

	/*A
	* attente d'un evenement*/
	vl_exit_value=DB_EXIT_CTRL@(vl_fenetre)

	/*A
	* suivant l'evenement */
	CASE OF vl_exit_value
		/*A bouton fermer*/
		CASE "BP_fermer"
			RETURN

		/*A reception d'un poke*/
		CASE "poke_"
			vl_code= DB_GET_POKE@(vl_fenetre)
			CASE OF vl_code
				/*A
				* poke de fin*/
				CASE COM_CANAL_FIN
					RETURN				
			ENDCASE

	ENDCASE
			
WEND
ENDMACRO



