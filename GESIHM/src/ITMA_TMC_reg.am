/*E*/
/* Fichier : $Id: ITMA_TMC_reg.am,v 1.4 2020/11/16 13:32:32 pc2dpdy Exp $     			  Release :$Revision: 1.4 $ 	   Date : $Date: 2020/11/16 13:32:32 $
------------------------------------------------------------------------------------
*  GTIE  *  PROJET MIGRAZUR
------------------------------------------------------------------------------------
*  SOUS-SYSTEM GESIHM
------------------------------------------------------------------------------------
*  MODULE MTMC  *  Fichier ITMA_TMC_reg.am
------------------------------------------------------------------------------------
*  DESCRIPTION DU MODULE :
*
*   Gere les donnees specifiques aux types meteo,
*   chaussee glissante et traitement chaussees
*   et les champs correspondants dans la fenetre de saisie FMC
*
------------------------------------------------------------------------------------
*  HISTORIQUE :
*
*  JMG	09/04/12 : creation DEM/1016
* JMG   09/03/17        : REGIONALISATION - DEM1220 1.2
* LCL   22/04/20        : MOVIS Ajout site local pilotage DEM-SAE93
* LCL	16/11/20	: MOVIS correction appel XZAE565 DEM-SAE93 1.4
------------------------------------------------------------------------------------
*/

/*A D�claration des fichiers � inclure */
INCLUDE	"dbase_.am"

INCLUDE	"../../XDMICG/inc/xdc_ax.h"
INCLUDE	"../../XDMICG/inc/xzic_ax.h"
INCLUDE	"../../XDMICG/inc/xzaec_ax.h"
INCLUDE	"../inc/xzao557sp.h"
INCLUDE	"../inc/xzao558sp.h"
INCLUDE	"../inc/xzae565sp.h"
INCLUDE	"../inc/xzae564sp.h"
INCLUDE	"../inc/xzae567sp.h"

INCLUDE	"../inc/ITMA_COM.h"
INCLUDE	"../inc/ITMA_TDO.h"
INCLUDE	"../inc/ITMA_TAR.h"
INCLUDE	"../inc/ITMA_TMC.h"
INCLUDE	"../inc/ITMA_TRG.h"

/*A D�finition des constantes */

DEFINE	C_MODULE		"MTMC"		' Nom du module

VAR FORMAT T_zone  tm_zones


VAR FORMAT T_scenario tm_scenarios
VAR     FORMAT TDO_Libelle_Predefini    tm_contexte, tm_contexte_valid
VAR     FORMAT TDO_Libelle_Predefini    tm_mesure, tm_mesure_valid

/*X*/
/* ---------------------------------------------------------------------------------
* SERVICE RENDU :
*
*  Affiche / masque dans la fenetre FMC les champs specifiques au type d'�v�nement
*
------------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TMC_reg (va_fenetre, va_type_fmc, va_visible)

/*
* ARGUMENTS EN ENTREE :
*  va_fenetre         : id de la boite de dialogue ou afficher les champs
*  va_type_fmc        : type de la fmc
*  va_visible         : indicateur de visibilite demandee
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Indefini
*
* CONDITION D'UTILISATION
*   MTMT
*
* FONCTION
--------------------------------------------------------------------------------- */
VAR tl_controles
VAR vl_indice
VAR vl_fenetre
VAr FORMAT SQL_Procedure_Params@ vl_parametres
VAR FORMAT SQL_Procedure_Result@ vl_resultats
VAR vl_droits


/*A Traitements en cas d'erreur :
 *   informer l'operateur, tracer l'erreur et abandonner
 * -----------------------------------------------------
 */
/*ON ERROR
{
	ERROR_BOX@
	COM01_Trace (COM_WARNING, COM03_Message_Erreur (C_MODULE))
	RETURN
}*/

vl_fenetre = va_fenetre

IF (va_visible) {
	ITMA_TMC_reg_init (vl_fenetre, va_type_fmc)
}


/*A rendre visibles ou masquer les champs associes au type fmc */

/* Modif SAGA : la visibilite depend du droit de propriete */
vl_droits = SYSTEM_VAR@ (vg_datex_propriete)


tl_controles = {
	"BO_zone",
	"BO_scenario",
	"BO_scenario_new",
	"LI_transitoire",
	"LI_transitoire_titre",
	"LI_contexte",
	"LI_contexte_titre",
	"LI_mesure",
	"LI_mesure_titre"
}
FOR vl_indice = 0 TO ARRAY_SIZE@ (tl_controles) - 1
	DB_CTRL_DISPLAY@ (vl_fenetre, tl_controles[vl_indice], va_visible)
	DB_CTRL_GRAYED@ (vl_fenetre, tl_controles[vl_indice],
	                    va_visible AND (vl_droits = XDC_FAUX))
NEXT vl_indice

tm_zones = SYSTEM_VAR@(vg_zones)
DB_CTRL_STRINGS@(vl_fenetre,"BO_zone",ARRAY_COLUMN@(tm_zones,1))
DB_CTRL_GRAYED@(vl_fenetre, "BO_scenario", true)
DB_CTRL_VALUE@(vl_fenetre, "BO_scenario", -1)
'DB_CTRL_VALUE@(vl_fenetre, "BO_scenario_new", -1)
DB_CTRL_RETURN_ON_CHANGE@(vl_fenetre,"BO_zone",true)
db_ctrl_title@(vl_fenetre,"LI_num_contexte",-1)
db_ctrl_title@(vl_fenetre,"LI_num_mesure",-1)


COM37_Lit_Libelles_Predefinis (XDC_LIB_TYPE_CONTEXTE_REGUL, tm_contexte, 
					tm_contexte_valid)

COM37_Lit_Libelles_Predefinis (XDC_LIB_TYPE_MESURE_REGUL, tm_mesure, 
					tm_mesure_valid)


RETURN (vl_fenetre)
ENDMACRO





/*X*/
/* ---------------------------------------------------------------------------------
* SERVICE RENDU :
*
*  Initialiser certaines donn�es et champs specifiques aux FMC du type specifie
*
------------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TMC_reg_init (va_fenetre, va_type_fmc)

VAR	type_libelle

/*B Initialisations a effectuer a chaque ouverture de la fenetre FMC au moins */

/*B Initialisations a effectuer a chaque affichage des champs (retypage FMC) */

ENDMACRO





/*X*/
/* ---------------------------------------------------------------------------------
* SERVICE RENDU :
*
*  Lit en base les donn�es specifiques aux fiches de classe regulation
*  et les visualise dans la zone specifique de la fenetre FMC
*
------------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TMC_reg_charge (va_fenetre,FORMAT COM_Identifiant_FMC ta_num_evt,
					va_horodate)

/*
* ARGUMENTS EN ENTREE :
* ta_num_evt            : numero et cle d'evenement
* va_fenetre            : id de la boite de dialogue fiche main courante
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Indefini
*
* CONDITION D'UTILISATION
*   MTMT
*
* FONCTION
*
--------------------------------------------------------------------------------- */

VAR	FORMAT SQL_Procedure_Params@	vl_parametres
VAR	FORMAT SQL_Procedure_Result@	vl_resultats
VAR	vl_indice
VAR	FORMAT TMC_regul	vl_tampon
VAR	vl_fenetre
VAR	tl_retour, i

vAR tl_zones



/*A Traitements en cas d'erreur :
 *   informer l'operateur, tracer l'erreur et abandonner
 * -----------------------------------------------------
 */

ON ERROR
{
	ERROR_BOX@
	COM01_Trace (COM_WARNING, COM03_Message_Erreur (C_MODULE))
	RETURN
}

	vl_fenetre=va_fenetre

	vl_indice=0

	vl_parametres[vl_indice].type=SYB#DATETIME_
	vl_parametres[vl_indice].data=va_horodate
	vl_parametres[vl_indice].output=false
	vl_indice=vl_indice+1

	vl_parametres[vl_indice].data=ta_num_evt.numero
	vl_parametres[vl_indice].type=SYB#INT4_
	vl_parametres[vl_indice].output=false
	vl_indice=vl_indice+1

	vl_parametres[vl_indice].data=ta_num_evt.cle
	vl_parametres[vl_indice].type=SYB#INT4_
	vl_parametres[vl_indice].output=false
	vl_indice=vl_indice+1

/*B Site local */
        vl_parametres[vl_indice].type = SYB#CHAR_
        vl_parametres[vl_indice].data = SYSTEM_VAR@(vg_nom_site)
        vl_parametres[vl_indice].output = FALSE
        vl_indice = vl_indice +1

	IF COM05_SQL_Procedure (XZAE565_Lire_Fiche_Regulation,
				  vl_parametres, vl_resultats, C_MODULE) <> COM_OK
	{
		INFO_MESSAGE@ ("Erreur lors de la lecture en base des donneees specifiques de l'evenement")
		tl_retour[0]=va_fenetre
		tl_retour[1]=null
		RETURN (tl_retour)
	}


	tl_retour=vl_resultats.select_results[0][0]
	vl_tampon.contexte = tl_retour[0]
	vl_tampon.scenario_courant  = tl_retour[1]
	vl_tampon.scenario_cible  = tl_retour[2]
	vl_tampon.mesure = tl_retour[3]
	vl_tampon.indicateur_horaire = tl_retour[4]
	vl_tampon.transitoire = tl_retour[5]
	vl_tampon.zone = tl_retour[6]

	tl_zones=SYSTEM_VAR@(vg_zones)
	/*ne plus modifier la zone de regulation*/
	DB_CTRL_GRAYED@(vl_fenetre,"BO_zone",true)
	i=ARRAY_INDEX@(ARRAY_COLUMN@(tl_zones,0),vl_tampon.zone)
	if (i<0) {
		INFO_MESSAGE@ ("Erreur lors de la lecture en base des donn�es sp�cifiques de l'�v�nement")
		tl_retour[0]=va_fenetre
		tl_retour[1]=null
		RETURN (tl_retour)

	}

	DB_CTRL_VALUE@(vl_fenetre,"BO_zone",i)

	TMC_reg_get_scenarios(vl_fenetre,i)

	i = ARRAY_INDEX@(ARRAY_COLUMN@(tm_scenarios, 0), 
			vl_tampon.scenario_courant)
	DB_CTRL_VALUE@(vl_fenetre,"BO_scenario",i)
	i = ARRAY_INDEX@(ARRAY_COLUMN@(tm_scenarios, 0), 
			vl_tampon.scenario_cible)
	DB_CTRL_VALUE@(vl_fenetre,"BO_scenario_new",i)
	DB_CTRL_TITLE@(vl_fenetre,"LI_transitoire",vl_tampon.transitoire)


	/*mesure ?*/
	vl_indice=ARRAY_INDEX@(ARRAY_COLUMN@(tm_mesure, TDO_CODE_LIBELLe),
			 vl_tampon.mesure)
	if (vl_indice>-1)
		DB_CTRL_TITLE@(vl_fenetre, "LI_mesure", 
				tm_mesure[vl_indice][TDO_TEXTE_LIBELLE])
	db_ctrl_title@(vl_fenetre, "LI_num_mesure",vl_tampon.mesure)

	/*contexte ?*/	
	vl_indice=ARRAY_INDEX@(ARRAY_COLUMN@(tm_contexte, TDO_CODE_LIBELLe),
			 vl_tampon.contexte)
	if (vl_indice>-1)
		DB_CTRL_TITLE@(vl_fenetre, "LI_contexte", 
				tm_contexte[vl_indice][TDO_TEXTE_LIBELLE])
	db_ctrl_title@(vl_fenetre, "LI_num_contexte",vl_tampon.contexte)

	/*indicateur horaire */

	tl_retour[0]=vl_fenetre
	tl_retour[1]=vl_tampon
	RETURN (tl_retour)

ENDMACRO





/*X*/
/* ---------------------------------------------------------------------------------
* SERVICE RENDU :
*
*  Ecrit en base les donn�es sp�cifiques d'une fiche de classe regulation
*
------------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TMC_reg_sauve (FORMAT COM_Identifiant_FMC ta_num_evt,
                             FORMAT TMC_regul va_tampon,
                             va_mode, va_horodate, va_fenetre,
                             va_autoroute, va_pr, va_sens)

/*
* ARGUMENTS EN ENTREE :
* ta_num_evt		: numero et cle d'evenement
* va_tampon		: valeurs des controles
* va_mode		: prevision, traiter, clos
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Indefini
*
* CONDITION D'UTILISATION
*   MTMT
*
* FONCTION
--------------------------------------------------------------------------------- */

VAR	FORMAT SQL_Procedure_Params@	vl_parametres
VAR	FORMAT SQL_Procedure_Result@	vl_resultats
VAR	vl_indice
VAR	vl_prtete
VAR	vl_sitePr
VAR	i
VAR	vl_date_fin
VAR	vl_indicateur_fin
VAr tl_zones, vl_site

var	tl_cmd, tl_args

/*A Traitements en cas d'erreur :
 *   informer l'operateur, tracer l'erreur et abandonner
 * -----------------------------------------------------
 */

ON ERROR
{
	ERROR_BOX@
	IF ERROR_NUMBER@() <> COM_ERR_VAL_INVAL
		COM01_Trace (COM_WARNING, COM03_Message_Erreur (C_MODULE))
	RETURN (COM_NOK)
}

	vl_indice=0
	vl_parametres[vl_indice].data=ta_num_evt.numero
	vl_parametres[vl_indice].type=SYB#INT4_
	vl_parametres[vl_indice].output=FALSE
	vl_indice=vl_indice+1

	vl_parametres[vl_indice].data=ta_num_evt.cle
	vl_parametres[vl_indice].type=SYB#INT4_
	vl_parametres[vl_indice].output=FALSE
	vl_indice=vl_indice+1

	vl_parametres[vl_indice].type=SYB#INT4_
	vl_parametres[vl_indice].output=FALSE
	vl_parametres[vl_indice].data=va_tampon.scenario_courant
	vl_indice=vl_indice+1

	vl_parametres[vl_indice].type=SYB#INT4_
	vl_parametres[vl_indice].output=FALSE
	vl_parametres[vl_indice].data=va_tampon.contexte
	vl_indice=vl_indice+1

	vl_parametres[vl_indice].type=SYB#INT4_
	vl_parametres[vl_indice].output=FALSE
	vl_parametres[vl_indice].data=va_tampon.indicateur_horaire
	vl_indice=vl_indice+1

	vl_parametres[vl_indice].type=SYB#INT4_
	vl_parametres[vl_indice].output=FALSE
	vl_parametres[vl_indice].data=va_tampon.mesure
	vl_indice=vl_indice+1

	vl_parametres[vl_indice].type=SYB#CHAR_
	vl_parametres[vl_indice].output=FALSE
	vl_parametres[vl_indice].data=va_tampon.transitoire
	vl_indice=vl_indice+1

	vl_parametres[vl_indice].type=SYB#INT4_
	vl_parametres[vl_indice].output=FALSE
	vl_parametres[vl_indice].data=va_tampon.zone
	vl_indice=vl_indice+1

	IF (SYSTEM_VAR@(vg_surcharge)=TRUE) {
		vl_parametres[vl_indice].data=SYSTEM_VAR@(vg_numero_poste_surcharge)
	} ELSE {
		vl_parametres[vl_indice].data=SYSTEM_VAR@(vg_numero_poste)
	}
	vl_parametres[vl_indice].type=SYB#INT4_
	vl_parametres[vl_indice].output=FALSE
	vl_indice=vl_indice+1

	vl_parametres[vl_indice].data=va_horodate
	vl_parametres[vl_indice].type=SYB#DATETIME_
	vl_parametres[vl_indice].output=FALSE
	vl_indice=vl_indice+1

	vl_parametres[vl_indice].type=SYB#INT4_
	vl_parametres[vl_indice].output=FALSE
	vl_parametres[vl_indice].data=-va_tampon.scenario_cible
	vl_indice=vl_indice+1

/*B Site local */
        vl_parametres[vl_indice].type = SYB#CHAR_
        vl_parametres[vl_indice].data = SYSTEM_VAR@(vg_nom_site)
        vl_parametres[vl_indice].output = FALSE
        vl_indice = vl_indice +1

	IF COM05_SQL_Procedure (XZAE564_Ecrire_Fiche_Regulation,
			   vl_parametres, vl_resultats, C_MODULE) <> COM_OK
	{
		INFO_MESSAGE@ ("Erreur lors de l'�criture en base des donn�es Regulation")
		RETURN (COM_NOK)
	}
	ELSE IF (vl_resultats.status <> XZAEC_FMC_PAS_ENR) AND
		(vl_resultats.status <> XZAEC_FMC_CLOSE_PAS_ENR) AND
		(vl_resultats.status <> COM_OK) {
		INFO_MESSAGE@ ("Erreur lors de l'�criture en base des donn�es Regulation")
		RETURN (vl_resultats.status)
	}


	vl_date_fin=COM23_Horodate(va_fenetre,
                                        "BS_jour_fin_reelle",
                                        "BS_mois_fin_reelle",
                                        "BS_annee_fin_reelle",
                                        "BS_heure_fin_reelle",
                                        "BS_minute_fin_reelle",
                                        "BS_seconde_fin_reelle")
	if vl_date_fin = NULL
		vl_indicateur_fin=0
	else
		vl_indicateur_fin=1

	tl_zones=SYSTEM_VAR@(vg_zones)
	i = DB_CTRL_GET_VALUE@(va_fenetre, "BO_zone")

CASE OF tl_zones[i][9]
        CASE XDC_CI
                vl_site = XDC_NOM_SITE_CI

        CASE XDC_DN
                vl_site = XDC_NOM_SITE_DN

        CASE XDC_VC
                vl_site = XDC_NOM_SITE_VC

        CASE XDC_VE
                vl_site = XDC_NOM_SITE_VE

        CASE XDC_DP
                vl_site = XDC_NOM_SITE_DP

        CASE XDC_DA
                vl_site = XDC_NOM_SITE_DA

        CASE XDC_VD
                vl_site = XDC_NOM_SITE_VD

        CASE XDC_HIS
                vl_site = XDC_NOM_SITE_HIS
ENDCASE

	/*envoyer la commande de forcage eventuel a tereg*/
	tl_args[0]=ta_num_evt.numero
	tl_args[1]=ta_num_evt.cle
	tl_args[2]=tl_zones[i][0]
	tl_args[3]=va_tampon.scenario_cible
	tl_args[4]=vl_indicateur_fin
	tl_args[5]=vl_site /*nom site*/
	tl_cmd = MTAR_MSG_EXEC, 1, MTAR_FCT_XZEG01,
                        ARRAY_TO_STRING@ (tl_args, MTAR_CAR_SEPAR)
        DB_SEND_POKE@ (COM_CANAL_TAR01, tl_cmd)

	RETURN (vl_resultats.status)
ENDMACRO




/*X*/
/* ---------------------------------------------------------------------------------
* SERVICE RENDU :
*
*  Affiche les donnees specifiques d'une fiche regulation
*
------------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TMC_reg_affiche (va_fenetre, FORMAT TMC_regul va_regul)

/*
* ARGUMENTS EN ENTREE :
*  va_fenetre         : ID de la fenetre FMC
*  va_meteo           : Donn�es de la fiche regulation
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Indefini
*
* CONDITION D'UTILISATION
*   ITMA_TMC sur ouverture fiche regulation
*
* FONCTION
*  Value les champs de saisie sp�cifiques aux FMC de classe regulation
*
--------------------------------------------------------------------------------- */

ENDMACRO




/*X*/
/* ---------------------------------------------------------------------------------
* SERVICE RENDU :
*
*  Lit les donnees specifiques d'une fiche regulation saisies dans la fenetre
*
------------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TMC_reg_saisie (va_fenetre, FORMAT TMC_regul va_regul)

/*
* ARGUMENTS EN ENTREE :
*  va_fenetre         : ID de la fenetre FMC
*
*
* ARGUMENTS EN SORTIE :
*  va_meteo           : Donnees de la fiche regulation
*
*
* CODE RETOUR         : XDC_NOK si une valeur saisie est incorrecte, XDC_OK sinon.
*
* CONDITION D'UTILISATION
*   ITMA_TMC sur validation fiche regulation
*
* FONCTION
*  Remplit la fiche avec les donnees des champs de saisie specifiques.
*
--------------------------------------------------------------------------------- */
var vl_indice
	
	vl_indice = DB_CTRL_GET_VALUE@(va_fenetre,"BO_scenario_new")
	if (vl_indice>-1)
		va_regul.scenario_cible = tm_scenarios[vl_indice].numero
	else
		va_regul.scenario_cible = -1

	vl_indice = DB_CTRL_GET_VALUE@(va_fenetre,"BO_scenario")
	if (vl_indice>-1)
		va_regul.scenario_courant = tm_scenarios[vl_indice].numero
	else
		va_regul.scenario_courant = -1


	vl_indice = DB_CTRL_GET_VALUE@(va_fenetre,"BO_zone")
	if (vl_indice>-1)
		va_regul.zone = tm_zones[vl_indice].numero
	else
		va_regul.zone = -1

	va_regul.mesure = DB_CTRL_GET_TITLE@(va_fenetre, "LI_num_mesure")
	va_regul.contexte = DB_CTRL_GET_TITLE@(va_fenetre, "LI_num_contexte")
	RETURN (XDC_OK)
ENDMACRO




/*X*/
/* ---------------------------------------------------------------------------------
* SERVICE RENDU :
*
*  Effectue les controles de validite des donnees specifiques d'une fiche regulation
*
------------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TMC_reg_controle (FORMAT TMC_fmc va_fiche, FORMAT TMC_regul va_regul)

/*
* ARGUMENTS EN ENTREE :
*  va_fiche           : Donnees generiques de la Fmc ;
*  va_meteo           : Donnees specifiques a la Fmc regulation
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : XDC_NOK si les donnees sont incorrectes, XDC_OK sinon.
*
* CONDITION D'UTILISATION
*   ITMA_TMC sur validation fiche regulation
*
* FONCTION
*
--------------------------------------------------------------------------------- */
    VAR FORMAT SQL_Procedure_Params@ vl_parametres
    VAR FORMAT SQL_Procedure_Result@ vl_resultats
	var vl_num,vl_cle

	/*scenario et zone obligaroires*/
	if  (va_regul.zone=-1)
		RETURN (XDC_NOK)

	/*on verifie pas d'autre FMC regulation en cours sur cette zone*/
vl_parametres[0].type = SYB#INT4_
vl_parametres[0].data = va_regul.zone
vl_parametres[0].output = FALSE

vl_parametres[1].type = SYB#INT4_

vl_parametres[2].type = SYB#INT4_
vl_parametres[2].output = FALSE


IF COM05_SQL_Procedure (XZAE567_FMC_regul_Sur_Zone,
			   vl_parametres, vl_resultats, C_MODULE) <> COM_OK
    RETURN (COM_NOK)

vl_num= vl_resultats.select_results[0][0][0]
if (vl_num>0 and vl_num<>va_fiche.numero and va_fiche.numero <> null)  or
   (vl_num>0 and va_fiche.numero =  null )
{
	INFO_MESSAGE@("Impossible de creer 2 FMC Regulation sur la meme zone")
	return (XDC_NOK)
}

if (va_regul.scenario_courant <> -1) {
	if (va_regul.scenario_cible  <> va_regul.scenario_courant) {
		if (PEND_FOR_NEW_TASK@("ITMA_TCF_Demande_Confirmation",
			"Confirmez-vous le forcage du scenario cible ?") <> XDC_OK)
				return (XDC_NOK)
	}
}

	RETURN (XDC_OK)
ENDMACRO


/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
*  Initialise la liste des scenarios de la zone
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO TMC_reg_get_scenarios(va_fenetre, va_zone)

/*
* ARGUMENTS EN ENTREE :
*   va_fenetre        : Id. de la fenetre contenant les objets a initialiser.
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : COM_OK en cas d'execution correcte, COM_NOK sinon.
*
* CONDITION D'UTILISATION
*   ITMA_TRG_param_scenarios ;
*
* FONCTION
*   initialise les valeurs de la liste des libelles predefinis.
*
---------------------------------------------------------------------------- */
VAR FORMAT SQL_Procedure_Params@ vl_parametres
VAR FORMAT SQL_Procedure_Result@ vl_resultats
VAR tl_zones
var vl_index,vl_indice
var FORMAT T_SCENARIO tl_data

tl_zones=SYSTEM_VAR@(vg_zones)

if (va_zone > -1) {

vl_parametres = null
vl_parametres[0].type = SYB#CHAR_
vl_parametres[0].data = XDC_BASE_CFG
vl_parametres[0].output = FALSE
vl_parametres[1].type = SYB#INT2_
vl_parametres[1].data = tl_zones[va_zone][0]
vl_parametres[1].output = FALSE
vl_resultats = null

IF COM05_SQL_Procedure (XZAO558_Liste_Scenarios,
	   vl_parametres, vl_resultats, C_MODULE) <> COM_OK
   RETURN (COM_NOK)



tl_data = vl_resultats.select_results[0]
vl_indice=0
for vl_index = 0 to (ARRAY_SIZE@(tl_data)-1)
	if (tl_data[vl_index].inhibition = 0){
		tm_scenarios[vl_indice] = tl_data[vl_index]
		vl_indice = vl_indice +1
	}
next vl_index
DB_CTRL_STRINGS@(va_fenetre,"BO_scenario",ARRAY_COLUMN@(tm_scenarios,1))
DB_CTRL_VALUE@(va_fenetre,"BO_scenario",-1)
DB_CTRL_STRINGS@(va_fenetre,"BO_scenario_new",ARRAY_COLUMN@(tm_scenarios,1))
DB_CTRL_VALUE@(va_fenetre,"BO_scenario_new",-1)
}

ENDMACRO


/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
*  Initialise la liste des scenarios de la zone
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

FUNCTION TMC_reg_choix_zone(va_fenetre, va_zone,va_texte)

/*
* ARGUMENTS EN ENTREE :
*   va_fenetre        : Id. de la fenetre contenant les objets a initialiser.
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : COM_OK en cas d'execution correcte, COM_NOK sinon.
*
* CONDITION D'UTILISATION
*   ITMA_TRG_param_scenarios ;
*
* FONCTION
*   initialise les valeurs de la liste des libelles predefinis.
*
---------------------------------------------------------------------------- */
VAR tl_zones
VAR vl_indice, vl_index, vl_index2
var vl_scenario
var tl_scenarios
VAr tl_data
VAR     FORMAT TDO_Libelle_Predefini    tl_contexte, tl_contexte_valid
VAR     FORMAT TDO_Libelle_Predefini    tl_mesure, tl_mesure_valid

COM37_Lit_Libelles_Predefinis (XDC_LIB_TYPE_CONTEXTE_REGUL, tl_contexte, 
					tl_contexte_valid)

COM37_Lit_Libelles_Predefinis (XDC_LIB_TYPE_MESURE_REGUL, tl_mesure, 
					tl_mesure_valid)

tl_zones=SYSTEM_VAR@(vg_zones)
vl_indice=ARRAY_INDEX@(ARRAY_COLUMN@(tl_zones, 0), va_zone)

DB_CTRL_VALUE@(va_fenetre,"BO_zone",vl_indice)
TMC_reg_get_scenarios(va_fenetre, vl_indice)

vl_index = STRING_INDEX@(va_texte, "#")

vl_scenario = SUBSTRING@(va_texte, vl_index+1)
tl_data=ARRAY_FROM_STRING@(vl_scenario, "#")

vl_indice = ARRAY_INDEX@(ARRAY_COLUMN@(tm_scenarios, 0), tl_data[0])
DB_CTRL_VALUE@(va_fenetre, "BO_scenario_new", vl_indice)


vl_indice= ARRAY_INDEX@(ARRAY_COLUMN@(tl_contexte, TDO_CODE_LIBELLe), tl_data[1])
if (vl_indice>-1)
	DB_CTRL_TITLE@(va_fenetre, "LI_contexte", tl_contexte[vl_indice][TDO_TEXTE_LIBELLE])
	db_ctrl_title@(va_fenetre, "LI_num_contexte",tl_data[1])


vl_indice= ARRAY_INDEX@(ARRAY_COLUMN@(tl_mesure,TDO_CODE_LIBELLe), tl_data[2])
if (vl_indice>-1)
	DB_CTRL_TITLE@(va_fenetre, "LI_mesure", tl_mesure[vl_indice][TDO_TEXTE_LIBELLE])
	db_ctrl_title@(va_fenetre, "LI_num_mesure",tl_data[2])


ENDFUNCTION

