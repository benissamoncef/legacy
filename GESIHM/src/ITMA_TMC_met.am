/*E*/
/* Fichier : $Id: ITMA_TMC_met.am,v 1.28 2020/11/03 17:43:55 pc2dpdy Exp $     			  Release :$Revision: 1.28 $ 	   Date : $Date: 2020/11/03 17:43:55 $
------------------------------------------------------------------------------------
*  GTIE  *  PROJET MIGRAZUR
------------------------------------------------------------------------------------
*  SOUS-SYSTEM GESIHM
------------------------------------------------------------------------------------
*  MODULE MTMC  *  Fichier ITMA_TMC_met.am
------------------------------------------------------------------------------------
*  DESCRIPTION DU MODULE :
*
*   Gere les donnees specifiques aux types meteo,
*   chaussee glissante et traitement chaussees
*   et les champs correspondants dans la fenetre de saisie FMC
*
------------------------------------------------------------------------------------
*  HISTORIQUE :
*
*  Guilhou 24 Oct 1994	1.1	: Création
*  Noel	08 Fev  1996	1.10 : Prise en compte d'une visibilié
*						  non renseignée (plutôt que 0m) (DEM828)
*  Torregrossa  23 Sep 1996 : Modif cr de sauvegarde V1.11 (CONF 4)
*  Torregrossa  18 Oct 1996 : Suppression des define sur type de perturbation et
*                             et ajout caracteres valide pour visibilite (IHM 7)
* Guilhou 24 dec 1996 : controle coherence PR (PR fin = PR tete) 1.13
*  Torregrossa  20 Avr 1998 : Ajout test sur le code d'erreur XZAE56 (1612) V1.14
*  Niepceron	11 Jan 1999 : Modif intergestionnaire (1623) v1.15
* Hilmarcher	28/02/2005 : modif libelles meteo a chercher dans LIB_PRE DEM429 v1.16
* Hilmarcher    04/03/2005 : modif lecture des libelles meteo v1.17
*  Lizot        14 Avr 2004 : Gestion du droit de propriete ESCOTA/DDE83 (SAGA) v1.18
* Hilmarcher    05/09/2005  : Modif SAGA pour sous-type perturbation v1.19
* Lecrivain	26/03/2007  : Afficher/effacer champs pour retypage (dem/637) 1.20
* Lecrivain	26/04/2007  : Ajout Chaussee glissante et Traitement Chaussees (DEM 646,644) 1.21
* Lecrivain	07/06/2007  : Profil macro 'sauve' idem modules bascul et travaux (DEM 647) 1.22
* Lecrivain	27/11/2007  : La macro 'sauve' verifie la validite du Pr de tete (DEM 726) 1.23
* JPL		25/10/2012  : Gestion des conditions de conduite hivernale (DEM 1032)  1.25
* JPL		06/12/2012  : Conditions de conduite: plus de couverture de la zone FMC (DEM 1032)  1.26
* PNI		30/08/2013  : Suppression de la vérificationque les zones definies sont a l'intérieur de celle de l'événement DEM1076 1.27
* LCL   22/04/20        : MOVIS Ajout site local pilotage DEM-SAE93
------------------------------------------------------------------------------------
*/

/*A Déclaration des fichiers à inclure */
INCLUDE	"dbase_.am"

INCLUDE	"XDMICG/inc/xdc_ax.h"
INCLUDE	"XDMICG/inc/xzic_ax.h"
INCLUDE	"XDMICG/inc/xzaec_ax.h"
INCLUDE	"xzae44sp.h"
INCLUDE	"xzae56sp.h"
INCLUDE	"xzae76sp.h"
INCLUDE	"xzae77sp.h"

INCLUDE	"ITMA_COM.h"
INCLUDE	"ITMA_TDO.h"
INCLUDE	"ITMA_TMC.h"

/*A Définition des constantes */

DEFINE	CM_MODULE		"MTMC"		' Nom du module


DEFINE	CM_CCH_LIB_NR	"__"

DEFINE	CM_CCH_PRECIPIT_OUI	"Oui"
DEFINE	CM_CCH_PRECIPIT_NON	"Non"


/*A
** Format des données de Condition de Conduite affichées
** -----------------------------------------------------
*/

FORMAT	TMC_MET_CCH
	PR_debut,
	PR_fin,
	SEPAR,
	bau_i,
	vl_i,
	vm1_i,
	vm2_i,
	vr_i,
	SEPAR,
	vr,
	vm2,
	vm1,
	vl,
	bau,
	precipitations



VAR	vm_type_fmc				' Type actuellement defini

VAR	FORMAT TDO_Libelle_Predefini	tm_nature_evt, tm_nature_evt_affiche

VAR	FORMAT TDO_Dictionnaire		tm_Config_CCH

VAR	tm_champs_CCH
VAR	tm_titres_CCH



/*X*/
/* ---------------------------------------------------------------------------------
* SERVICE RENDU :
*
*  Affiche / masque dans la fenetre FMC les champs specifiques au type d'événement
*
------------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TMC_met (va_fenetre, va_type_fmc, va_visible)

/*
* ARGUMENTS EN ENTREE :
*  va_fenetre         : id de la boite de dialogue ou afficher les champs
*  va_type_fmc        : type de la fmc
*  va_visible         : indicateur de visibilite demandee (Vrai ou Faux).
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Indefini
*
* CONDITION D'UTILISATION
*   MTMC
*
* FONCTION
--------------------------------------------------------------------------------- */

VAR	vl_fenetre
VAR	tl_controles
VAR	vl_indice
VAR	vl_droits


vl_fenetre = va_fenetre

/*A Traitements en cas d'erreur :
 *   informer l'operateur, tracer l'erreur et abandonner
 * -----------------------------------------------------
 */
ON ERROR
{
	ERROR_BOX@
	COM01_Trace (COM_WARNING, COM03_Message_Erreur (CM_MODULE))
	RETURN
}

IF (va_visible) {
	vm_type_fmc = va_type_fmc
	ITMA_TMC_met_init (vl_fenetre, va_type_fmc)
}


/*A rendre visibles ou masquer les champs associes au type fmc */

/* Modif SAGA : la visibilite depend du droit de propriete */
vl_droits = SYSTEM_VAR@ (vg_datex_propriete)


tl_controles = {
	"BO_nature_met",
	"LI_longueurmet",
	"LI_val_longueurmet",
	"PA_longueurmet",
	"BS_prmet"
}
IF va_type_fmc = XZAEC_FMC_Meteo {
	tl_controles = ARRAY_APPEND@ (tl_controles, { "BS_visibilite" })
}
FOR vl_indice = 0 TO ARRAY_SIZE@ (tl_controles) - 1
	DB_CTRL_DISPLAY@ (vl_fenetre, tl_controles[vl_indice], va_visible)
	DB_CTRL_GRAYED@ (vl_fenetre, tl_controles[vl_indice],
	                    va_visible AND (vl_droits = XDC_FAUX))
NEXT vl_indice


/*A afficher ou masquer les champs de saisie des Conditions de Conduite Hivernale */
ITMA_TMC_met_CCH_visibles (vl_fenetre, va_type_fmc, va_visible)

RETURN (vl_fenetre)

ENDMACRO





/*X*/
/* ---------------------------------------------------------------------------------
* SERVICE RENDU :
*
*  Initialiser certaines données et champs specifiques aux FMC du type specifie
*
------------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TMC_met_init (va_fenetre, va_type_fmc)

VAR	type_libelle
VAR	tl_nature_evt_valides
VAR	vl_marque
VAR	i

/*B Initialisations a effectuer a chaque ouverture de la fenetre FMC au moins */
vl_marque = DB_CTRL_GET_CLIENT_DATA@ (va_fenetre, "BO_nature_met")
IF IS_NULL@ (vl_marque)
{
	DB_CTRL_CLIENT_DATA@ (va_fenetre, "BO_nature_met", "Initialise")

	'DB_CTRL_VALID_CHARS@ (va_fenetre, "BS_prmet", COM_CHIFFRES ++ ".,")

	tm_champs_CCH = { "BP_CCH_VR", "BP_CCH_VM2", "BP_CCH_VM1", "BP_CCH_VL", "BP_CCH_BAU",
			  "BP_CCH_VR_I", "BP_CCH_VM2_I", "BP_CCH_VM1_I", "BP_CCH_VL_I", "BP_CCH_BAU_I" }
}


/*B Initialisations a effectuer a chaque affichage des champs (retypage FMC) */
IF (va_type_fmc = XZAEC_FMC_Meteo)
{
	IF IS_NULL@ (tm_Config_CCH)
	{
		DB_CTRL_VALID_CHARS@ (va_fenetre, "BS_visibilite", COM_CHIFFRES ++ ".,")
		DB_CTRL_VALID_CHARS@ (va_fenetre, "BS_CCH_PR_Debut", COM_CHIFFRES ++ ".,")
		DB_CTRL_VALID_CHARS@ (va_fenetre, "BS_CCH_PR_Fin", COM_CHIFFRES ++ ".,")

		DB_CTRL_RETURN_ON_CHANGE@ (va_fenetre, "BO_nature_met", TRUE)

		tm_Config_CCH = {
			{ XZAEC_CCH_NR,		CM_CCH_LIB_NR },
			{ XZAEC_CCH_C1,		XZAEC_CCH_LIB_C1 },
			{ XZAEC_CCH_C2,		XZAEC_CCH_LIB_C2 },
			{ XZAEC_CCH_C3,		XZAEC_CCH_LIB_C3 },
			{ XZAEC_CCH_C4,		XZAEC_CCH_LIB_C4 }
		}

		FOR i = 0  TO (ARRAY_SIZE@ (tm_champs_CCH) - 1)
			IF (STRING_INDEX@ (tm_champs_CCH[i], "VM") <= 0) AND
			   (STRING_INDEX@ (tm_champs_CCH[i], "BAU") <= 0)
			{
				DB_CTRL_TITLE@ (va_fenetre, tm_champs_CCH[i], XZAEC_CCH_LIB_C1)
			} ELSE {
				DB_CTRL_TITLE@ (va_fenetre, tm_champs_CCH[i], CM_CCH_LIB_NR)
			}
		NEXT i

		tm_titres_CCH = {
			{ "Pr début",	53 },
			{ "Pr fin",	53 },
			{ "",		2 },
			{ "BAU",	28 },
			{ "VL",		26 },
			{ "VM1",	27 },
			{ "VM2",	27 },
			{ "VR",		26 },
			{ "",		8 },
			{ "VR",		26 },
			{ "VM2",	27 },
			{ "VM1",	27 },
			{ "VL",		26 },
			{ "BAU",	28 },
			{ "Précipit.",	52 }
		}
		DB_TABLE_SET_DATA@ (va_fenetre, "TA_CCH_Prec", NULL, tm_titres_CCH, NULL)
		DB_CTRL_RETURN_ON_CHANGE@ (va_fenetre, "TA_CCH_Prec", TRUE)

		DB_TABLE_SET_DATA@ (va_fenetre, "TA_CCH", NULL, NULL, NULL)
		DB_CTRL_RETURN_ON_CHANGE@ (va_fenetre, "TA_CCH", TRUE)
	}
}


/*B Lire en base de donnees les types de nature d'événement */
CASE OF va_type_fmc
CASE XZAEC_FMC_Meteo
	type_libelle = XDC_LIB_TYPE_PERTURBATION
CASE XZAEC_FMC_TraitChaussees
	type_libelle = XDC_TYPE_LIB_TRAIT_CHAUSSEE
CASE XZAEC_FMC_ChausseeGliss
	type_libelle = XDC_TYPE_LIB_CHAUSSEE_GLISS
ENDCASE

COM37_Lit_Libelles_Predefinis (type_libelle, tm_nature_evt, tl_nature_evt_valides)
tm_nature_evt_affiche = tl_nature_evt_valides
DB_CTRL_STRINGS@ (va_fenetre, "BO_nature_met",
                     ARRAY_COLUMN@ (tm_nature_evt_affiche, TDO_TEXTE_LIBELLE))
DB_CTRL_VALUE@ (va_fenetre, "BO_nature_met", 0)

ENDMACRO





/*X*/
/* ---------------------------------------------------------------------------------
* SERVICE RENDU :
*
*  Lit en base les données specifiques aux fiches de classe Meteo
*  et les visualise dans la zone specifique de la fenetre FMC
*
------------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TMC_met_charge (va_fenetre,FORMAT COM_Identifiant_FMC ta_num_evt,
					va_horodate)

/*
* ARGUMENTS EN ENTREE :
* ta_num_evt            : numero et cle d'evenement
* va_fenetre            : id de la boite de dialogue fiche main courante
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Indefini
*
* CONDITION D'UTILISATION
*   MTMC
*
* FONCTION
*
--------------------------------------------------------------------------------- */

VAR	FORMAT SQL_Procedure_Params@	vl_parametres
VAR	FORMAT SQL_Procedure_Result@	vl_resultats
VAR	vl_indice
VAR	FORMAT TMC_meteo	vl_tampon
VAR	vl_fenetre
VAR	tl_retour

/*A En cas d'erreur, informer l'operateur, tracer et abandonner */
ON ERROR
{
	ERROR_BOX@
	COM01_Trace (COM_WARNING, COM03_Message_Erreur (CM_MODULE))
	RETURN
}

vl_fenetre=va_fenetre

vl_parametres = COM15_Parametres_Requete ( {
	{ FALSE,	SYB#DATETIME_,	va_horodate },
	{ FALSE,	SYB#INT4_,	ta_num_evt.numero },
	{ FALSE,	SYB#INT1_,	ta_num_evt.cle },
	{ TRUE,		SYB#INT4_,	NULL },
	{ TRUE,		SYB#INT1_,	NULL },
	{ TRUE,		SYB#INT2_,	NULL },
	{ TRUE,		SYB#INT4_,	NULL }
} )

IF COM05_SQL_Procedure (XZAE44_Lire_Fiche_Meteo,
			  vl_parametres, vl_resultats, CM_MODULE) <> COM_OK
{
	INFO_MESSAGE@ ("Erreur lors de la lecture en base des données Météo")
	tl_retour[0]=va_fenetre
	tl_retour[1]=null
	RETURN (tl_retour)
}
vl_tampon=vl_resultats.return_parameters

ITMA_TMC_met_affiche (vl_fenetre, vl_tampon)

IF (ITMA_TMC_met_nature_CCH (vl_fenetre, vm_type_fmc) = XDC_VRAI)
{
	ITMA_TMC_met_restreindre_nature (vl_fenetre, vm_type_fmc)

	/*DB_TABLE_CLEAR_DATA@ (vl_fenetre, "TA_CCH", 0, -1)*/
	ITMA_TMC_met_Lire_CCH (vl_fenetre, ta_num_evt, va_horodate)

	ITMA_TMC_met_CCH_visibles (vl_fenetre, vm_type_fmc, TRUE)
}

tl_retour[0]=vl_fenetre
tl_retour[1]=vl_tampon

RETURN (tl_retour)

ENDMACRO





/*X*/
/* ---------------------------------------------------------------------------------
* SERVICE RENDU :
*
*  Ecrit en base les données spécifiques d'une fiche de classe Meteo
*
------------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TMC_met_sauve (FORMAT COM_Identifiant_FMC ta_num_evt,
                             FORMAT TMC_meteo va_tampon,
                             va_mode, va_horodate, va_fenetre,
                             va_autoroute, va_pr, va_sens)

/*
* ARGUMENTS EN ENTREE :
*  ta_num_evt         : numero et cle d'evenement
*  va_tampon          : valeurs des champs specifiques
*  va_mode            : prevision, traiter, clos
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Indefini
*
* CONDITION D'UTILISATION
*   MTMC
*
* FONCTION
--------------------------------------------------------------------------------- */

VAR	FORMAT SQL_Procedure_Params@	vl_parametres
VAR	FORMAT SQL_Procedure_Result@	vl_resultats
VAR	vl_indice
VAR	vl_poste_oper
VAR	vl_cr

/*A
** En cas d'erreur informer l'operateur, tracer et abandonner
** ----------------------------------------------------------
*/

ON ERROR
{
	ERROR_BOX@
	COM01_Trace (COM_WARNING, COM03_Message_Erreur (CM_MODULE))
	RETURN (COM_NOK)
}


IF (SYSTEM_VAR@(vg_surcharge)=TRUE) {
	vl_poste_oper=SYSTEM_VAR@(vg_numero_poste_surcharge)
} ELSE {
	vl_poste_oper=SYSTEM_VAR@(vg_numero_poste)
}


	vl_indice=0
	/*A preparation des parametres de la procedure stockee*/
	vl_parametres[vl_indice].data=ta_num_evt.numero
	vl_parametres[vl_indice].type=SYB#INT4_
	vl_parametres[vl_indice].output=FALSE
	vl_indice=vl_indice+1

	vl_parametres[vl_indice].data=ta_num_evt.cle
	vl_parametres[vl_indice].type=SYB#INT4_
	vl_parametres[vl_indice].output=FALSE
	vl_indice=vl_indice+1

	vl_parametres[vl_indice].data=va_horodate
	vl_parametres[vl_indice].type=SYB#DATETIME_
	vl_parametres[vl_indice].output=FALSE
	vl_indice=vl_indice+1

	vl_parametres[vl_indice].data=va_tampon.prfin
	vl_parametres[vl_indice].type=SYB#INT4_
	vl_parametres[vl_indice].output=FALSE
	vl_indice=vl_indice+1

	vl_parametres[vl_indice].data = va_tampon.perturbation
	vl_parametres[vl_indice].type=SYB#INT4_
	vl_parametres[vl_indice].output=FALSE
	vl_indice=vl_indice+1

	vl_parametres[vl_indice].data = va_tampon.visibilite
	vl_parametres[vl_indice].type=SYB#INT4_
	vl_parametres[vl_indice].output=FALSE
	vl_indice=vl_indice+1

	vl_parametres[vl_indice].data=vl_poste_oper
	vl_parametres[vl_indice].type=SYB#INT4_
	vl_parametres[vl_indice].output=FALSE
	vl_indice=vl_indice+1

	vl_parametres[vl_indice].data=va_mode
	vl_parametres[vl_indice].type=SYB#INT4_
	vl_parametres[vl_indice].output=FALSE
        vl_indice = vl_indice +1

/*B Site local */
        vl_parametres[vl_indice].type = SYB#CHAR_
        vl_parametres[vl_indice].data = SYSTEM_VAR@(vg_nom_site)
        vl_parametres[vl_indice].output = FALSE


IF COM05_SQL_Procedure (XZAE56_Ecrire_Fiche_Meteo,
			   vl_parametres, vl_resultats, CM_MODULE) <> COM_OK
{
	INFO_MESSAGE@ ("Erreur lors de l'écriture en base des données Météo")
	RETURN (COM_NOK)
}

IF (vl_resultats.status <> COM_OK)
{
	IF (vl_resultats.status <> XZAEC_FMC_PAS_ENR) AND
	   (vl_resultats.status <> XZAEC_FMC_CLOSE_PAS_ENR)
	{
		INFO_MESSAGE@ ("Erreur lors de l'écriture en base des données Météo")
	}
	RETURN (vl_resultats.status)
}


/*A Pour une Fmc Météo de nature adéquate, écrire les Conditions de conduite */
IF (ITMA_TMC_met_nature_CCH (va_fenetre, vm_type_fmc) = XDC_VRAI)
{
	vl_cr = ITMA_TMC_met_Ecrire_CCH (ta_num_evt, va_mode, va_horodate, va_fenetre)
	RETURN (vl_cr)
}

RETURN (COM_OK)

ENDMACRO




/*X*/
/* ---------------------------------------------------------------------------------
* SERVICE RENDU :
*
*  Affiche les donnees specifiques d'une fiche Meteo
*
------------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TMC_met_affiche (va_fenetre, FORMAT TMC_meteo va_meteo)

/*
* ARGUMENTS EN ENTREE :
*  va_fenetre         : ID de la fenetre FMC
*  va_meteo           : Données de la fiche Meteo
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Indefini
*
* CONDITION D'UTILISATION
*   ITMA_TMC sur ouverture fiche Meteo
*
* FONCTION
*  Value les champs de saisie spécifiques aux FMC de classe Meteo
*
--------------------------------------------------------------------------------- */

VAR	i, j, k

/*B Afficher le PR de fin */
IF (va_meteo.prfin <> null) AND (va_meteo.prfin <> XDC_PR_INCONNU) {
	DB_CTRL_VALUE@ (va_fenetre, "BS_prmet", va_meteo.prfin / 1000)
} ELSE {
	DB_CTRL_VALUE@ (va_fenetre, "BS_prmet", null)
}


/*B Afficher la nature de l'evenement, en ajoutant si necessaire sa valeur */
/*B a la liste des libelles valides, c'est a dire si elle ne l'est plus    */
k = COM45_IndexEnColonne(tm_nature_evt_affiche,TDO_CODE_LIBELLE,va_meteo.perturbation)
IF (k < 0) {
	tm_nature_evt_affiche = { }
	j = 0

	FOR i = 0  TO (ARRAY_SIZE@ (tm_nature_evt) - 1)
		IF (tm_nature_evt[i].code = va_meteo.perturbation) OR
		      (tm_nature_evt[i].valide = XDC_VRAI)
		{
			tm_nature_evt_affiche[j] = tm_nature_evt[i]
			j = j + 1
			IF (tm_nature_evt[i].code = va_meteo.perturbation)
				k = j
		}
	NEXT i
	DB_CTRL_STRINGS@ (va_fenetre, "BO_nature_met",
			     ARRAY_COLUMN@ (tm_nature_evt_affiche, TDO_TEXTE_LIBELLE))
}
DB_CTRL_VALUE@ (va_fenetre, "BO_nature_met", k)


IF va_meteo.visibilite = XDC_VISIBILITE_INCONNUE {
	DB_CTRL_VALUE@ (va_fenetre, "BS_visibilite", null)
} ELSE IF va_meteo.visibilite < 0 {
	/* ne plus afficher des visibilités négatives autorisees auparavant */
	DB_CTRL_VALUE@ (va_fenetre, "BS_visibilite", va_meteo.visibilite * -1)
} ELSE {
	DB_CTRL_VALUE@ (va_fenetre, "BS_visibilite", va_meteo.visibilite)
}

DB_CTRL_TITLE@ (va_fenetre, "LI_val_longueurmet", ABS@ (va_meteo.longueur))

ENDMACRO




/*X*/
/* ---------------------------------------------------------------------------------
* SERVICE RENDU :
*
*  Lit les donnees specifiques d'une fiche Meteo saisies dans la fenetre
*
------------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TMC_met_saisie (va_fenetre, FORMAT TMC_meteo va_meteo)

/*
* ARGUMENTS EN ENTREE :
*  va_fenetre         : ID de la fenetre FMC
*
*
* ARGUMENTS EN SORTIE :
*  va_meteo           : Donnees de la fiche Meteo
*
*
* CODE RETOUR         : XDC_NOK si une valeur saisie est incorrecte, XDC_OK sinon.
*
* CONDITION D'UTILISATION
*   ITMA_TMC sur validation fiche Meteo
*
* FONCTION
*  Remplit la fiche avec les donnees des champs de saisie specifiques.
*
--------------------------------------------------------------------------------- */

VAR	vl_i_nature

/*B Valeur du PR de fin */
va_meteo.prfin = COM26_Valeur_PR (va_fenetre, "BS_prmet")

/*B Nature de la perturbation */
vl_i_nature = DB_CTRL_GET_VALUE@ (va_fenetre, "BO_nature_met")
va_meteo.perturbation = tm_nature_evt_affiche[vl_i_nature].code

/*B Visibilite */
va_meteo.visibilite = DB_CTRL_GET_VALUE@ (va_fenetre, "BS_visibilite")
IF (va_meteo.visibilite = NULL) {
	va_meteo.visibilite = XDC_VISIBILITE_INCONNUE
}

va_meteo.longueur = 0

RETURN (XDC_OK)

ENDMACRO




/*X*/
/* ---------------------------------------------------------------------------------
* SERVICE RENDU :
*
*  Effectue les controles de validite des donnees specifiques d'une fiche Meteo
*
------------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TMC_met_controle (FORMAT TMC_fmc va_fiche, FORMAT TMC_meteo va_meteo, va_fenetre)

/*
* ARGUMENTS EN ENTREE :
*  va_fiche           : Donnees generiques de la Fmc ;
*  va_meteo           : Donnees specifiques a la Fmc Meteo
*  va_fenetre         : ID de la fenetre FMC
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : XDC_NOK si les donnees sont incorrectes, XDC_OK sinon.
*
* CONDITION D'UTILISATION
*   ITMA_TMC sur validation fiche Meteo
*
* FONCTION
*
--------------------------------------------------------------------------------- */

VAR	vl_sitePr
VAR	FORMAT TDO_Autoroute	tl_autoroutes
VAR	vl_i_auto

/*B Controler la validite du PR de fin et sa coherence par rapport au sens */
IF IS_NULL@ (va_meteo.prfin) OR (va_meteo.prfin = XDC_PR_INCONNU)
{
	INFO_MESSAGE@ ("Le PR de fin ne peut être nul")
	RETURN (XDC_NOK)
}

IF (va_fiche.sens <> XDC_SENS_INCONNU)  AND  (va_fiche.pr <> XDC_PR_INCONNU)
{
	IF ITMA_TMC_coherence_pr (va_fiche.autoroute, va_meteo.prfin, va_fiche.pr, va_fiche.sens) <> COM_OK
		RETURN (XDC_NOK)
}

IF (va_fiche.sens = XDC_SENS_INCONNU)
{
	IF ITMA_TMC_coherence_pr (va_fiche.autoroute, va_meteo.prfin, va_fiche.pr, XDC_SENS_NORD) <> COM_OK
		RETURN (XDC_NOK)
}

vl_sitePr = ITMA_COM_Site_PR (va_fiche.autoroute, va_meteo.prfin, CM_MODULE)
IF IS_NULL@ (vl_sitePr)
{
	INFO_MESSAGE@ ("Erreur lors de la vérification de validité du PR de fin")
	RETURN (XDC_NOK)
}
IF (vl_sitePr = XDC_SITE_INCONNU)
{
	INFO_MESSAGE@ ("Le PR de fin est hors réseau")
	RETURN (XDC_NOK)
}


/*B Pour un événement météo, selon sa nature verifier les conditions de conduite */
IF (ITMA_TMC_met_nature_CCH (va_fenetre, vm_type_fmc) = XDC_VRAI)
{
	tl_autoroutes = SYSTEM_VAR@ (vg_les_autoroutes)
	vl_i_auto = COM45_IndexEnColonne (tl_autoroutes, TDO_NUMERO_AUTOROUTE, va_fiche.autoroute)

	IF (ITMA_TMC_met_Controle_CCH (va_fenetre, va_fiche.pr, va_meteo.prfin, tl_autoroutes[vl_i_auto].sens) <> XDC_OK)
	{
		RETURN (XDC_NOK)
	}
}


RETURN (XDC_OK)

ENDMACRO



/*
* ==================================================================================
*
*                      GESTION DES CONDITIONS DE CONDUITE HIVERNALE
*
* ==================================================================================
*/


/*X*/
/* ---------------------------------------------------------------------------------
* SERVICE RENDU :
*
*  Affiche / masque dans la fenetre FMC les champs de saisie
*  des Conditions de Conduite Hivernale.
*
------------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TMC_met_CCH_visibles (va_fenetre, va_type_fmc, va_visibles)

/*
* ARGUMENTS EN ENTREE :
*  va_fenetre         : id de la boite de dialogue ou afficher les champs
*  va_type_fmc        : type de la fmc
*  va_visibles        : indicateur de visibilite demandee (Vrai ou Faux).
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Indefini
*
* CONDITION D'UTILISATION
*   MTMC
*
* FONCTION
--------------------------------------------------------------------------------- */

VAR	vl_CCH_visibles
VAR	tl_controles
VAR	vl_indice

/*A Determiner la visibilite, filtree pour une */
/*A Fmc meteo par la nature de la perturbation */
vl_CCH_visibles = FALSE
IF (va_visibles = TRUE)  AND  (va_type_fmc = XZAEC_FMC_Meteo)
{
	IF (ITMA_TMC_met_nature_CCH (va_fenetre, va_type_fmc) = XDC_VRAI)
		vl_CCH_visibles = TRUE
}

/*A afficher ou masquer tous les champs de saisie CCH */
tl_controles = ARRAY_APPEND@ (tm_champs_CCH, { "LI_CCH_Sens1", "LI_CCH_Sens2",
                                               "BS_CCH_PR_Debut", "BS_CCH_PR_Fin",
                                               "LI_CCH_Prec", "LI_CCH_Nouveau",
                                               "TA_CCH_Prec", "TA_CCH",
                                               "BP_CCH_Ajouter", "BP_CCH_Supprimer",
                                               "BA_Precipitations", "PA_terreplein_CCH" })

FOR vl_indice = 0 TO ARRAY_SIZE@ (tl_controles) - 1
	DB_CTRL_DISPLAY@ (va_fenetre, tl_controles[vl_indice], vl_CCH_visibles)
NEXT vl_indice

ENDMACRO





/*X*/
/* ---------------------------------------------------------------------------------
* SERVICE RENDU :
*
*  Retourne une valeur indiquant si l'evenement est de nature
*  a justifier la saisie de Conditions de Conduite Hivernale.
*
------------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TMC_met_nature_CCH (va_fenetre, va_type_fmc)

/*
* ARGUMENTS EN ENTREE :
*  va_fenetre         : id de la boite de dialogue
*  va_type_fmc        : type de la fmc
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Vrai ou faux selon que la Fmc comporte des CCH.
*
* CONDITION D'UTILISATION
*   MTMC
*
* FONCTION
*
--------------------------------------------------------------------------------- */

VAR	vl_idx_nature, vl_nature_perturbation
VAR	vl_nature_CCH

vl_nature_CCH = XDC_FAUX

IF (va_type_fmc = XZAEC_FMC_Meteo)
{
	vl_idx_nature = DB_CTRL_GET_VALUE@ (va_fenetre, "BO_nature_met")
	IF (vl_idx_nature >= 0)
	{
		vl_nature_perturbation = tm_nature_evt_affiche[vl_idx_nature].code
		IF (vl_nature_perturbation = XZAEC_MET_ChuteNeige)  OR
		   (vl_nature_perturbation = XZAEC_MET_Grele)  OR
		   (vl_nature_perturbation = XZAEC_MET_Verglas)
		{
			vl_nature_CCH = XDC_VRAI
		}
	}
}

RETURN (vl_nature_CCH)

ENDMACRO





/*X*/
/* ---------------------------------------------------------------------------------
* SERVICE RENDU :
*
*  Restreint les choix de nature de la Fmc de type Météo
*  a ceux qui comportent des Conditions de Conduite Hivernale.
*
------------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TMC_met_restreindre_nature (va_fenetre, va_type_fmc)

/*
* ARGUMENTS EN ENTREE :
*  va_fenetre         : id de la boite de dialogue
*  va_type_fmc        : type de la fmc
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Aucun
*
* CONDITION D'UTILISATION
*   MTMC
*
* FONCTION
*
--------------------------------------------------------------------------------- */

VAR	vl_nature_perturbation
VAR	tl_nature_evt, tl_choix_cch
VAR	i, k

IF (va_type_fmc = XZAEC_FMC_Meteo)
{
	tl_choix_cch = {
		XZAEC_MET_ChuteNeige,
		XZAEC_MET_Grele,
		XZAEC_MET_Verglas
	}

	/* Filtrer la liste de natures proposees par les choix CCH */
	tl_nature_evt = COM44_ValeursEnColonne (tm_nature_evt_affiche, TDO_CODE_LIBELLE, tl_choix_cch, TRUE)

	/* Restaurer la selection de nature actuelle */
	i = DB_CTRL_GET_VALUE@ (va_fenetre, "BO_nature_met")
	IF (i < 0)  i = 0
	vl_nature_perturbation = tm_nature_evt_affiche[i].code

	k = COM45_IndexEnColonne (tl_nature_evt, TDO_CODE_LIBELLE, vl_nature_perturbation)
	IF (k < 0)  k = 0

	tm_nature_evt_affiche = tl_nature_evt
	DB_CTRL_STRINGS@ (va_fenetre, "BO_nature_met", ARRAY_COLUMN@ (tl_nature_evt, TDO_TEXTE_LIBELLE))
	DB_CTRL_VALUE@ (va_fenetre, "BO_nature_met", k)
}

ENDMACRO





/*X*/
/* ---------------------------------------------------------------------------------
* SERVICE RENDU :
*
*  Retourne l'index d'un code de Condition de Conduite dans leur table.
*
------------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TMC_met_Index_CCH (va_code_cch)

VAR	i

i = COM45_IndexEnColonne (tm_Config_CCH, TDO_DICO_CLE, va_code_cch)
IF (i < 0)  i = 0

RETURN (i)

ENDMACRO





/*X*/
/* ---------------------------------------------------------------------------------
* SERVICE RENDU :
*
*  Retourne le code d'une Condition de Conduite dont le libelle est donne.
*
------------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TMC_met_Valeur_CCH (va_libelle_cch)

VAR	i

i = COM45_IndexEnColonne (tm_Config_CCH, TDO_DICO_VAL, va_libelle_cch)
IF (i < 0)  i = 0

RETURN (tm_Config_CCH[i].kle)

ENDMACRO





/*X*/
/* ---------------------------------------------------------------------------------
* SERVICE RENDU :
*
*  Ajoute a la table des Conditions de Conduite Hivernale
*  les valeurs de PRs et conditions definies dans la zone de saisie.
*
------------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TMC_met_Ajouter_CCH (va_fenetre, va_pr_deb_fmc, va_pr_fin_fmc, va_ordre_pr)

VAR	FORMAT TMC_MET_CCH	tl_CCH
VAR	FORMAT TMC_MET_CCH	vl_CCH

VAR	vl_pr_min, vl_pr_max
VAR	vl_pr_debut, vl_pr_fin
VAR	vl_pr
VAR	vl_index, k

/*A Verifier les conditions de saisie des conditions de conduite */
IF IS_NULL@ (va_ordre_pr)  OR  IS_NULL@ (va_pr_deb_fmc)  OR  (va_pr_deb_fmc = XDC_SENS_INCONNU)
{
	INFO_MESSAGE@ ("Saisir d'abord la localisation")
	RETURN (COM_NOK)
}
ELSE IF IS_NULL@ (va_pr_fin_fmc)  OR  (va_pr_fin_fmc = XDC_SENS_INCONNU)
{
	INFO_MESSAGE@ ("Renseigner d'abord le PR de fin d'événement")
	RETURN (COM_NOK)
}

IF (va_pr_deb_fmc < va_pr_fin_fmc) {
	vl_pr_min = va_pr_deb_fmc / 1000
	vl_pr_max = va_pr_fin_fmc / 1000
} ELSE {
	vl_pr_min = va_pr_fin_fmc / 1000
	vl_pr_max = va_pr_deb_fmc / 1000
}


/*A Lire des valeurs saisies */
vl_pr_debut = DB_CTRL_GET_VALUE@ (va_fenetre, "BS_CCH_PR_Debut")
vl_pr_fin = DB_CTRL_GET_VALUE@ (va_fenetre, "BS_CCH_PR_Fin")

vl_CCH.bau_i	= DB_CTRL_GET_TITLE@ (va_fenetre, "BP_CCH_BAU_I")
vl_CCH.vl_i	= DB_CTRL_GET_TITLE@ (va_fenetre, "BP_CCH_VL_I")
vl_CCH.vm1_i	= DB_CTRL_GET_TITLE@ (va_fenetre, "BP_CCH_VM1_I")
vl_CCH.vm2_i	= DB_CTRL_GET_TITLE@ (va_fenetre, "BP_CCH_VM2_I")
vl_CCH.vr_i	= DB_CTRL_GET_TITLE@ (va_fenetre, "BP_CCH_VR_I")

vl_CCH.vr	= DB_CTRL_GET_TITLE@ (va_fenetre, "BP_CCH_VR")
vl_CCH.vm2	= DB_CTRL_GET_TITLE@ (va_fenetre, "BP_CCH_VM2")
vl_CCH.vm1	= DB_CTRL_GET_TITLE@ (va_fenetre, "BP_CCH_VM1")
vl_CCH.vl	= DB_CTRL_GET_TITLE@ (va_fenetre, "BP_CCH_VL")
vl_CCH.bau	= DB_CTRL_GET_TITLE@ (va_fenetre, "BP_CCH_BAU")

IF (DB_CTRL_GET_VALUE@ (va_fenetre, "BA_Precipitations") = TRUE) {
	vl_CCH.precipitations = CM_CCH_PRECIPIT_OUI
} ELSE {
	vl_CCH.precipitations = CM_CCH_PRECIPIT_NON
}


/*A Verifier la validité des valeurs saisies */
IF IS_NULL@ (vl_pr_debut)  OR  IS_NULL@ (vl_pr_fin)
{
	INFO_MESSAGE@ ("Veuillez saisir les PR délimitant la zone")
	RETURN (COM_NOK)
}

/* DEM1076 : Suppression de la vérification 
IF NOT ( (vl_pr_debut >= vl_pr_min)  AND  (vl_pr_debut <= vl_pr_max)  AND
         (vl_pr_fin >= vl_pr_min)  AND  (vl_pr_fin <= vl_pr_max) )
{
	INFO_MESSAGE@ ("La zone définie doit se situer à l'intérieur de celle de l'événement")
	RETURN (COM_NOK)
}*/

IF (vl_pr_debut + 0 = vl_pr_fin + 0)
{
	INFO_MESSAGE@ ("L'étendue de la zone est nulle !")
	RETURN (COM_NOK)
}

/*A Inverser les PR de la zone s'ils ne sont pas dans l'ordre du sens 1 de l'autoroute */
IF ( (va_ordre_pr = XDC_PR_NOR) AND (vl_pr_debut > vl_pr_fin) )  OR
   ( (va_ordre_pr = XDC_PR_INV) AND (vl_pr_debut < vl_pr_fin) )
{
	vl_pr = vl_pr_debut
	vl_pr_debut = vl_pr_fin
	vl_pr_fin = vl_pr
}

vl_CCH.PR_debut	= COM31_Libelle_PR (vl_pr_debut * 1000)
vl_CCH.PR_fin	= COM31_Libelle_PR (vl_pr_fin * 1000)

/*A controler les voies medianes */
/*
IF (vl_cch.vm1_i = CM_CCH_LIB_NR  AND  vl_cch.vm2_i <> CM_CCH_LIB_NR)  OR
   (vl_cch.vm1 = CM_CCH_LIB_NR  AND  vl_cch.vm2 <> CM_CCH_LIB_NR)
{
	INFO_MESSAGE@ ("Voie médiane 1 non renseignée")
	RETURN (COM_NOK)
}
*/


/*A Ajouter la zone saisie a sa place dans la table des Conditions de Conduite */
tl_CCH = DB_TABLE_GET_DATA@ (va_fenetre, "TA_CCH")
vl_index = NULL
k = 0
WHILE IS_NULL@ (vl_index)
	IF k = ARRAY_SIZE@ (tl_CCH)
		vl_index = k
	ELSE IF ( (va_ordre_pr = XDC_PR_NOR) AND (vl_pr_debut >= tl_CCH[k].PR_debut) )  OR
	        ( (va_ordre_pr = XDC_PR_INV) AND (vl_pr_debut <= tl_CCH[k].PR_debut) )
		k = k + 1
	ELSE
		vl_index = k
WEND
DB_TABLE_SET_DATA@ (va_fenetre, "TA_CCH", ARRAY_INSERT@ (tl_CCH, vl_CCH, vl_index), tm_titres_CCH, NULL)
DB_TABLE_SET_SELECTIONS@ (va_fenetre, "TA_CCH", { vl_index })

RETURN (COM_OK)

ENDMACRO





/*X*/
/* ---------------------------------------------------------------------------------
* SERVICE RENDU :
*
*  Supprime de la table des Conditions de Conduite Hivernale
*  la ligne actuellement selectionnee.
*
------------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TMC_met_Supprimer_CCH (va_fenetre)

VAR	tl_CCH
VAR	tl_select
VAR	vl_index

tl_select = DB_TABLE_GET_SELECTIONS@ (va_fenetre, "TA_CCH")
IF NOT IS_NULL@ (tl_select[0])
{
	tl_CCH = DB_TABLE_GET_DATA@ (va_fenetre, "TA_CCH")
	tl_CCH = ARRAY_DELETE@ (tl_CCH, tl_select[0])
	DB_TABLE_SET_DATA@ (va_fenetre, "TA_CCH", tl_CCH, tm_titres_CCH, NULL)
	DB_TABLE_SET_SELECTIONS@ (va_fenetre, "TA_CCH", NULL)
}

ENDMACRO





/*X*/
/* ---------------------------------------------------------------------------------
* SERVICE RENDU :
*
*  Donne à un champ de saisie de condition de conduite sur une voie
*  la valeur suivant celle qui est proposée actuellement.
*
------------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TMC_met_Voie_CCH (va_fenetre, va_bouton_voie)

VAR	vl_idx, vl_val

vl_val = DB_CTRL_GET_TITLE@ (va_fenetre, va_bouton_voie)
vl_idx = COM45_IndexEnColonne (tm_Config_CCH, TDO_DICO_VAL, vl_val)
vl_idx = vl_idx + 1
IF (vl_idx >= ARRAY_SIZE@ (tm_Config_CCH))
{
	vl_idx = 0
}

DB_CTRL_TITLE@ (va_fenetre, va_bouton_voie, tm_Config_CCH[vl_idx].valeur)

ENDMACRO





/*X*/
/* ---------------------------------------------------------------------------------
* SERVICE RENDU :
*
*  Value les champs de saisie des Conditions de Conduite Hivernale
*  avec les valeurs de la ligne selectionnee de l'une des tables CCH.
*
------------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TMC_met_Selection_CCH (va_fenetre, va_table)

VAR	FORMAT TMC_MET_CCH	tl_CCH

VAR	tl_select
VAR	vl_idx

tl_CCH = DB_TABLE_GET_DATA@ (va_fenetre, va_table)
tl_select = DB_TABLE_GET_SELECTIONS@ (va_fenetre, va_table)
vl_idx = tl_select[0]

DB_CTRL_VALUE@ (va_fenetre, "BS_CCH_PR_Debut", tl_CCH[vl_idx].PR_debut)
DB_CTRL_VALUE@ (va_fenetre, "BS_CCH_PR_Fin", tl_CCH[vl_idx].PR_fin)

DB_CTRL_TITLE@ (va_fenetre, "BP_CCH_BAU_I",	tl_CCH[vl_idx].bau_i)
DB_CTRL_TITLE@ (va_fenetre, "BP_CCH_VL_I",	tl_CCH[vl_idx].vl_i)
DB_CTRL_TITLE@ (va_fenetre, "BP_CCH_VM1_I",	tl_CCH[vl_idx].vm1_i)
DB_CTRL_TITLE@ (va_fenetre, "BP_CCH_VM2_I",	tl_CCH[vl_idx].vm2_i)
DB_CTRL_TITLE@ (va_fenetre, "BP_CCH_VR_I",	tl_CCH[vl_idx].vr_i)
DB_CTRL_TITLE@ (va_fenetre, "BP_CCH_VR",	tl_CCH[vl_idx].vr)
DB_CTRL_TITLE@ (va_fenetre, "BP_CCH_VM2",	tl_CCH[vl_idx].vm2)
DB_CTRL_TITLE@ (va_fenetre, "BP_CCH_VM1",	tl_CCH[vl_idx].vm1)
DB_CTRL_TITLE@ (va_fenetre, "BP_CCH_VL",	tl_CCH[vl_idx].vl)
DB_CTRL_TITLE@ (va_fenetre, "BP_CCH_BAU",	tl_CCH[vl_idx].bau)

IF (tl_CCH[vl_idx].precipitations = CM_CCH_PRECIPIT_OUI) {
	DB_CTRL_VALUE@ (va_fenetre, "BA_Precipitations", TRUE)
} ELSE {
	DB_CTRL_VALUE@ (va_fenetre, "BA_Precipitations", FALSE)
}

ENDMACRO





/*X*/
/* ---------------------------------------------------------------------------------
* SERVICE RENDU :
*
*  Lit en base et affiche les données de conditions de conduite a une date donnee.
*
------------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

/*B Format des donnees lues en base */
FORMAT	TMC_MET_Donnees_CCH
	num_evt,
	cle_evt,
	horodate,
	autoroute,
	PR_debut,
	PR_fin,
	vr,
	vm2,
	vm1,
	vl,
	bau,
	vr_i,
	vm2_i,
	vm1_i,
	vl_i,
	bau_i,
	precipitations,
	site


MACRO ITMA_TMC_met_Lire_CCH (va_fenetre, FORMAT COM_Identifiant_FMC ta_num_evt, va_horodate)

/*
* ARGUMENTS EN ENTREE :
*  va_fenetre         : Id de la boite de dialogue
*  ta_num_evt         : numero et cle d'evenement
*  va_horodate        : date des donnees recherchees
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : XDC_OK si l'operation est correcte, XDC_NOK sinon.
*
* CONDITION D'UTILISATION
*   MTMC
*
* FONCTION
--------------------------------------------------------------------------------- */

VAR	FORMAT SQL_Procedure_Params@	vl_parametres
VAR	FORMAT SQL_Procedure_Result@	vl_resultats

VAR	FORMAT TMC_MET_Donnees_CCH	tl_data
VAR	FORMAT TMC_MET_CCH		tl_CCH
VAR	vl_precipitations
VAR	i

/*A
** En cas d'erreur informer l'operateur, tracer et abandonner
** ----------------------------------------------------------
*/

ON ERROR
{
	ERROR_BOX@
	COM01_Trace (COM_WARNING, COM03_Message_Erreur (CM_MODULE))
	RETURN (COM_NOK)
}


/*A Lire en base les donnees de l'evenement a la date indiquee */
vl_parametres = COM15_Parametres_Requete ( {
	{ FALSE,	SYB#DATETIME_,		va_horodate },
	{ FALSE,	SYB#INT4_,		ta_num_evt.numero },
	{ FALSE,	SYB#INT1_,		ta_num_evt.cle }
} )

IF COM05_SQL_Procedure (XZAE76_Lire_Conditions_Conduite,
			   vl_parametres, vl_resultats, CM_MODULE) <> COM_OK
{
	INFO_MESSAGE@ ("Erreur lors de la lecture en base des conditions de conduite")
	RETURN (COM_NOK)
}
tl_data = vl_resultats.select_results[0]


/*A Afficher les donnees dans la table des conditions de conduite precedentes */
FOR i = 0  TO (ARRAY_SIZE@ (tl_data) - 1)
	tl_CCH[i].PR_debut	= COM31_Libelle_PR (tl_data[i].PR_debut)
	tl_CCH[i].PR_fin	= COM31_Libelle_PR (tl_data[i].PR_fin)

	tl_CCH[i].bau_i	= tm_Config_CCH[ITMA_TMC_met_Index_CCH (tl_data[i].bau_i)].valeur
	tl_CCH[i].vl_i	= tm_Config_CCH[ITMA_TMC_met_Index_CCH (tl_data[i].vl_i)].valeur
	tl_CCH[i].vm1_i	= tm_Config_CCH[ITMA_TMC_met_Index_CCH (tl_data[i].vm1_i)].valeur
	tl_CCH[i].vm2_i	= tm_Config_CCH[ITMA_TMC_met_Index_CCH (tl_data[i].vm2_i)].valeur
	tl_CCH[i].vr_i	= tm_Config_CCH[ITMA_TMC_met_Index_CCH (tl_data[i].vr_i)].valeur

	tl_CCH[i].vr	= tm_Config_CCH[ITMA_TMC_met_Index_CCH (tl_data[i].vr)].valeur
	tl_CCH[i].vm2	= tm_Config_CCH[ITMA_TMC_met_Index_CCH (tl_data[i].vm2)].valeur
	tl_CCH[i].vm1	= tm_Config_CCH[ITMA_TMC_met_Index_CCH (tl_data[i].vm1)].valeur
	tl_CCH[i].vl	= tm_Config_CCH[ITMA_TMC_met_Index_CCH (tl_data[i].vl)].valeur
	tl_CCH[i].bau	= tm_Config_CCH[ITMA_TMC_met_Index_CCH (tl_data[i].bau)].valeur

	IF (tl_data[i].precipitations = XDC_VRAI) {
		tl_CCH[i].precipitations = CM_CCH_PRECIPIT_OUI
	} ELSE {
		tl_CCH[i].precipitations = CM_CCH_PRECIPIT_NON
	}
NEXT i


DB_TABLE_SET_DATA@ (va_fenetre, "TA_CCH_Prec", tl_CCH, tm_titres_CCH, NULL)
DB_TABLE_SET_DATA@ (va_fenetre, "TA_CCH", tl_CCH, tm_titres_CCH, NULL)

RETURN (COM_OK)

ENDMACRO





/*X*/
/* ---------------------------------------------------------------------------------
* SERVICE RENDU :
*
*  Ecrit en base les données de conditions de conduite pour une Fmc de TYPE Meteo
*
------------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TMC_met_Ecrire_CCH (FORMAT COM_Identifiant_FMC ta_num_evt,
                                  va_mode, va_horodate, va_fenetre)

/*
* ARGUMENTS EN ENTREE :
*  ta_num_evt         : numero et cle d'evenement
*  va_tampon          : valeurs des champs specifiques
*  va_mode            : prevision, traiter, clos
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : XDC_OK si l'operation est correcte, XDC_NOK sinon.
*
* CONDITION D'UTILISATION
*   MTMC
*
* FONCTION
--------------------------------------------------------------------------------- */

VAR	FORMAT SQL_Procedure_Params@	vl_parametres
VAR	FORMAT SQL_Procedure_Result@	vl_resultats

VAR	FORMAT	TMC_MET_CCH	tl_CCH
VAR	vl_precipitations
VAR	vl_poste_oper
VAR	i

/*A
** En cas d'erreur informer l'operateur, tracer et abandonner
** ----------------------------------------------------------
*/

ON ERROR
{
	ERROR_BOX@
	COM01_Trace (COM_WARNING, COM03_Message_Erreur (CM_MODULE))
	RETURN (COM_NOK)
}

tl_CCH = DB_TABLE_GET_DATA@ (va_fenetre, "TA_CCH")

IF (SYSTEM_VAR@(vg_surcharge)=TRUE) {
	vl_poste_oper=SYSTEM_VAR@(vg_numero_poste_surcharge)
} ELSE {
	vl_poste_oper=SYSTEM_VAR@(vg_numero_poste)
}


/*A Ecrire en base les donnees de chacune des zones de conditions de conduite */
FOR i = 0  TO (ARRAY_SIZE@ (tl_CCH) - 1)
	IF (tl_CCH[i].precipitations = CM_CCH_PRECIPIT_OUI) {
		vl_precipitations = XDC_VRAI
	} ELSE {
		vl_precipitations = XDC_FAUX
	}

	vl_parametres = COM15_Parametres_Requete ( {
		{ FALSE,	SYB#INT4_,		ta_num_evt.numero },
		{ FALSE,	SYB#INT1_,		ta_num_evt.cle },
		{ FALSE,	SYB#DATETIME_,		va_horodate },
		{ FALSE,	SYB#INT1_,		(i + 1) },
		{ FALSE,	SYB#INT4_,		(tl_CCH[i].PR_debut * 1000) },
		{ FALSE,	SYB#INT4_,		(tl_CCH[i].PR_fin * 1000) },
		{ FALSE,	SYB#INT1_,		ITMA_TMC_met_Valeur_CCH (tl_CCH[i].vr) },
		{ FALSE,	SYB#INT1_,		ITMA_TMC_met_Valeur_CCH (tl_CCH[i].vm2) },
		{ FALSE,	SYB#INT1_,		ITMA_TMC_met_Valeur_CCH (tl_CCH[i].vm1) },
		{ FALSE,	SYB#INT1_,		ITMA_TMC_met_Valeur_CCH (tl_CCH[i].vl) },
		{ FALSE,	SYB#INT1_,		ITMA_TMC_met_Valeur_CCH (tl_CCH[i].bau) },
		{ FALSE,	SYB#INT1_,		ITMA_TMC_met_Valeur_CCH (tl_CCH[i].vr_i) },
		{ FALSE,	SYB#INT1_,		ITMA_TMC_met_Valeur_CCH (tl_CCH[i].vm2_i) },
		{ FALSE,	SYB#INT1_,		ITMA_TMC_met_Valeur_CCH (tl_CCH[i].vm1_i) },
		{ FALSE,	SYB#INT1_,		ITMA_TMC_met_Valeur_CCH (tl_CCH[i].vl_i) },
		{ FALSE,	SYB#INT1_,		ITMA_TMC_met_Valeur_CCH (tl_CCH[i].bau_i) },
		{ FALSE,	SYB#INT1_,		vl_precipitations },
		{ FALSE,	SYB#INT2_,		vl_poste_oper },
		{ FALSE,	SYB#INT1_,		va_mode },
		{ FALSE,	SYB#CHAR_,		SYSTEM_VAR@(vg_nom_site) }
	} )

	IF COM05_SQL_Procedure (XZAE77_Ecrire_Conditions_Conduite,
	                           vl_parametres, vl_resultats, CM_MODULE) <> COM_OK
	{
		INFO_MESSAGE@ ("Erreur lors de l'écriture en base des conditions de conduite")
		RETURN (COM_NOK)
	}

	IF (vl_resultats.status <> COM_OK)
	{
		IF (vl_resultats.status <> XZAEC_FMC_PAS_ENR) AND
		   (vl_resultats.status <> XZAEC_FMC_CLOSE_PAS_ENR)
		{
			INFO_MESSAGE@ ("Erreur lors de l'écriture en base des conditions de conduite")
		}
		RETURN (vl_resultats.status)
	}
NEXT i

RETURN (COM_OK)

ENDMACRO





/*X*/
/* ---------------------------------------------------------------------------------
* SERVICE RENDU :
*
*  Effectue les controles des conditions de conduite pour une Fmc de TYPE Meteo
*
------------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TMC_met_Controle_CCH (va_fenetre, va_pr_deb_fmc, va_pr_fin_fmc, va_ordre_pr)

/*
* ARGUMENTS EN ENTREE :
*  va_fenetre         : Id de la boite de dialogue
*  va_pr_deb_fmc      : PR de l'evenement
*  va_pr_fin_fmc      : PR de fin de l'evenement
*  va_ordre_pr        : Ordre des PR sur l'autoroute
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : XDC_OK si les donnees sont correctes, XDC_NOK sinon.
*
* CONDITION D'UTILISATION
*   MTMC
*
* FONCTION
*
--------------------------------------------------------------------------------- */

VAR	FORMAT	TMC_MET_CCH	tl_CCH
VAR	vl_premier_pr, vl_dernier_pr
VAR	i

tl_CCH = DB_TABLE_GET_DATA@ (va_fenetre, "TA_CCH")
IF ARRAY_SIZE@ (tl_CCH) = 0 {
	RETURN (COM_OK)
}


/*A Verifier que les zones definies ne se chevauchent pas */
FOR i = 1  TO (ARRAY_SIZE@ (tl_CCH) - 1)
	IF (i > 0) {
		IF ( (va_ordre_pr = XDC_PR_NOR)  AND  (tl_CCH[i - 1].PR_fin > tl_CCH[i].PR_debut) )  OR
		   ( (va_ordre_pr = XDC_PR_INV)  AND  (tl_CCH[i - 1].PR_fin < tl_CCH[i].PR_debut) )
		{
			INFO_MESSAGE@ ("Les zones de conditions de conduite ne doivent pas se chevaucher")
			DB_TABLE_SET_SELECTIONS@ (va_fenetre, "TA_CCH", { i })
			RETURN (COM_NOK)
		}
	}
NEXT i


/*A Verifier que les zones definies sont a l'intérieur de celle de l'événement */
/*A DEM1076 : Suppression de la vérification 
vl_premier_pr = tl_CCH[0].PR_debut * 1000
vl_dernier_pr = tl_CCH[ARRAY_SIZE@ (tl_CCH) - 1].PR_fin * 1000

IF ( (vl_premier_pr < va_pr_deb_fmc  AND  vl_premier_pr < va_pr_fin_fmc) OR
     (vl_premier_pr > va_pr_deb_fmc  AND  vl_premier_pr > va_pr_fin_fmc) OR
     (vl_dernier_pr < va_pr_deb_fmc  AND  vl_dernier_pr < va_pr_fin_fmc) OR
     (vl_dernier_pr > va_pr_deb_fmc  AND  vl_dernier_pr > va_pr_fin_fmc) )
{
	INFO_MESSAGE@ ("Les zones de conditions de conduite doivent se situer à l'intérieur de celle de l'événement")
	RETURN (COM_NOK)
}*/

RETURN (COM_OK)

ENDMACRO





/*X*/
/* ---------------------------------------------------------------------------------
* SERVICE RENDU :
*
*  Verifier si des dernieres conditions de conduite saisies et validees
*  ne contiennent que des valeurs de conditions de conduite normales.
*
------------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TMC_met_Retour_Normale (va_fenetre)

/*
* ARGUMENTS EN ENTREE :
*  va_fenetre         : Id de la boite de dialogue
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : XDC_VRAI en cas de retour a la normale, XDC_FAUX sinon.
*
* CONDITION D'UTILISATION
*   MTMC
*
* FONCTION
*
--------------------------------------------------------------------------------- */

VAR	FORMAT	TMC_MET_CCH	tl_CCH
VAR	tl_voies, tl_voies_pb
VAR	i

IF (ITMA_TMC_met_nature_CCH (va_fenetre, vm_type_fmc) <> XDC_VRAI)
{
	RETURN (XDC_VRAI)
}

/*A Verifier dans les dernieres conditions de conduite validées  */
/*A que les voies de toutes les zones sont en condition C1 ou NR */
tl_CCH = DB_TABLE_GET_DATA@ (va_fenetre, "TA_CCH_Prec")
FOR i = 0  TO (ARRAY_SIZE@ (tl_CCH) - 1)
	tl_voies = {
		{ tl_CCH[i].vr, NULL },
		{ tl_CCH[i].vm2, NULL },
		{ tl_CCH[i].vm1, NULL },
		{ tl_CCH[i].vl, NULL },
		{ tl_CCH[i].bau, NULL },
		{ tl_CCH[i].vr_i, NULL },
		{ tl_CCH[i].vm2_i, NULL },
		{ tl_CCH[i].vm1_i, NULL },
		{ tl_CCH[i].vl_i, NULL },
		{ tl_CCH[i].bau_i, NULL }
	}
	tl_voies_pb = COM44_ValeursEnColonne (tl_voies, 0, { CM_CCH_LIB_NR, XZAEC_CCH_LIB_C1 }, FALSE)
	IF ARRAY_SIZE@ (tl_voies_pb) > 0
	{
		RETURN (XDC_FAUX)
	}
NEXT i

RETURN (XDC_VRAI)

ENDMACRO
