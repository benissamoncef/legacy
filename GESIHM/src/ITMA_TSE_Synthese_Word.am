/*E*/
/*  Fichier : $Id: ITMA_TSE_Synthese_Word.am,v 1.4 2010/07/05 11:10:59 gesconf Exp $        Release : $Revision: 1.4 $        Date : $Date: 2010/07/05 11:10:59 $
-------------------------------------------------------------------------
* STERIA *  PROJET MIGRAZUR
-------------------------------------------------------------------------
* SOUS-SYSTEME  GESIHM
-------------------------------------------------------------------------
* MODULE ITMA_TSE * FICHIER ITMA_TSE_Synthese_Word.am
-------------------------------------------------------------------------
* DESCRIPTION DU MODULE :
* Affiche la synthèse d'une fiche main courante
*
*   Cf. DCG 2.4.65
*
-------------------------------------------------------------------------
* HISTORIQUE :
*
* Guilhou 09/01/02	creation
* JPL	25/05/09	Adaptation aux codes de retour de Xzae02... sans consequence 1.2
* JPL	02/06/09	Homogene aux autres modules de synthese 1.3
* PNI		5/07/10	: Prise en compte d'u paramètre supplémentaire de xzae02 (DEM940) 1.4
---------------------------------------------------------------------- */

INCLUDE	"dbase_.am"
INCLUDE	"wp_.am"
INCLUDE	"../inc/ITMA_COM.h"
INCLUDE	"../inc/ITMA_TDO.h"
INCLUDE	"../inc/ITMA_TAR.h"
INCLUDE	"../../XDMICG/inc/xdc_ax.h"
INCLUDE	"../../XDMICG/inc/xzaec_ax.h"
INCLUDE	"../inc/xzae02sp.h"
INCLUDE	"../../XDMICG/inc/xzic_ax.h"


DEFINE	C_MODULE	"MTSE"			' Nom du module



/*A
 * Definition des images digitalisees visualisant les configurations de voies
 * --------------------------------------------------------------------------
 */

DEFINE	C_PICTO_INEXISTANT		"\\i(pix_neutre_16_16)"			' Pour cadrage
DEFINE	C_PICTO_BAU_NORMALE		"\\i(pix_cadre_16_16)"
DEFINE	C_PICTO_VOIE_BLOQUEE	"\\i(pix_croix_rouge_16_16)"
DEFINE	C_PICTO_NEUTRALISEE		"\\i(pix_balise_16_16)"
DEFINE	C_PICTO_BLOQ_NEUTRALISE	"\\i(pix_balise_barree_16_16)"
DEFINE	C_PICTO_VOIE_NORMALE	"\\i(pix_fleche_haut_verte_16_16)"
DEFINE	C_PICTO_VOIE_INVERSE	"\\i(pix_fleche_bas_bleue_16_16)"
DEFINE	C_PICTO_VOIE_I_NORMALE	"\\i(pix_fleche_bas_verte_16_16)"
DEFINE	C_PICTO_VOIE_I_INVERSE	"\\i(pix_fleche_haut_bleue_16_16)"
DEFINE	C_PICTO_ETROIT_INEXISTANT	"\\i(pix_etroit_neutre_16_16)"	' Pour cadrage
DEFINE	C_PICTO_ETROIT_BAU_NORMALE	"\\i(pix_etroit_cadre_16_16)"
DEFINE	C_PICTO_ETROIT_VOIE_BLOQUEE	"\\i(pix_etroit_croix_rouge_16_16)"
DEFINE	C_PICTO_ETROIT_NEUTRALISEE	"\\i(pix_etroit_balise_16_16)"
DEFINE	C_PICTO_ETROIT_BLOQ_NEUTRALISE	"\\i(pix_etroit_balise_barree_16_16)"
DEFINE	C_PICTO_ETROIT_VOIE_NORMALE	"\\i(pix_etroit_fleche_haut_verte_16_16)"
DEFINE	C_PICTO_ETROIT_VOIE_INVERSE	"\\i(pix_etroit_fleche_bas_bleue_16_16)"
DEFINE	C_PICTO_ETROIT_VOIE_I_NORMALE	"\\i(pix_etroit_fleche_bas_verte_16_16)"
DEFINE	C_PICTO_ETROIT_VOIE_I_INVERSE	"\\i(pix_etroit_fleche_haut_bleue_16_16)"

DEFINE	C_PICTO_SEPARATION		"\\i(pix_barreV_neutre_16_16)"

DEFINE	W_PICTO_INEXISTANT		" "			' Pour cadrage
DEFINE	W_PICTO_BAU_NORMALE		" bn "
DEFINE	W_PICTO_VOIE_BLOQUEE	" B "
DEFINE	W_PICTO_NEUTRALISEE		" N "
DEFINE	W_PICTO_BLOQ_NEUTRALISE	" BN "
DEFINE	W_PICTO_VOIE_NORMALE	" L "
DEFINE	W_PICTO_VOIE_INVERSE	" I "
DEFINE	W_PICTO_VOIE_I_NORMALE	" N "
DEFINE	W_PICTO_VOIE_I_INVERSE	" I "

DEFINE	W_PICTO_ETROIT_INEXISTANT		" "			' Pour cadrage
DEFINE	W_PICTO_ETROIT_BAU_NORMALE		" bn "
DEFINE	W_PICTO_ETROIT_VOIE_BLOQUEE	" B "
DEFINE	W_PICTO_ETROIT_NEUTRALISEE		" N "
DEFINE	W_PICTO_ETROIT_BLOQ_NEUTRALISE	" BN "
DEFINE	W_PICTO_ETROIT_VOIE_NORMALE	" L "
DEFINE	W_PICTO_ETROIT_VOIE_INVERSE	" I "
DEFINE	W_PICTO_ETROIT_VOIE_I_NORMALE	" N "
DEFINE	W_PICTO_ETROIT_VOIE_I_INVERSE	" I "

DEFINE	W_PICTO_SEPARATION		"||"

DEFINE	W_LIGNE		"-------------------------------------------------------------------------------------------"
DEFINE	C_LIGNE		"--------------------------------------------------------------------------------------------------------------------------------------------"

DEFINE	C_MODELE_SYNTHESE	"ITMA_TSE_Synthese_Evt"	' Modele d'impression
DEFINE	C_SOUS_REP_MODELES	COM_SOUS_REP_IHM		' Repertoire des modeles

/*A
 * position des infos des picto des pmv lus dans le fichier de config
 * ------------------------------------------------------------------
 */
DEFINE	C_TRIGRAM_PICTO_PMV	3		' position du trigramme dans structure
DEFINE	C_FICHIER_PICTO_PMV	1		' position du fichier du picto dans structure
DEFINE	C_LIBELLE_PICTO_PMV	4		' position du libelle du picto dans structure

/*A
 * position des infos de la synthese
 * ---------------------------------
 */
DEFINE	C_COL_BAU		6
DEFINE	C_COL_BAU_I	11

FORMAT TSE_Synthese
	libelle,
	horodate,
	vr,
	vm2,
	vm1,
	vl,
	bau,
	vr_i,
	vm2_i,
	vm1_i,
	vl_i,
	bau_i,
	bau_etroite,
	bau_i_etroite,
	picto



VAR vm_l_picto_voies						' Liste de pictos des voies normales
VAR vm_l_picto_voies_i						' Liste de pictos des voies inverses

VAR vm_mode_liste_fmc
VAR vm_modif_autorisee

VAR tm_pictos,tm_pictos_i
VAR tm_picto_pmv

VAR vm_appel_pcs


/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
* afficher la synthèse d'une fiche main courante
*
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TSE_Synthese_Word (va_appelant,ta_args)

/*
* ARGUMENTS EN ENTREE :
* ta_numero_fiche: numero de la fiche main courante
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : 
*
* CONDITION D'UTILISATION
*   MTMC
*
* FONCTION
*
---------------------------------------------------------------------------- */

	VAR vl_fenetre
	VAR vl_exit_value
	VAR tl_messages_acceptes
	VAR vl_installer_traitement_erreur

	VAR FORMAT TSE_Synthese tl_synthese
	VAR FORMAT TSE_Synthese tl_nouv_synthese
	VAR vl_horodate
	VAR vl_fichier, vl_fichier_config_picto_pmv
	VAR vl_cmd, vl_params
	VAR vl_liste, vl_sel, i, j
	VAR vl_indice,vl_picto
	VAR vl_index
	VAR FORMAT TSE_Synthese tl_commentaire
	VAR tl_lignes
	VAR tm_tab
	VAR vl_repertoire_picto_pmv
	VAR vl_site_local
	VAR vl_enrichir
	VAR vl_etat
	VAR va_numero,va_cle,vl_fichier2
/*A
 * Traitements en cas d'erreur durant l'initialisation :
 * informer l'operateur, tracer l'erreur et abandonner
 * -----------------------------------------------------
 */

/*ON ERROR {
    RETURN
}
*/

  vm_appel_pcs=FALSE
va_numero=ta_args[0]
va_cle=ta_args[1]


/*A
 * Initialiser les tables de pictogrammes de configuration des picto des pmv
 * -------------------------------------------------------------------------
 */
vl_repertoire_picto_pmv=SYSTEM_VAR@(vg_repertoire_migrazur) ++ COM_SOUS_REP_PICTOS 
vl_fichier_config_picto_pmv=SYSTEM_VAR@(vg_repertoire_migrazur) ++ COM_SOUS_REP_PMV ++ COM_FICH_CONFIG_PICTO
IF FILE_EXISTS@(vl_fichier_config_picto_pmv) = TRUE
{
	tl_lignes = READ_ASCII_FILE@(vl_fichier_config_picto_pmv)
	tl_lignes = ARRAY_DELETE@(tl_lignes, 0)
	FOR i=0 TO ARRAY_SIZE@(tl_lignes)- 1
		tm_tab = ARRAY_FROM_STRING@(tl_lignes[i],",")
		FOR j=0 TO ARRAY_SIZE@(tm_tab)- 1
			tm_picto_pmv[i][j] = TRIM@(TABS_TO_SPACES@( tm_tab[j]))
		NEXT j
	NEXT i
}
ELSE tm_picto_pmv = NULL

/*A
 * Initialiser les tables de pictogrammes de configuration des voies
 * -----------------------------------------------------------------
 */

vm_l_picto_voies[XDC_VOIE_SENS_NORMAL] = C_PICTO_VOIE_NORMALE
vm_l_picto_voies[XDC_VOIE_SENS_INVERSE] = C_PICTO_VOIE_INVERSE
vm_l_picto_voies[XDC_VOIE_BLOQUEE] = C_PICTO_VOIE_BLOQUEE
vm_l_picto_voies[XDC_VOIE_NEUTRALISEE] = C_PICTO_NEUTRALISEE
vm_l_picto_voies[XDC_VOIE_BLOQUEE_NEUTRALISEE] = C_PICTO_BLOQ_NEUTRALISE
vm_l_picto_voies[XDC_VOIE_BAU_NORMALE] = C_PICTO_BAU_NORMALE

vm_l_picto_voies[XDC_VOIE_SENS_NORMAL + XDC_VOIE_BAU_ETROITE] = C_PICTO_ETROIT_VOIE_NORMALE
vm_l_picto_voies[XDC_VOIE_SENS_INVERSE + XDC_VOIE_BAU_ETROITE] = C_PICTO_ETROIT_VOIE_INVERSE
vm_l_picto_voies[XDC_VOIE_BLOQUEE + XDC_VOIE_BAU_ETROITE] = C_PICTO_ETROIT_VOIE_BLOQUEE
vm_l_picto_voies[XDC_VOIE_NEUTRALISEE + XDC_VOIE_BAU_ETROITE] = C_PICTO_ETROIT_NEUTRALISEE
vm_l_picto_voies[XDC_VOIE_BLOQUEE_NEUTRALISEE + XDC_VOIE_BAU_ETROITE] = C_PICTO_ETROIT_BLOQ_NEUTRALISE
vm_l_picto_voies[XDC_VOIE_BAU_NORMALE + XDC_VOIE_BAU_ETROITE] = C_PICTO_ETROIT_BAU_NORMALE

vm_l_picto_voies_i[XDC_VOIE_SENS_NORMAL] = C_PICTO_VOIE_I_NORMALE
vm_l_picto_voies_i[XDC_VOIE_SENS_INVERSE] = C_PICTO_VOIE_I_INVERSE
vm_l_picto_voies_i[XDC_VOIE_BLOQUEE] = C_PICTO_VOIE_BLOQUEE
vm_l_picto_voies_i[XDC_VOIE_NEUTRALISEE] = C_PICTO_NEUTRALISEE
vm_l_picto_voies_i[XDC_VOIE_BLOQUEE_NEUTRALISEE] = C_PICTO_BLOQ_NEUTRALISE
vm_l_picto_voies_i[XDC_VOIE_BAU_NORMALE] = C_PICTO_BAU_NORMALE

vm_l_picto_voies_i[XDC_VOIE_SENS_NORMAL + XDC_VOIE_BAU_ETROITE] = C_PICTO_ETROIT_VOIE_I_NORMALE
vm_l_picto_voies_i[XDC_VOIE_SENS_INVERSE + XDC_VOIE_BAU_ETROITE] = C_PICTO_ETROIT_VOIE_I_INVERSE
vm_l_picto_voies_i[XDC_VOIE_BLOQUEE + XDC_VOIE_BAU_ETROITE] = C_PICTO_ETROIT_VOIE_BLOQUEE
vm_l_picto_voies_i[XDC_VOIE_NEUTRALISEE + XDC_VOIE_BAU_ETROITE] = C_PICTO_ETROIT_NEUTRALISEE
vm_l_picto_voies_i[XDC_VOIE_BLOQUEE_NEUTRALISEE + XDC_VOIE_BAU_ETROITE] = C_PICTO_ETROIT_BLOQ_NEUTRALISE
vm_l_picto_voies_i[XDC_VOIE_BAU_NORMALE + XDC_VOIE_BAU_ETROITE] = C_PICTO_ETROIT_BAU_NORMALE


tm_pictos[XDC_VOIE_SENS_NORMAL] = W_PICTO_VOIE_NORMALE
tm_pictos[XDC_VOIE_SENS_INVERSE] = W_PICTO_VOIE_INVERSE
tm_pictos[XDC_VOIE_BLOQUEE] = W_PICTO_VOIE_BLOQUEE
tm_pictos[XDC_VOIE_NEUTRALISEE] = W_PICTO_NEUTRALISEE
tm_pictos[XDC_VOIE_BLOQUEE_NEUTRALISEE] = W_PICTO_BLOQ_NEUTRALISE
tm_pictos[XDC_VOIE_BAU_NORMALE] = W_PICTO_BAU_NORMALE

tm_pictos[XDC_VOIE_SENS_NORMAL + XDC_VOIE_BAU_ETROITE] = W_PICTO_ETROIT_VOIE_NORMALE
tm_pictos[XDC_VOIE_SENS_INVERSE + XDC_VOIE_BAU_ETROITE] = W_PICTO_ETROIT_VOIE_INVERSE
tm_pictos[XDC_VOIE_BLOQUEE + XDC_VOIE_BAU_ETROITE] = W_PICTO_ETROIT_VOIE_BLOQUEE
tm_pictos[XDC_VOIE_NEUTRALISEE + XDC_VOIE_BAU_ETROITE] = W_PICTO_ETROIT_NEUTRALISEE
tm_pictos[XDC_VOIE_BLOQUEE_NEUTRALISEE + XDC_VOIE_BAU_ETROITE] = W_PICTO_ETROIT_BLOQ_NEUTRALISE
tm_pictos[XDC_VOIE_BAU_NORMALE + XDC_VOIE_BAU_ETROITE] = W_PICTO_ETROIT_BAU_NORMALE

tm_pictos_i[XDC_VOIE_SENS_NORMAL] = W_PICTO_VOIE_I_NORMALE
tm_pictos_i[XDC_VOIE_SENS_INVERSE] = W_PICTO_VOIE_I_INVERSE
tm_pictos_i[XDC_VOIE_BLOQUEE] = W_PICTO_VOIE_BLOQUEE
tm_pictos_i[XDC_VOIE_NEUTRALISEE] = W_PICTO_NEUTRALISEE
tm_pictos_i[XDC_VOIE_BLOQUEE_NEUTRALISEE] = W_PICTO_BLOQ_NEUTRALISE
tm_pictos_i[XDC_VOIE_BAU_NORMALE] = W_PICTO_BAU_NORMALE

tm_pictos_i[XDC_VOIE_SENS_NORMAL + XDC_VOIE_BAU_ETROITE] = W_PICTO_ETROIT_VOIE_I_NORMALE
tm_pictos_i[XDC_VOIE_SENS_INVERSE + XDC_VOIE_BAU_ETROITE] = W_PICTO_ETROIT_VOIE_I_INVERSE
tm_pictos_i[XDC_VOIE_BLOQUEE + XDC_VOIE_BAU_ETROITE] = W_PICTO_ETROIT_VOIE_BLOQUEE
tm_pictos_i[XDC_VOIE_NEUTRALISEE + XDC_VOIE_BAU_ETROITE] = W_PICTO_ETROIT_NEUTRALISEE
tm_pictos_i[XDC_VOIE_BLOQUEE_NEUTRALISEE + XDC_VOIE_BAU_ETROITE] = W_PICTO_ETROIT_BLOQ_NEUTRALISE
tm_pictos_i[XDC_VOIE_BAU_NORMALE + XDC_VOIE_BAU_ETROITE] = W_PICTO_ETROIT_BAU_NORMALE


/*A
 * ligne de separation a ajouter
 *-------------------------------
 */
tl_commentaire.libelle=C_LIGNE
tl_commentaire.horodate=NULL
tl_commentaire.vr=XDC_VOIE_INCONNUE
tl_commentaire.vm1=XDC_VOIE_INCONNUE
tl_commentaire.vm2=XDC_VOIE_INCONNUE
tl_commentaire.vl=XDC_VOIE_INCONNUE
tl_commentaire.bau=XDC_VOIE_INCONNUE
tl_commentaire.vl_i=XDC_VOIE_INCONNUE
tl_commentaire.vm1_i=XDC_VOIE_INCONNUE
tl_commentaire.vm2_i=XDC_VOIE_INCONNUE
tl_commentaire.vr_i=XDC_VOIE_INCONNUE
tl_commentaire.bau_i=XDC_VOIE_INCONNUE

/*A
 * Recuperer la liste des fiches constituant la synthese et l'afficher
 * -------------------------------------------------------------------
 */

tl_synthese = ITMA_TSE_Recup_Synthese (va_numero,va_cle)

/* si pas de synthese : sortir */
IF IS_NULL@(tl_synthese)
	RETURN 

tl_nouv_synthese = tl_synthese
vl_index=0
FOR i = 0  TO ARRAY_SIZE@ (tl_synthese) - 1
	IF (tl_synthese[i].horodate <> NULL)
	IF (SUBSTRING@(tl_synthese[i].horodate,1,4) <> XDC_DATE_NULLE)
	{
		tl_nouv_synthese=ARRAY_INSERT@(tl_nouv_synthese, tl_commentaire, vl_index)
		vl_liste[vl_index]=C_LIGNE

		vl_index=vl_index+1

		/* supprimer la possibilite de selection de la ligne des consequences */
		/* de la cause dans la table */
		IF (STRING_INDEX@(tl_nouv_synthese[vl_index].libelle, XZAEC_SYN_CONSEQ) <> 0) OR (STRING_INDEX@(tl_nouv_synthese[vl_index].libelle, XZAEC_SYN_CAUSE) <> 0) OR (STRING_INDEX@(tl_nouv_synthese[vl_index].libelle, TRIM@(XZAEC_SYN_COM)) <> 0)
			tl_nouv_synthese[vl_index].horodate = NULL
	}
	IF TSE_Voies_Decrites (tl_synthese[i])
		vl_liste[vl_index] = TSE_Libelle_Evt_Et_Voies (tl_synthese[i])
	ELSE vl_liste[vl_index] = tl_synthese[i].libelle

	IF NOT IS_NULL@(tl_synthese[i].picto) AND (tl_synthese[i].picto<>NULL)
		vl_liste[vl_index] = TSE_Libelle_Evt_Picto_PMV (tl_synthese[i])
	vl_index=vl_index+1
NEXT i

tl_synthese = NULL
tl_synthese = tl_nouv_synthese

/*A Recuperation du site local */
vl_site_local = SYSTEM_VAR@(vg_site)

			/*B Ouvrir une fenetre ApplixWord non visible et charger le modele*/
			WP_APPLICATION_DLG@ (NULL, TRUE)
			WP_LOAD_FILE@ (SYSTEM_VAR@ (vg_repertoire_migrazur) ++
							C_SOUS_REP_MODELES ++ C_MODELE_SYNTHESE ++ ".aw")
			WP_SET_DOC_VAR@ ("evenement", va_numero ++ "/" ++ va_cle)
			WP_GOTO_END@()
			WP_TEXT_COURIER@()

			/*B Se positionner a la table et ecrire chacune des lignes */
			FOR i = 0  TO ARRAY_SIZE@ (tl_synthese) - 1
				IF (tl_synthese[i].horodate = NULL) AND (tl_synthese[i].libelle = C_LIGNE)
				{
					WP_ENTER_TEXT@(W_LIGNE)
					WP_ENTER_TEXT@ ("\n")
				}
				ELSE {
					/* ajouter une ligne vide avant la ligne de localisation de l'evt */
					IF TSE_Voies_Decrites (tl_synthese[i])
						WP_ENTER_TEXT@ ("\n")
					
					/* imprimer le libelle du picto du pmv */
					IF NOT IS_NULL@(tl_synthese[i].picto) AND (tl_synthese[i].picto<>NULL)
					{
						vl_picto = TSE_Libelle_picto_PMV(tl_synthese[i].picto)
						WP_ENTER_TEXT@ (tl_synthese[i].libelle++" "++vl_picto)
					}
					ELSE	WP_ENTER_TEXT@ (tl_synthese[i].libelle)

					/* imprimer la configuration des voies */
					IF TSE_Voies_Decrites (tl_synthese[i]) {
						WP_ENTER_TEXT@ ("	")
						FOR vl_indice=C_COL_BAU_I TO (C_COL_BAU+1) STEP -1
							IF (vl_indice=C_COL_BAU_I)
								vl_picto = tm_pictos_i[tl_synthese[i] 
										[vl_indice]+ XDC_VOIE_BAU_ETROITE * tl_synthese[i].bau_i_etroite]
							ELSE	vl_picto = tm_pictos_i[tl_synthese[i] 
												[vl_indice]]
							IF (vl_picto<>null)
								WP_ENTER_TEXT@(vl_picto)
							IF (vl_indice=C_COL_BAU_I)
								WP_ENTER_TEXT@("  ")	
						NEXT vl_indice

						WP_ENTER_TEXT@(W_PICTO_SEPARATION)

						FOR vl_indice=(C_COL_BAU-4) TO C_COL_BAU
							IF (vl_indice=C_COL_BAU)
								vl_picto = tm_pictos[tl_synthese[i] 
										[vl_indice] + XDC_VOIE_BAU_ETROITE * tl_synthese[i].bau_etroite]
							ELSE	vl_picto = tm_pictos[tl_synthese[i] 
												[vl_indice]]
							IF (vl_picto<>null)
								WP_ENTER_TEXT@(vl_picto)
							IF (vl_indice=C_COL_BAU-1)
								WP_ENTER_TEXT@("  ")	
						NEXT vl_indice
						WP_ENTER_TEXT@ ("\n")
					}
					WP_ENTER_TEXT@ ("\n")
				}
			NEXT i

			/*B Produire un fichier contenant le document en format PCL */
WP_SAVE_RENAME@("/tmp/synthese_aw.aw")
			vl_fichier = "/tmp/reponse_synthese.txt"
			vl_fichier2 = "/tmp/reponse_synthese2.txt"
			WP_EXPORT_ASCII_PARAS@(vl_fichier,FALSE)
FILTER_WP_TO_ASCII_PARAS@("/tmp/synthese_aw.aw", vl_fichier2)	
			WP_EXIT@()
			SHELL_COMMAND@("rcp /tmp/reponse_synthese.txt SSCI:/produits/migrazur/appliSD/fichiers/stra/nomade/out/reponse_synthese.txt")
			RETURN
ENDMACRO




/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
* recupere la liste des fiches constituant la synthese
*
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TSE_Recup_Synthese (va_numero,va_cle)

/*
* ARGUMENTS EN ENTREE :
* va_numero_fiche: numero de la fiche main courante
*
* ARGUMENTS EN SORTIE : Synthese de la fiche
*
*
* CODE RETOUR         : 
*
* CONDITION D'UTILISATION
*   MTMC
*
* FONCTION
*
---------------------------------------------------------------------------- */
VAR FORMAT SQL_Procedure_Params@ vl_parametres
VAR FORMAT SQL_Procedure_Result@ vl_resultats
VAR vl_msg,vl_canal, vl_site
ON ERROR return (NULL)

MACRO_WINS_BUSY@()

	vl_site = SYSTEM_VAR@(vg_site)

	vl_parametres[0].type = SYB#INT4_
	vl_parametres[0].data = va_numero
	vl_parametres[0].output = FALSE

	vl_parametres[1].type = SYB#INT4_
	vl_parametres[1].data = va_cle
	vl_parametres[1].output = FALSE

	vl_parametres[2].type=SYB#INT4_
	vl_parametres[2].output=TRUE

	vl_parametres[3].type=SYB#DATETIME_
	vl_parametres[3].output=TRUE

	vl_resultats = SQL_PROCEDURE@(SYSTEM_VAR@ (vg_canal_SGBD), XZAE02_Synthese_Fmc, vl_parametres)

	IF vl_resultats.status <> XDC_OK {
		RETURN (NULL)
	}

	RETURN (vl_resultats.select_results[0])

ENDMACRO




/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
*  Rechercher le libelle du picto d'une action PMV .
*
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO TSE_Libelle_Picto_PMV ( va_picto)

/*
* ARGUMENTS EN ENTREE :
*   va_picto            : trigramme du picto
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Le libelle representant le trigramme
*
* CONDITION D'UTILISATION
*   ITMA_TSE_Synthese_Evt
*
* FONCTION
*
---------------------------------------------------------------------------- */
	VAR	vl_index

vl_index = ARRAY_INDEX@(ARRAY_COLUMN@( tm_picto_pmv, C_TRIGRAM_PICTO_PMV), va_picto)

IF vl_index > -1
	RETURN (tm_picto_pmv[vl_index][C_LIBELLE_PICTO_PMV])
ELSE	RETURN (XDC_CHAINE_VIDE)

ENDMACRO




/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
* Construit et retourne le libelle d'une action PMV de l'evenement indique,  
* contenant le pictogramme d'un pmv.
*
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO TSE_Libelle_Evt_Picto_PMV (FORMAT TSE_Synthese ta_evt)

/*
* ARGUMENTS EN ENTREE :
*   ta_evt            : Informations evenement brutes (libelle, config. voies, picto)
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Le libelle construit
*
* CONDITION D'UTILISATION
*   ITMA_TSE_Synthese_Evt
*
* FONCTION
*
---------------------------------------------------------------------------- */
	VAR	vl_index

vl_index = ARRAY_INDEX@(ARRAY_COLUMN@( tm_picto_pmv, C_TRIGRAM_PICTO_PMV), ta_evt.picto)

IF vl_index > -1
	RETURN (FORMAT@ ("%-55s", ta_evt.libelle) ++ "\\i("++tm_picto_pmv[vl_index][C_FICHIER_PICTO_PMV]++")")
ELSE	RETURN (FORMAT@ ("%-55s", ta_evt.libelle))

ENDMACRO




/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
*  Construit et retourne le libelle de l'evenement indique, contenant les
*  pictogrammes de description des voies.
*
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO TSE_Libelle_Evt_Et_Voies (FORMAT TSE_Synthese ta_evt)

/*
* ARGUMENTS EN ENTREE :
*   ta_evt            : Informations evenement brutes (libelle, config. voies)
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Le libelle construit
*
* CONDITION D'UTILISATION
*   ITMA_TSE_Synthese_Evt
*
* FONCTION
*
---------------------------------------------------------------------------- */

	VAR	vl_voies
	VAR	i

/*A
 * Construire la liste des configurations des voies de sens inverse
 * ----------------------------------------------------------------
 */

FOR i = C_COL_BAU_I  TO (C_COL_BAU+1)  STEP -1
	CASE OF ta_evt[i]
	CASE XDC_VOIE_INCONNUE, XDC_VOIE_INEXISTANTE
		vl_voies = C_PICTO_INEXISTANT ++ vl_voies

	DEFAULT
	IF i = C_COL_BAU_I
		vl_voies = vl_voies ++ vm_l_picto_voies_i[ta_evt[i] + 
						ta_evt.bau_i_etroite * XDC_VOIE_BAU_ETROITE]
	ELSE	vl_voies = vl_voies ++ vm_l_picto_voies_i[ta_evt[i]]
	ENDCASE

	/* Distinguer la BAU des autres voies */
	IF i = C_COL_BAU_I
		vl_voies = vl_voies ++ "  "
NEXT i


/*A
 * Ajouter la separation puis les configurations des autres voies
 * --------------------------------------------------------------
 */

vl_voies = vl_voies ++ C_PICTO_SEPARATION

FOR i = (C_COL_BAU-4)  TO C_COL_BAU
	CASE OF ta_evt[i]
	CASE XDC_VOIE_INCONNUE, XDC_VOIE_INEXISTANTE
		NOTHING

	DEFAULT
	IF i = C_COL_BAU
		vl_voies = vl_voies ++ vm_l_picto_voies[ta_evt[i] + 
						ta_evt.bau_etroite * XDC_VOIE_BAU_ETROITE]
	ELSE	vl_voies = vl_voies ++ vm_l_picto_voies[ta_evt[i]]
	ENDCASE

	/* Distinguer la BAU des autres voies */
	IF i = C_COL_BAU - 1
		vl_voies = vl_voies ++ "  "
NEXT i


/*A
 * Ajouter les configurations de voies au libelle, formate pour les aligner
 * ------------------------------------------------------------------------
 */

RETURN (FORMAT@ ("%-90s", ta_evt.libelle) ++ vl_voies)

ENDMACRO



MACRO TSE_Voies_Decrites (FORMAT TSE_Synthese ta_evt)

RETURN
	((ta_evt.vl <> XDC_VOIE_INCONNUE AND ta_evt.vl <> XDC_VOIE_INEXISTANTE) OR
	 (ta_evt.vr <> XDC_VOIE_INCONNUE AND ta_evt.vr <> XDC_VOIE_INEXISTANTE) OR
	 (ta_evt.vl_i <> XDC_VOIE_INCONNUE AND ta_evt.vl_i <> XDC_VOIE_INEXISTANTE) OR
	 (ta_evt.vr_i <> XDC_VOIE_INCONNUE AND ta_evt.vr_i <> XDC_VOIE_INEXISTANTE))

ENDMACRO
