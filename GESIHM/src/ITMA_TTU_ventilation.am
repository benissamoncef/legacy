/*Fichier :  @(#)ITMA_TTU_ventilation.am	1.18      Release : 1.18        Date : 03/24/14
*/
/*
* LCL   22/04/20        : MOVIS Ajout site local pilotage DEM-SAE93
*/
/*A Description des constantes générales
 * ------------------------------------- */
DEFINE	C_MODULE			"MTTU"	' Nom du module
DEFINE	REP_CONFIG		"../fichiers/"
DEFINE	REP_RENOVE		"../fichiers/renov/"

DEFINE	POSX_BP_INDIVIDUEL	330
DEFINE	POSY_BP_INDIVIDUEL	665

DEFINE	TTU_VEN_EX_SEQ_RETOUR_NORMAL	8

/*A Description des modules à inclures 
* ---------------------------------------*/
INCLUDE	"dbase_.am"
INCLUDE	"../inc/ITMA_COM.h"
INCLUDE	"../inc/ITMA_TDO.h"
INCLUDE	"../inc/ITMA_TAR.h"
INCLUDE	"../inc/xzac102sp.h"
INCLUDE	"../inc/xzac112sp.h"
INCLUDE	"../inc/xzac633sp.h"
INCLUDE	"../../XDMICG/inc/xdc_ax.h"
INCLUDE	"../../XDMICG/inc/xzic_ax.h"
INCLUDE	"../inc/xzac05sp.h"


/*A Description des variables globales
 * ----------------------------------- */
var		vm_NomSite				' Nom du site
var		vm_District				' N° du district
var		vm_Eqp_Ventilation	'fichier de config des eqp ventilation
var		vm_Sce_Ventilation	'fichier de config des seq ventilation
var		vm_Sce_Eclairage	'fichier de config des seq eclairage
var		vm_F_bouton		'fichier de config des boutons
var		vm_NumSequence		'Numero de la sequence selectionné
var		vm_NumTube		'Numero du tube selectionné
var		vm_text			'text en edition
var		vm_F_tunnel		'fichier de config des tunnels
var		vm_nom_tunnel
var   	vm_fenetre_TTU		'item de la fenetre du module
VAR		vm_Titre_Fenetre
VAR		vm_Nom_Fenetre
var		vm_messages_acceptes
var   	vm_codes_tubes_renoves ' liste des codes des tubes renoves
var   	vm_noms_tubes_renoves ' liste des noms des tubes renoves

var		vl_erreur			' flag d'erreur
var		vl_explication		' explication du PA
var		tl_data,tl_retour	' param. table evenements
var   	tm_liste_causes
var		tl_titres			' titre evenements
var		vm_NumEvt 			' N° d'evenement
var		vm_CleEvt 			' Clé de l'evenement
var		vm_NumAction			' Numero d'action
var		vl_fmc			' libelle fmc à construire
var		vl_lib_fmc		' libelle fmc à construire
var		vm_mode_PA 			' mode de retour du plan d'action
var		vm_exe_seq_en_cours		' Flag d'execution d'une sequence selectionné
var		vm_seq_select			' Nom de la sequence selectionné
var vl_defaut_sequence	' flag de defaut sequence

var		vm_mode_formation		' mode formation

var my_array
var vm_Appel

FORMAT	PA_Tun
			Remarque,		' remarque (50 char.)
			NumEqt,			' equipement
			Explication,	' explication du PA
			Sequence,		' sequence
			Priorite,		' Priorité
			DistanceEvt,	' Distance de l'événement
			NumEvt,			' N° d'evenement
			CleEvt,			' clé de levenement
			Dispo,			' disponibilité		
			NumeroAction,	' numero d'action
			NomSite,		' nom du site
			fmc_liee		' libellé FMC
			
FORMAT TMC_actionFiche
	numero_fiche,
	cle_fiche,
	numero_action,
	cle_action,
	libelle_fiche,
	heure_action,
	etat_action,
	domaine_action
	
VAR FORMAT 	TMC_actionFiche	vl_ficheAction
var	FORMAT PA_Tun vm_tunnel

/* A.Bertola 14/03/2013 : gestion complete du retour à la normale pour le domaine ventilation */
var	vl_ret_normal

' modif du 18-11-2019 : pour toulon on enleve les reperes equipement
var	tm_affiche_repere

' modif du 12-11-2019 : Bloquage des commandes IHM incendie si incendie dans l'autre sens
var tm_incendie_autre_sens

/*E*/
/*
-------------------------------------------------------------------------------
* GTIE *  PROJET MIGRAZUR
-------------------------------------------------------------------------------
* SOUS-SYSTEME  GESIHM
-------------------------------------------------------------------------------
* MODULE MTPM * FICHIER ITMA_TTU_ventilation.am
-------------------------------------------------------------------------------
* DESCRIPTION DU MODULE :
*
* IHM de Commande ventilation des tunnels.
*
-------------------------------------------------------------------------------
* HISTORIQUE :
*
* A.Bertola 23/02/2007    : IHM supervision NICE en mode dégradé
* A.Bertola 15/08/2008 : correction FT 1712 : SAE MONACO S1,
*     problème apparition BP sens opposé pour domaine autre que signalisation
* A.Bertola 17/09/2008 : correction BP bandeau du bas mal repositionnés 
*    sur réception états
* A.Bertola 19/09/2008 : correction : Domaine ventilation : pas de commande
*	 manuelle possible à partir d'applix GTC et SAE
* A.Bertola 13/10/2008 : correction problème de remontée des états pour plages horaires,
*	trafic exceptionnel ou non et incendie 
* A.Bertola 20/10/2008 : correction FT 2007: affichage des boutons domaine éclairage
* A.Bertola 06/11/2008 : correction cas particulier de ST Pierre Féric sans ventilation
* A.Bertola 05-01-2009 : distinction entre les tubes avec/sans ventilation renovee
* A.Bertola 14-01-2009 : distinction entre les tubes avec/sans ventilation inverse
* A.Bertola 16-01-2009 : correction FT 2168: commande mode ventilation arret
* A.Bertola 27-01-2009 : griser le BP ventilation pour tube hors MONACO
* A.Bertola 12-06-2009 : correction FT 2705 : Affichage BP accès vue ventilation 
*			sur vue présomption incendie avec tube sans domaine ventilation
* JMG 02-07-2009 : Ajout de la macro de traitement sepcifique des seq ventilation pour PA DEM895 
* A.Bertola 06/07/2009 : correction FT2760: Sur Pessicart s1, 
  l'utilisation des chevrons gauche de chgt de tube amont provoque "Pas un Tableau"
* JMG        29/09/09 : SECTO DEM 887
* A.Bertola 20/10/2009 : correction FT 2934 : 
	gestion de la vue de désenfumage
* A.Bertola 20/10/2009 : correction FT 2940 : 
	Libellé pas correct sur pop up de désenfumage d'Applix
* A.Bertola 20/10/2009 : correction FT 2935 : 
	Le pop up désenfumage sur Applix est différent de celui de WIZCON
* A.Bertola 20/10/2009 : correction FT 3073 : 
	Désenfumage avec congestion
* A.Bertola 26/01/2010 : 
	griser BP_cde_incendie pour tube MONACO si pas en mode incendie
* A.Bertola 29/01/2010 : correction FT 3376: Changer le libellé du BP AUTO/individuel situé dans le bandeau du bas
* A.Bertola 01/02/2010 : correction FT 3376: Changer le libellé du BP AUTO/individuel situé dans le bandeau du bas
* A.Bertola 03/02/2010 : correction FT 3375: Systématiser le msg "Action possible seulement sur le domaine éclairage-ventilation" sur action BP domaine
* A.Bertola 22/01/2013 : gestion de l'absence de désenfumage par la tete
* A.Bertola 11/04/2013 : Mise à jour pour Monaco V2
* A.Bertola 14/04/2013 : gestion complete du retour à la normale pour le domaine ventilation
* A.Bertola 02/08/2013 : intégration BP HT Centrale La Turbie
* A.Bertola 08/11/2019 : intégration Toulon
* A.Bertola 20/05/2020 : Toulon : positionner correctement les cadres autour des eqp de type trappe
* A.Bertola 03/08/2020 : Toulon : on n'affiche pas le scenario en cours = retour a la normale
* PNI	10/06/2021 : Correctif vm_District SAE-290
---------------------------------------------------------------------------- */
/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :	Commande de la ventilation des tunnels
*
*  ----------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TTU_ventilation(va_tunnel, va_F_tunnel, va_appelant, va_1,va_num_vue)

/*
* ARGUMENTS EN ENTREE :
* va_tunnel	: infos : Nom de la vue à afficher + tube concerné
* va_appelant		: Macro appelante: ITMA_TTU, ITMA_TMC ou ITMA_TPA.
* va_1 				: structure vm_tunnel si va_appelant = "ITMA_TPA"
*					  fiche action si va_appelant=ITMA_TMC 
* va_num_vue        : numero de la vue
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Status OK ou NOK suivant résultat
*
* CONDITION D'UTILISATION
*   
*
* FONCTION
*    Pilote l'éclairage des tunnels
*
---------------------------------------------------------------------------- */
/*A Déclaration des variables statiques */
var vl_fenetre_active
var vl_tunnel
var tl_tunnel
var vl_titre_fen
var i, j, vl_index, vl_index2
var	vl_controle_sortie
var vl_sens, vl_sens_tunnel
var vl_F_tunnel
var vl_ventilation
var tl_color
var tl_param
var vl_Xpos, vl_Ypos
var vl_retour
var vl_meme_sens
var vl_trigramme
var vl_trigramme_amont
var vl_trigramme_aval
var vl_trigramme_sens
var vl_ligne
var vl_taille, vl_taille2
var vl_F_tpm
var vl_tab
var vl_panneau
var vl_etat
var vl_type_panneau		' tableau des types de panneaux à commander
var vl_message,vl_mess, vl_messageDecoupe
var vl_cmd
var vl_renove
var vl_tube_amont, vl_tube_aval
var vl_rang
var vl_icon
var vl_trouve
var vl_text
var vl_affiche_desenfumage
var vl_scenario_en_cours
var vl_sequence		' sequence selectionné dans la liste
var vl_fichier
var vl_texte
var vl_presence_sce_desenfumage
var vl_nb_poste_BT
var vl_longueur
var vl_pos,vl_pos1,vl_pos2,vl_pos3,vl_pos4,vl_pos5,vl_pos6
var vl_desenfum_tete
var vl_gestion_desenfum
var vl_absence_desenfum_tete
var vl_color

DELAY@(0.5)
vm_NomSite = SYSTEM_VAR@("vg_nom_site")
vm_District = SYSTEM_VAR@("vg_site")
vm_mode_formation = (SYSTEM_VAR@(vg_formation) <> NULL)
SET_SYSTEM_VAR@("vg_domaine_courant", "ventilation")

/*A Traitements en cas d'erreur durant l'initialisation :
*   informer l'operateur, tracer l'erreur et abandonner
* ------------------------------------------------------*/
ON ERROR 
{
	ERROR_BOX@
	COM01_Trace (COM_WARNING, COM03_Message_Erreur (C_MODULE))
	RETURN(COM_NOK)
}
vm_Appel = SUBSTRING@(va_appelant,1,8)

'-- Appel de la fenetre depuis une FMC : récupération de la séquence à afficher
if ( vm_Appel = "ITMA_TMC" )
{

	vl_FicheAction = va_1
	vl_retour = ITMA_TTU_Lecture_PA_tunnel(vl_FicheAction.Numero_Action, vl_FicheAction.cle_action, vl_FicheAction.domaine_action)

	vm_NumTube = vl_retour[0]+0
	vm_NumSequence = vl_Retour[2]+0
	
	DB_HEIGHT@(vm_fenetre_TTU,300)
	DB_XPOS@(vm_fenetre_TTU,50)
	DB_YPOS@(vm_fenetre_TTU,200)
}

'-- Appel de la fenetre dans le cadre d'un plan d'action : récupération de
'-- la structure vm_tunnel
if ( vm_Appel = "ITMA_TPA" )
    vm_tunnel = va_1


vm_Mode_PA 	= COM_QUITTE

'' Chargement du fichier de config tunnels
vm_F_tunnel = SYSTEM_VAR@ (vg_les_donnees_config_bd_tube)

vm_exe_seq_en_cours = False

vl_F_tunnel = va_F_tunnel
tl_tunnel = va_tunnel

/*A si appelant : ISYN_SOP : utilisé pour ouverture automatique 
 d'une IHM ventilation pour un numéro de tube donné 
 ici on s'en sert pour l'affichage de l'IHM prévenant l'opérateur d'une 
 présomption d'incendie */
if IS_ARRAY@(va_tunnel) = False
{
	if va_tunnel = "ISYN_SOP"
	{
		vm_NumTube = va_F_tunnel[0]
		vl_trouve = False
	
		/*a lecture de tout le fichier  de config tunnel */
		vl_taille  = ARRAY_SIZE@(vm_F_tunnel)
		for i = 1 to vl_taille
			
			/*A si nom de tunnel trouvé : MAJ tableau */
			if vm_F_tunnel[i,0] = vm_NumTube
			{
				vl_trouve = True
				vl_F_tunnel = vm_F_tunnel
				tl_tunnel[0] = vm_F_tunnel[i,0]
				tl_tunnel[1] = vm_F_tunnel[i,1]
				tl_tunnel[2] = vm_F_tunnel[i,2]
				break i
			}
		next i
		
		if vl_trouve = False
		{	
			COM01_Trace("Message ISYN_SOP reçu avec numéro de tube incorrect " ++ vm_NumTube)
			RETURN(COM_NOK)
		}

		/* correction FT2705 : Affichage BP accès vue ventilation sur vue
		 présomption incendie avec tube sans domaine ventilation */
		vl_tunnel = tl_tunnel[2]
		/* recuperer le trigramme qui correspond au nom de repertoire du tube */
		vl_trigramme =  ITMA_TTU_recuperer_trigramme(vl_tunnel)
	
		vl_fichier =  vl_trigramme ++ "/ConfigEqtVentilation_" ++ 
								vl_trigramme ++ ".cfg" 

		if FILE_EXISTS@(REP_CONFIG ++ "renov/" ++ vl_fichier) = FALSE
			SET_SYSTEM_VAR@(vg_nb_vue_ventilation,"0")
		else
			SET_SYSTEM_VAR@(vg_nb_vue_ventilation,"1")


		vl_retour=ITMA_TTU_Confirme_ouverture_IHM_Ventilation(tl_tunnel[2])
		if vl_retour = False
			RETURN(COM_OK)			
	}
}

vl_ventilation = TRUE
while (vl_ventilation)

' recuperation du numero du tube
vm_NumTube = tl_tunnel[0]

' recuperation du libellé du tube
vl_tunnel = tl_tunnel[2]
vm_nom_tunnel = vl_tunnel

/* recuperer le trigramme qui correspond au nom de repertoire du tube */
vl_trigramme =  ITMA_TTU_recuperer_trigramme(vl_tunnel)

if va_num_vue = 2
{
	'vue transversale gaines ventilation
	vl_fichier =  vl_trigramme ++ "/ConfigEqtVentilation2_" ++ vl_trigramme ++ ".cfg"
	SET_SYSTEM_VAR@("vg_domaine_courant", "ventilation2")
}
else
{
	'vue accélérateurs ou vue longitudinale accélérateurs et injecteurs pour Monaco
	vl_fichier =  vl_trigramme ++ "/ConfigEqtVentilation_" ++ vl_trigramme ++ ".cfg" 
	
	vl_renove = FILE_EXISTS@(REP_RENOVE ++ "/" ++ vl_fichier)	
	if vl_renove = FALSE
	{
		INFO_MESSAGE@("Pas de vue ventilation pour le tube " ++ vl_tunnel)
		RETURN(COM_OK)			
	}
}

/*A Chargement du fichier de config equipement ventilation du tunnel */
vm_Eqp_Ventilation = null
vl_F_tpm = READ_ASCII_FILE@(REP_RENOVE ++ "/" ++ vl_fichier)
vl_taille = ARRAY_SIZE@(vl_F_tpm) -1
vl_index = 0
for i = 0 to vl_taille
  '' recherche sur la ligne 1 si "pas de repere" pour ne pas afficher les reperes eqp (type eqp - eqp)
  if i=0 
  {
	if STRING_INDEX@(vl_F_tpm[i],  "pas de repere") <> 0
		tm_affiche_repere = 0
	else
		tm_affiche_repere = 1
  }
  vl_ligne = ARRAY_FROM_STRING@(vl_F_tpm[i],",")
  vl_tab = ARRAY_SIZE@(vl_ligne)
  if substring@(vl_F_tpm[i],1,1) <> "#" and vl_tab > 1
  {

	vl_taille2 = ARRAY_SIZE@(vl_ligne) -1
	for j = 0 to vl_taille2

	  if STRING_INDEX@(vl_F_tpm[i],  "->") <> 0
	  {
		vm_Eqp_Ventilation[0,j]=TRIM@(TABS_TO_SPACES@(vl_ligne[j]))
	  }
	  else
		vm_Eqp_Ventilation[vl_index,j]=TRIM@(TABS_TO_SPACES@(vl_ligne[j]))
	next j
	vl_index = vl_index + 1
  }
next i

/*A Chargement du fichier de config sequence eclairage du tunnel */
vl_F_tpm = READ_ASCII_FILE@(REP_RENOVE ++ vl_trigramme ++ "/ConfigSceEclairage_" ++ vl_trigramme ++ ".cfg")
vl_taille = ARRAY_SIZE@(vl_F_tpm) -1
vl_index = 0
for i = 0 to vl_taille
  vl_ligne = ARRAY_FROM_STRING@(vl_F_tpm[i],",")
  vl_tab = ARRAY_SIZE@(vl_ligne)
  if substring@(vl_F_tpm[i],1,1) <> "#"
  {
  
  	vl_taille2 = ARRAY_SIZE@(vl_ligne) -1
  	for j = 0 to vl_taille2
  		vm_Sce_Eclairage[vl_index,j]=TRIM@(TABS_TO_SPACES@(vl_ligne[j]))
  	next j
  	vl_index = vl_index + 1
  }
next i

/*A Chargement du fichier de config sequence ventilation du tunnel */
vl_F_tpm = READ_ASCII_FILE@(REP_RENOVE ++ vl_trigramme ++ "/ConfigSceVentilation_" ++ vl_trigramme ++ ".cfg")
vl_taille = ARRAY_SIZE@(vl_F_tpm) -1
vl_index = 0
for i = 0 to vl_taille
  vl_ligne = ARRAY_FROM_STRING@(vl_F_tpm[i],",")
  vl_tab = ARRAY_SIZE@(vl_ligne)
  if substring@(vl_F_tpm[i],1,1) <> "#" and vl_tab > 1
  {

	vl_taille2 = ARRAY_SIZE@(vl_ligne) -1
	for j = 0 to vl_taille2

	  if STRING_INDEX@(vl_F_tpm[i],  "->") <> 0
	  {
		vm_Sce_Ventilation[0,j]=TRIM@(TABS_TO_SPACES@(vl_ligne[j]))
	  }
	  else
		vm_Sce_Ventilation[vl_index,j]=TRIM@(TABS_TO_SPACES@(vl_ligne[j]))
	next j
	vl_index = vl_index + 1
  }
next i

/*B envoi du msg ouverture tunnel a la tache IHM principale */
vl_cmd = vl_tunnel
DB_SEND_POKE@(MTTU_MSG_OUV_FENETRE,vl_cmd)

/* A.Bertola 14/03/2013 : gestion complete du retour à la normale pour le domaine ventilation */
vl_ret_normal = vm_Eqp_Ventilation[0,8]
if UPPERCASE@(vl_ret_normal) = "RETOUR NORMAL"
	vl_ret_normal = 1
else
	vl_ret_normal = 0

/*A Chargement de la fenetre & assignation des sockets 
*   -------------------------------------------------- */
/* modification ABE le 14-01-2009 pour gestion tube avec ventilation renovee ou non et ventilation directe / inverse ou seulement directe*/ 
vl_longueur = LEN@(vm_Eqp_Ventilation[0,4])
vl_pos = STRING_INDEX@(UPPERCASE@(vm_Eqp_Ventilation[0,4]),"_NON_RENOVE")
if vl_pos = 0
	vm_Nom_Fenetre = vm_Eqp_Ventilation[0][4]
else
{
	vm_Nom_Fenetre = substring@(vm_Eqp_Ventilation[0][4],1,vl_pos-1)
}

/* modification ABE le 27-07-2009 pour gestion de la fenetre desenfumage 
des ventilation rénovées de façon générique.
Principe adopté : utilisation d'1 seule variable vl_gestion_desenfum,
vl_gestion_desenfum = 0 : tous les BP sont présents
vl_gestion_desenfum = 1 : pas de anti recyclage "_NON_ANTIRECYCL"
vl_gestion_desenfum = 2 : pas de desenfumage avec congestion "_NON_AVCONGESTION"
vl_gestion_desenfum = 3 : pas de desenfumage sans congestion "_NON_SSCONGESTION"
vl_gestion_desenfum = 4 : pas de desenfumage avec congestion + 
					pas de anti-recyclage "_NON_AVCG_ANTIRECY"
vl_gestion_desenfum = 5 : pas de desenfumage sans congestion + 
					pas de anti-recyclage "_NON_SSCG_ANTIRECY"

modif du 11-12-2012 : gestion de l'absence de désenfumage par la tete
ajout du suffixe _DESENF_TETE pour indiquer que l'on n'a pas de desenfumage par la tete
exemple : _NON_AVCG_ANTIRECY_DESENF_TETE
*/ 

vl_gestion_desenfum = 0
vl_pos1 = STRING_INDEX@(UPPERCASE@(vm_Eqp_Ventilation[0,4]),"_NON_ANTIRECYCL")
vl_pos2 = STRING_INDEX@(UPPERCASE@(vm_Eqp_Ventilation[0,4]),"_NON_AVCONGESTION")
vl_pos3 = STRING_INDEX@(UPPERCASE@(vm_Eqp_Ventilation[0,4]),"_NON_SSCONGESTION")
vl_pos4 = STRING_INDEX@(UPPERCASE@(vm_Eqp_Ventilation[0,4]),"_NON_AVCG_ANTIRECY")
vl_pos5 = STRING_INDEX@(UPPERCASE@(vm_Eqp_Ventilation[0,4]),"_NON_SSCG_ANTIRECY")
if vl_pos1=0 and vl_pos2=0 and vl_pos3=0 and vl_pos4=0 and vl_pos5=0 
	vm_Nom_Fenetre = vm_Eqp_Ventilation[0][4]

vl_pos = STRING_INDEX@(UPPERCASE@(vm_Eqp_Ventilation[0,4]),"_NON_")
if vl_pos<>0
	vm_Nom_Fenetre = substring@(vm_Eqp_Ventilation[0][4],1,vl_pos-1)

if vl_pos1<>0
	vl_gestion_desenfum = 1
if vl_pos2<>0
	vl_gestion_desenfum = 2
if vl_pos3<>0
	vl_gestion_desenfum = 3
if vl_pos4<>0
	vl_gestion_desenfum = 4
if vl_pos5<>0
	vl_gestion_desenfum = 5

/* modif du 11-12-2012 : gestion de l'absence de désenfumage par la tete */
vl_pos6 = STRING_INDEX@(UPPERCASE@(vm_Eqp_Ventilation[0,4]),"_DESENF_TETE")
if vl_pos6<>0
	vl_absence_desenfum_tete = 1
else
	vl_absence_desenfum_tete = 0

vm_fenetre_TTU = DB_LOAD@(vm_Nom_Fenetre)

vm_messages_acceptes[0] = COM_CANAL_FIN

if ( vm_Appel <> "ITMA_TMC" )
{
	if NOT(COM04_Operateur_A_Le_Droit_De(XDC_FAM_EXPLOITATION)) and
			 NOT vm_mode_formation
	{
		DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_sequence",TRUE)
		DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_lier",TRUE)
	}

	vm_messages_acceptes[1] = COM_CANAL_MTTU_ALM
	vm_messages_acceptes[2] = COM_CANAL_MTTU_EQP_VEN
	vm_messages_acceptes[3] = COM_CANAL_MTTU_EQP_EXP
	vm_messages_acceptes[4] = COM_CANAL_MTTU_SEQ_VEN
	vm_messages_acceptes[5] = COM_CANAL_MTTU_DOM_VEN
	vm_messages_acceptes[6] = COM_CANAL_MTTU_DOM_ECL
	vm_messages_acceptes[7] = COM_CANAL_MTTU_SEQ_ECL
}
DB_ACCEPT_POKES@ (vm_fenetre_TTU, vm_messages_acceptes)


/*A Positionnement de la fenetre & assignation de la fiche d'aide  
*   ------------------------------------------------------------- */
DB_XPOS@(vm_fenetre_TTU, 0)
DB_YPOS@(vm_fenetre_TTU, 115)
DB_WIDTH@(vm_fenetre_TTU, 993)
DB_HEIGHT@(vm_fenetre_TTU, 715)

DEFINE_HELPFILE@("gerer_pilotage_tunnel", "./aid/ITMA_TTU_tunnel.aide")
DB_HELP_TOPIC@(vm_fenetre_TTU,"gerer_ventilation_tunnel")

/* charger le bandeau de navigation */
vl_affiche_desenfumage =  true
ITMA_TTU_bandeau(vm_fenetre_TTU,vl_trigramme, vl_affiche_desenfumage,vl_tunnel)
 
/*A affichage du titre de la boite 
*   -------------------------------- */
'' cas particulier du tunnel de Monaco avec un tube avec les deux sens
if STRING_INDEX@(UPPERCASE@(vl_tunnel),"MONACO") <> 0
{
	' tunnel de Monaco
	DB_TITLE@(vm_fenetre_TTU,"Ventilation Tunnel de Monaco")
	vm_Titre_Fenetre = "Ventilation Tunnel  " ++ vl_tunnel
	DB_CTRL_TITLE@(vm_fenetre_TTU,"Li_nom","Ventilation Tunnel de Monaco")

	/* ABE le 26-01-2010 : griser BP_cde_incendie pour tube MONACO si pas en mode incendie : modif ABE du 23-05-2013 : on supprime cette condition */
	'' DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_desenfumage",True)
	
}
else
{
	DB_TITLE@(vm_fenetre_TTU,"Ventilation Tunnel  " ++ vl_tunnel)
	vm_Titre_Fenetre = "Ventilation Tunnel  " ++ vl_tunnel
	DB_CTRL_TITLE@(vm_fenetre_TTU,"Li_nom","Ventilation Tunnel  " ++ vl_tunnel)
}

/* intégration tunnel Toulon ABE 03-01-2019 */
if STRING_INDEX@(UPPERCASE@(vl_tunnel),"TOULON") <> 0
{
	if STRING_INDEX@(vl_tunnel,"S1") <> 0
		ITMA_TTU_ajout_fdp_ven("S1", va_num_vue)
	else
		ITMA_TTU_ajout_fdp_ven("S2", va_num_vue)
}

'' creation des equipements commande et etat
ITMA_TTU_creation_eqp_ventilation

/* recherche du sens du tunnel pour maj du texte du bouton sens et pour la gestion
 de la fenetre de commande de désenfumage */
if STRING_INDEX@(vl_tunnel,"S1") <> 0
{
	vl_sens = "Sens 2"
	vl_sens_tunnel = "Sens 1"
	if STRING_INDEX@(UPPERCASE@(vl_tunnel),"TOULON") <> 0
	{
		vl_color[0] = 1
		vl_color[1] = 138, 43, 226
		DB_CTRL_LABEL_COLOR@(vm_fenetre_TTU, "TxtSens", vl_color)					
		DB_CTRL_TITLE@ (vm_fenetre_TTU, "TxtSens", "Sud->")	
	}	
}                         
else
{
	vl_sens = "Sens 1"
	vl_sens_tunnel = "Sens 2"
	if STRING_INDEX@(UPPERCASE@(vl_tunnel),"TOULON") <> 0
	{
		vl_color[0] = 1
		vl_color[1] = 0, 0, 255
		DB_CTRL_LABEL_COLOR@(vm_fenetre_TTU, "TxtSens", vl_color)					
		DB_CTRL_TITLE@ (vm_fenetre_TTU, "TxtSens", "<-Nord")	
	}		
}

if STRING_INDEX@(UPPERCASE@(vm_nom_tunnel),"TOULON") <> 0
	DB_CTRL_TITLE@ (vm_fenetre_TTU, "BP_sens", "Opposé")	
else
	DB_CTRL_TITLE@ (vm_fenetre_TTU, "BP_sens", "Sens opposé")

/*A Effacer le display 'discordance sequence' */ 
DB_CTRL_DISPLAY@(vm_fenetre_TTU,"BP_defaut",False)

DB_CTRL_DISPLAY@(vm_fenetre_TTU,"BP_lier",True)
DB_CTRL_DISPLAY@(vm_fenetre_TTU,"LI_Evenements",False)
DB_CTRL_DISPLAY@(vm_fenetre_TTU,"TA_Evenements",False)
DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_executer",True)
DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_refuser",True)
'' cas particulier du tunnel de Monaco
if STRING_INDEX@(UPPERCASE@(vl_tunnel),"MONACO") <> 0
{
	/*A visualiser les display 'trafic exceptionnel' */ 
	DB_CTRL_DISPLAY@(vm_fenetre_TTU,"BP_trafic_excep",True)
	DB_CTRL_DISPLAY@(vm_fenetre_TTU,"BP_etat_trafic_excep",True)
	/*A visualiser le display 'Plages horaires actives' */ 
	DB_CTRL_DISPLAY@(vm_fenetre_TTU,"BP_plage_horaire",True)
	/* modification du 15-05-2013 : les 2 BP trappes disparaissent ! */
	if va_num_vue = 2
	{
		/*A visualiser le display 'Test trappes' */ 
		DB_CTRL_DISPLAY@(vm_fenetre_TTU,"BP_ferm_trappes",False)
		DB_CTRL_DISPLAY@(vm_fenetre_TTU,"BP_ouv_trappes",False)
	}
	else
	{
		/*A non visualiser le display 'Test trappes' */ 
		DB_CTRL_DISPLAY@(vm_fenetre_TTU,"BP_ferm_trappes",False)
		DB_CTRL_DISPLAY@(vm_fenetre_TTU,"BP_ouv_trappes",False)
	}

	' On grise le BP sens opposé car on représente tout dans la meme vue
	DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_sens",true)	

}

DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_ok",True)
DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_nul",True)

/*A Abonnement au differents services */
if ( vm_Appel <> "ITMA_TMC" )
{
	ITMA_TTU_Abt_Etat_Eqp_ventilation(XDC_DEBUT_ABONNEMENT_EQUEXT,vm_NumTube, vm_NomSite)
	ITMA_TTU_Abt_Etat_Seq_Ventilation(XDC_DEBUT_ABONNEMENT_EQUEXT,vm_NumTube)
	ITMA_TTU_Abt_Etat_Eqp_exploitation(XDC_DEBUT_ABONNEMENT_EQUEXT,vm_NumTube)
}

if STRING_INDEX@(UPPERCASE@(tl_tunnel[2]),"MONACO") <> 0
{
	'' griser le bouton 'BP_ventilation' ou  'BP_ventilation2'
	if va_num_vue = 2
	{
		'vue transversale gaines ventilation
		DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_ventilation2",True)
		DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_ventilation",False)
	}
	else
	{
		'vue longitudinale accélérateurs et injecteurs
		DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_ventilation",True)
		DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_ventilation2",False)
	}
}
else
{
	/* modif ABE du 27-01-2009 : griser le BP ventilation pour tube hors MONACO */
	DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_ventilation",True)
}

DB_CTRL_DISPLAY@(vm_fenetre_TTU,"BP_sequence",True)
DB_CTRL_DISPLAY@(vm_fenetre_TTU,"BP_cde_incendie",true)
DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_executer",true)

DB_DISPLAY_ONLY@(vm_fenetre_TTU,True)
DB_DISPLAY@(vm_fenetre_TTU)
DB_DISPLAY_ONLY@(vm_fenetre_TTU,False)

if ( vm_Appel<>"ITMA_TMC" ) vm_NumSequence = XDC_VEN_SEQ_HORS_SEQUENCE		' Sequence Hors Sequence

'-- Appel de la fenetre dans le cadre d'un plan d'action
'-- Choix de la séquence en automatique
if ( vm_Appel="ITMA_TPA" )
{

    vm_NumEvt = vm_tunnel.NumEvt
    vm_CleEvt = vm_tunnel.CleEvt
    vm_NumSequence = vm_tunnel.Sequence
	
    '' modif ABE du 14-06-2013
	if vl_ret_normal = 0 and vm_NumSequence = XDC_VEN_SEQ_RETOUR_NORMAL
		'' ouvrage sans gestion du retour à la normale
		vl_sequence = ITMA_TTU_sequence_PA(vl_trigramme, TTU_VEN_EX_SEQ_RETOUR_NORMAL)
	else
		'' ouvrage avec gestion du retour à la normale
		vl_sequence = ITMA_TTU_sequence_PA(vl_trigramme, vm_NumSequence)
    
    if vl_sequence[0] <> -1
    {

        vm_exe_seq_en_cours = False
        vm_seq_select = SYSTEM_VAR@("sequence")

        vl_text = "Scénario envisagé : " ++ vm_seq_select
        DB_CTRL_TITLE@(vm_fenetre_TTU,"Li_status",vl_text)

        DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_executer",False)
        DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_refuser",False)
        DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_lier",True)
        DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_sequence",True)

        DB_CTRL_DISPLAY@(vm_fenetre_TTU,"BP_manuel",TRUE)
        DB_DESTROY_CTRL@(vm_fenetre_TTU,"BP_manuel")
        DB_CREATE_CTRL@(vm_fenetre_TTU,3,"BP_manuel","pix_scenario",POSX_BP_INDIVIDUEL,POSY_BP_INDIVIDUEL,0)
        DB_CTRL_BUTTON_TYPE@(vm_fenetre_TTU,"BP_manuel",4)

        for j = 1 to ARRAY_SIZE@(vm_F_bouton)-1  '27
            for i = 0 to ARRAY_SIZE@(vl_sequence)-1 step 2   '49
            if vm_F_bouton[j,1] = vl_sequence[i]  and vm_F_bouton[j,1]<>""
                ITMA_TTU_pix_select_ventilation(j,vl_sequence[i+1])
            next i
        next j
    }

}



'-- Appel de la fenetre depuis une fiche de main courante
'-- Visualisation du tube sans action possible
if ( vm_Appel="ITMA_TMC" )
{
	if STRING_INDEX@(UPPERCASE@(tl_tunnel[2]),"TOULON") <> 0
	{
		'' tunnel de toulon
		DB_CTRL_DISPLAY@(vm_fenetre_TTU, "BP_signalisation2", False)
		DB_CTRL_DISPLAY@(vm_fenetre_TTU, "BP_signalisation3", False)
		DB_CTRL_DISPLAY@(vm_fenetre_TTU, "BP_Exploitation2", False)
		DB_CTRL_DISPLAY@(vm_fenetre_TTU, "BP_Exploitation3", False)
		DB_CTRL_DISPLAY@(vm_fenetre_TTU, "BP_mode_ventilation2", False)
		DB_CTRL_DISPLAY@(vm_fenetre_TTU, "BP_mode_eclairageRFEAUTO", False)
		DB_CTRL_DISPLAY@(vm_fenetre_TTU, "BP_mode_eclairageBASEAUTO", False)
		DB_CTRL_DISPLAY@(vm_fenetre_TTU, "Ta_regime_eclairage2", False)
		DB_CTRL_DISPLAY@(vm_fenetre_TTU, "Li_titre_ventilation", False)
		DB_CTRL_DISPLAY@(vm_fenetre_TTU, "BP_mode_eclairageRFSAUTO", False)
		DB_CTRL_DISPLAY@(vm_fenetre_TTU, "Ta_regime_eclairage3", False)
		DB_CTRL_DISPLAY@(vm_fenetre_TTU, "Li_titre_mode_ventilation", False)
		DB_CTRL_DISPLAY@(vm_fenetre_TTU, "Li_titre_mode_ventilation2", False)
		DB_CTRL_DISPLAY@(vm_fenetre_TTU, "Li_titre_eclairage_entree2", False)
		DB_CTRL_DISPLAY@(vm_fenetre_TTU, "Li_titre_regime_eclairage2", False)
		
		if STRING_INDEX@(UPPERCASE@(tl_tunnel[2]),"S1") <> 0
		{
			DB_CTRL_DISPLAY@(vm_fenetre_TTU, "BP_mode_eclairageRFENOM", False)
			DB_CTRL_DISPLAY@(vm_fenetre_TTU, "BP_mode_eclairageBASENOM", False)
			DB_CTRL_DISPLAY@(vm_fenetre_TTU, "BP_mode_eclairageRFSNOM", False)
			DB_CTRL_DISPLAY@(vm_fenetre_TTU, "Li_titre_eclairage_entree4", False)
			DB_CTRL_DISPLAY@(vm_fenetre_TTU, "BP_mode_eclairageTREAUTO", False)
			DB_CTRL_DISPLAY@(vm_fenetre_TTU, "Li_regime_eclairageT", False)			
			DB_CTRL_DISPLAY@(vm_fenetre_TTU, "BP_eclairage2", False)			
			
			DB_CTRL_DISPLAY@(vm_fenetre_TTU, "Li_titre_eclairage_entree", False)
			DB_CTRL_DISPLAY@(vm_fenetre_TTU, "Li_titre_regime_eclairage", False)
			DB_CTRL_DISPLAY@(vm_fenetre_TTU, "Li_titre_eclairage_entree3", False)
			DB_CTRL_DISPLAY@(vm_fenetre_TTU, "Li_titre_regime_eclairage3", False)
			DB_CTRL_DISPLAY@(vm_fenetre_TTU, "Li_titre_regime_eclairage4", False)			
			DB_CTRL_DISPLAY@(vm_fenetre_TTU, "Ta_regime_eclairage4", False)			
		}
		else
		{
			DB_CTRL_DISPLAY@(vm_fenetre_TTU, "Li_regime_eclairageB", False)
			DB_CTRL_DISPLAY@(vm_fenetre_TTU, "Li_titre_eclairage_entree", False)
			'DB_CTRL_DISPLAY@(vm_fenetre_TTU, "Li_titre_eclairage_sortie", False)
			DB_CTRL_DISPLAY@(vm_fenetre_TTU, "Li_titre_eclairage_entree3", False)
			DB_CTRL_DISPLAY@(vm_fenetre_TTU, "Li_titre_regime_eclairage3", False)
			DB_CTRL_DISPLAY@(vm_fenetre_TTU, "Li_regime_eclairageS", False)
			DB_CTRL_DISPLAY@(vm_fenetre_TTU, "Li_titre_regime_eclairage", False)						
		}
	}
	else
	{
		'' hors tunnel de toulon
		DB_CTRL_DISPLAY@(vm_fenetre_TTU, "BP_gauche", False)
		DB_CTRL_DISPLAY@(vm_fenetre_TTU, "BP_droite", False)
		DB_CTRL_DISPLAY@(vm_fenetre_TTU, "BP_ltn", False)
		DB_CTRL_DISPLAY@(vm_fenetre_TTU, "BP_litarret", False)
		DB_CTRL_DISPLAY@(vm_fenetre_TTU, "BP_HT", False)
		DB_CTRL_DISPLAY@(vm_fenetre_TTU, "BP_HT_TU", False)
		DB_CTRL_DISPLAY@(vm_fenetre_TTU, "BP_mode_eclairage", False)
		DB_CTRL_DISPLAY@(vm_fenetre_TTU, "Li_regime_eclairage", False)
		
		DB_CTRL_TITLE@(vm_fenetre_TTU, "Li_titre_mode_eclairage", "")
		DB_CTRL_TITLE@(vm_fenetre_TTU, "Li_titre_regime_eclairage", "")		
	}
	DB_CTRL_DISPLAY@(vm_fenetre_TTU, "BP_sens", False)
	DB_CTRL_DISPLAY@(vm_fenetre_TTU, "BP_signalisation", False)
	DB_CTRL_DISPLAY@(vm_fenetre_TTU, "BP_eclairage", False)
	DB_CTRL_DISPLAY@(vm_fenetre_TTU, "BP_ventilation", False)
	DB_CTRL_DISPLAY@(vm_fenetre_TTU, "BP_LT", False)
	DB_CTRL_DISPLAY@(vm_fenetre_TTU, "BP_Exploitation", False)
	DB_CTRL_DISPLAY@(vm_fenetre_TTU, "BP_BTOUEST", False)
	vl_nb_poste_BT = SYSTEM_VAR@(vg_nb_poste_BT)
	if vl_nb_poste_BT = 2
		DB_CTRL_DISPLAY@(vm_fenetre_TTU, "BP_BTEST", False)
	DB_CTRL_DISPLAY@(vm_fenetre_TTU, "BP_systeme", False)
	DB_CTRL_DISPLAY@(vm_fenetre_TTU, "Tableau_haut", False)
	DB_CTRL_DISPLAY@(vm_fenetre_TTU, "Ta_ventilation", False)
	DB_CTRL_DISPLAY@(vm_fenetre_TTU, "BP_mode_ventilation", False)
	DB_CTRL_DISPLAY@(vm_fenetre_TTU, "Li_titre_mode_ventilation", False)
	DB_CTRL_DISPLAY@(vm_fenetre_TTU, "Ta_eclairage", False)
	DB_CTRL_DISPLAY@(vm_fenetre_TTU, "Ta_regime_eclairage", False)
	DB_CTRL_DISPLAY@(vm_fenetre_TTU, "BP_actuel", False)
	
	if STRING_INDEX@(UPPERCASE@(tl_tunnel[2]),"MONACO") <> 0
	{
		DB_CTRL_DISPLAY@(vm_fenetre_TTU, "BP_mode_eclairage_MC2", False)
		DB_CTRL_DISPLAY@(vm_fenetre_TTU, "BP_mode_eclairage_MC3", False)
		DB_CTRL_DISPLAY@(vm_fenetre_TTU, "BP_ventilation2", False)
		DB_CTRL_TITLE@(vm_fenetre_TTU, "Li_titre_ventilation", "")
		DB_CTRL_TITLE@(vm_fenetre_TTU, "Li_titre_eclairage", "")
	}	

	vl_F_tpm = READ_ASCII_FILE@(REP_RENOVE ++ vl_trigramme ++ "/ConfigSceVentilation_" ++ vl_trigramme ++ ".cfg")
	vl_taille = ARRAY_SIZE@(vl_F_tpm) -1

	for i = 0 to vl_taille
	  vl_ligne = ARRAY_FROM_STRING@(vl_F_tpm[i],",")
	  if ( substring@(vl_F_tpm[i],1,1) <> "#" and vl_ligne[0] = vm_NumSequence)
		i = vl_taille
	next i

	DB_HEIGHT@(vm_fenetre_TTU,340)
	DB_XPOS@(vm_fenetre_TTU,50)
	DB_YPOS@(vm_fenetre_TTU,200)

	DB_CTRL_DISPLAY@(vm_fenetre_TTU, "Li_statusTMC", True)
	DB_CTRL_TITLE@(vm_fenetre_TTU, "Li_statusTMC",
							"Ventilation Tunnel " ++
							vl_tunnel ++
							"   -   Séquence " ++
							vl_ligne[1] ++
							"   -   "++
							vl_retour[3])

	DB_CTRL_DISPLAY@(vm_fenetre_TTU, "BP_quitterTMC", True)

	my_array[0] = 0
	my_array[1] = 0
	my_array[2] = 0
	my_array[3] = 0
	my_array[5] = XDC_NORMAL
	my_array[6] = 0

	for j = 1 to ARRAY_SIZE@(vm_F_bouton)-1
		for i = 2 to ARRAY_SIZE@(vl_ligne)-1 step 2
			if vm_F_bouton[j,1] = vl_ligne[i] and vm_F_bouton[j,1]<>""
			{
				my_array[4] = TRIM@(TABS_TO_SPACES@(vl_ligne[i+1]))
				ITMA_TTU_MAJ_ID_eqp_vent(j,my_array)
			}
		next i
	next j

}


vl_fenetre_active = TRUE
/*A tant que la fenetre est active */
WHILE (vl_fenetre_active)

	
	/* affichage de la liste */
	DB_DISPLAY@(vm_fenetre_TTU)
	vl_titre_fen = DB_GET_TITLE@(vm_fenetre_TTU)
	''PROMOTE_DIALOG@(vl_titre_fen)

	/*A capture de l'evenement dans la BD TCA */
	vl_controle_sortie = DB_EXIT_CTRL@(vm_fenetre_TTU)
	
	/*A si l'evenement n'est pas un poke & verrou=vrai */
	if vl_controle_sortie<>"poke_" and SYSTEM_VAR@(vg_verrou)
		/*A reset de l'evenement */
		{ vl_controle_sortie = NULL }
	
	/* selon l'evenement */
	CASE OF vl_controle_sortie

	/*A sur action aide */
	CASE "BP_aide"
		COM33_Aide_Renov("ITMA_TTU_ventilation")

	/*A sur demande affichage IHM commande incendie */
	CASE "BP_cde_incendie"	
		' modif du 14-11-2019 : Bloquage des commandes IHM incendie si incendie dans l'autre sens
		if tm_incendie_autre_sens = 1 or SYSTEM_VAR@(vg_inc_autre_sens) = 1
		{
			GOTO NON_INCENDIE
		}	
      if ( vm_NumEvt<>0 and vm_CleEvt<>0 )
      {
	
		/*A Demande de confirmation */
		tl_param[0] = 1	'nombre de boutons
		tl_param[1] = 0	'position X fenetre
		tl_param[2] = 0	'position y fenetre
		tl_param[3] = "Confirmation incendie"	'titre de la fenetre
		vl_icon = DB_CTRL_GET_TITLE@(vm_fenetre_TTU, "BP_cde_incendie")
		
		if vl_icon = "pix_incendie_debut_40_40" or vl_icon = "pix_incendie_presomp_40_40"
			tl_param[4] = "VALIDER L'ARRET"	'titre bouton
		else
			tl_param[4] = "VALIDER LA PRESOMPTION"	'titre bouton

		tl_param[5] = "BP_CONFIRME"	'nom bouton

		tl_param[24] = 220	'largeur bouton poussoir
		tl_param[25] = 240	'largeur fenetre

		vl_retour = PEND_FOR_NEW_TASK@("ITMA_TTU_confirmation", tl_param)
		if vl_retour = -1 or vl_retour = null
		{
			GOTO NON_INCENDIE
 		}

		vl_taille = ARRAY_SIZE@(vm_Sce_Ventilation) -1
		vl_trouve = False
		vl_presence_sce_desenfumage = FALSE
		for i = 0 to vl_taille

		  /* détecter si on a au moins un scénario de désenfumage */
		  if STRING_INDEX@(UPPERCASE@(vm_Sce_Ventilation[i,1]),"DESENFUM") <> 0 or 
 			STRING_INDEX@(UPPERCASE@(vm_Sce_Ventilation[i,1]),"VENTIL") <> 0
			vl_presence_sce_desenfumage = TRUE

			/* si on a l'icone debut incendie ou presomption incendie on envoie la trame de fin incendie */
			if (vl_icon = "pix_incendie_debut_40_40" and
			STRING_INDEX@(UPPERCASE@(vm_Sce_Ventilation[i,1]),"FIN INCENDIE") <> 0) or
			(vl_icon = "pix_incendie_presomp_40_40" and
			STRING_INDEX@(UPPERCASE@(vm_Sce_Ventilation[i,1]),"FIN INCENDIE") <> 0)
			{
				vm_NumSequence = vm_Sce_Ventilation[i,0]
				vl_trouve = True
			}
			 /* si on a l'icone fin incendie on envoie la trame de debut incendie */
			 if vl_icon = "pix_incendie_fin_40_40" and STRING_INDEX@(UPPERCASE@(vm_nom_tunnel),"TOULON") = 0 and
			  STRING_INDEX@(UPPERCASE@(vm_Sce_Ventilation[i,1]),"DEBUT INCENDIE") <> 0
			 {
				vm_NumSequence = vm_Sce_Ventilation[i,0]
				vl_trouve = True
			 }
			if vl_icon = "pix_incendie_fin_40_40" and STRING_INDEX@(UPPERCASE@(vm_nom_tunnel),"TOULON") <> 0 and
						STRING_INDEX@(UPPERCASE@(vm_Sce_Ventilation[i,1]),"PRESOMPTION INCENDIE") <> 0
			{
				vm_NumSequence = vm_Sce_Ventilation[i,0]
				vl_trouve = True
			}
		
		next i

		if vl_trouve = True
		{
		  if NOT vm_mode_formation
		  {
			ITMA_TTU_Commande_Seq_Tunnel_ventilation (	
								vm_NumTube, XDC_FAUX,
								vm_NumSequence)
			/*AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			  on filtre les tubes sans ventilation (donc sans désenfumage) 
			/*AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA*/

			/* modif ABE du 01-10-2009 : 
			correction FT 3058: R7U : Fonctionnement du bouton incendie
			on n'affiche plus la fenetre de desenfumage */
			/*
			if vl_taille > 2 and vl_presence_sce_desenfumage = TRUE
			{  
			if STRING_INDEX@(UPPERCASE@(tl_tunnel[2]),  "MONACO") <> 0
				ITMA_TTU_Cde_Desenfumage_Monaco(vm_NumTube, vm_Sce_Ventilation,
								vl_sens_tunnel)
			else
			{
				if STRING_INDEX@(UPPERCASE@(vm_Eqp_Ventilation[0,4]),
											"NON_RENOVE") <> 0
					ITMA_TTU_Commande_Desenfumage_non_renove(vm_NumTube, 
									vm_Sce_Ventilation,vl_sens_tunnel)
				else
					ITMA_TTU_Commande_Desenfumage(vm_NumTube, 
									vm_Sce_Ventilation,vl_sens_tunnel)
			}
			}
			*/
		  }
		}
		else
		{
			/*B trace de l'erreur */
			vl_text = "ITMA_TTU_ventilation : numéro de séquence inexistant = " 
									++ vm_NumSequence
			COM01_Trace(0,vl_text)
		}
		vm_NumEvt = 0
		vm_CleEvt = 0
		DB_CTRL_TITLE@(vm_fenetre_TTU,"Li_status2","")          		

	  } else info_message@("Veuillez d'abord lier cette action a une F.M.C...")

		NON_INCENDIE :
			
	/*A sur demande affichage IHM commande desenfumage */
	CASE "BP_desenfumage"
        if ( vm_NumEvt<>0 and vm_CleEvt<>0 )
        {
		  if NOT vm_mode_formation
		  {

			vl_icon = DB_CTRL_GET_TITLE@(vm_fenetre_TTU, "BP_cde_incendie")		
			vl_desenfum_tete = TRUE
			if vl_icon = "pix_incendie_debut_40_40"
				vl_desenfum_tete = FALSE 

			if STRING_INDEX@(UPPERCASE@(tl_tunnel[2]),  "MONACO") <> 0
			{
				/* modif ABE du 15-05-2013 : ouverture fenetre Desenfumage incendie en cours ou pas, qui inhibe -> modif ABE du 08-10-2009 : ouverture fenetre Desenfumage ssi incendie en cours */
				/* if vl_icon <> "pix_incendie_debut_40_40"
					GOTO NON_DESENFUMAGE */

				ITMA_TTU_Cde_Desenfumage_Monaco(vm_NumTube, vm_Sce_Ventilation,
										vl_sens_tunnel)
			}
			else if STRING_INDEX@(UPPERCASE@(tl_tunnel[2]),  "TOULON") <> 0
			{
				ITMA_TTU_Cde_Desenfumage_Toulon(vm_NumTube, vm_Sce_Ventilation,
									vl_sens_tunnel)			
			}
			else
			{
				/* modif du 05-01-2009 : distinction entre les tubes avec/sans 
				ventilation renovee */
				if STRING_INDEX@(UPPERCASE@(vm_Eqp_Ventilation[0,4]),
											"NON_RENOVE") <> 0
				{
					ITMA_TTU_Commande_Desenfumage_non_renove(vm_NumTube, 
									vm_Sce_Ventilation,vl_sens_tunnel)
				}
				else
				{
				if STRING_INDEX@(UPPERCASE@(vm_Eqp_Ventilation[0,4]),
										"OUI_RENOVE") <> 0
					ITMA_TTU_Commande_Desenfumage_oui_renove(vm_NumTube, 
						vm_Sce_Ventilation,vl_sens_tunnel, 
						vl_desenfum_tete, vl_gestion_desenfum, vl_absence_desenfum_tete)

				else
					ITMA_TTU_Commande_Desenfumage(vm_NumTube, 
						vm_Sce_Ventilation,vl_sens_tunnel, 
						vl_desenfum_tete, vl_gestion_desenfum)
				}
			}
		   } 
			vm_NumEvt = 0
			vm_CleEvt = 0
			DB_CTRL_TITLE@(vm_fenetre_TTU,"Li_status2","")          		
		} 
		else 
			info_message@("Veuillez d'abord lier cette action a une F.M.C...")

		NON_DESENFUMAGE :

	/*A sur demande affichage IHM commande ventilation */
	CASE "BP_ventilation"	
		/*A appel affichage IHM commande ventilation */
		NEW_TASK@("ITMA_TTU_ventilation", tl_tunnel, vm_F_tunnel,"","",1)

		/*A la fenetre n'est plus active */
		vl_fenetre_active = FALSE
		vl_ventilation = FALSE

	/*A sur demande affichage IHM commande ventilation avec gaines pour Monaco */
	CASE "BP_ventilation2"	
		/*A appel affichage IHM commande ventilation avec gaines pour Monaco */
		NEW_TASK@("ITMA_TTU_ventilation", tl_tunnel, vm_F_tunnel,"","",2)

		/*A la fenetre n'est plus active */
		vl_fenetre_active = FALSE
		vl_ventilation = FALSE


	/*A sur demande affichage IHM commande LT */
	CASE "BP_LT"	
		ITMA_TTU_Abt_Etat_eqp_ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube, vm_NomSite)
		ITMA_TTU_Abt_Etat_Seq_Ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube)
		DELAY@(1)
		NEW_TASK@("ITMA_TTU_LT", tl_tunnel, vm_F_tunnel)
		vl_fenetre_active = FALSE
		vl_ventilation = FALSE

	/*A sur demande affichage IHM commande LTN */
	CASE "BP_ltn"	
		ITMA_TTU_Abt_Etat_eqp_ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube, vm_NomSite)
		ITMA_TTU_Abt_Etat_Seq_Ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube)
		DELAY@(1)
		NEW_TASK@("ITMA_TTU_liste_choix_LTN")
		vl_fenetre_active = FALSE
		vl_ventilation = FALSE

	/*A sur demande affichage IHM commande eclairage */
	CASE "BP_eclairage"	
		ITMA_TTU_Abt_Etat_eqp_ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube, vm_NomSite)
		ITMA_TTU_Abt_Etat_Seq_Ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube)
		DELAY@(1)
		NEW_TASK@("ITMA_TTU_eclairage", tl_tunnel, vm_F_tunnel, "", "", 1)
		vl_fenetre_active = FALSE
		vl_ventilation = FALSE

	/*A sur demande affichage IHM commande eclairage 2 */
	CASE "BP_eclairage2"	
		ITMA_TTU_Abt_Etat_eqp_ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube, vm_NomSite)
		ITMA_TTU_Abt_Etat_Seq_Ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube)
		DELAY@(1)
		NEW_TASK@("ITMA_TTU_eclairage", tl_tunnel, vm_F_tunnel, "", "", 2)
		vl_fenetre_active = FALSE
		vl_ventilation = FALSE
		
	/*A sur demande affichage IHM commande signalisation */
	CASE "BP_signalisation"	
		ITMA_TTU_Abt_Etat_eqp_ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube, vm_NomSite)
		ITMA_TTU_Abt_Etat_Seq_Ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube)
		DELAY@(1)
		New_task@("ITMA_TTU_signalisation", "ITMA_TTU", tl_tunnel[2], vl_trigramme, "", 1)
		vl_fenetre_active = FALSE
		vl_ventilation = FALSE

	/*A sur demande affichage IHM commande signalisation 2 */
	CASE "BP_signalisation2"	
		ITMA_TTU_Abt_Etat_eqp_ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube, vm_NomSite)
		ITMA_TTU_Abt_Etat_Seq_Ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube)
		DELAY@(1)
		New_task@("ITMA_TTU_signalisation", "ITMA_TTU", tl_tunnel[2], vl_trigramme, "", 2)
		vl_fenetre_active = FALSE
		vl_ventilation = FALSE

	/*A sur demande affichage IHM commande signalisation 3 */
	CASE "BP_signalisation3"	
		ITMA_TTU_Abt_Etat_eqp_ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube, vm_NomSite)
		ITMA_TTU_Abt_Etat_Seq_Ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube)
		DELAY@(1)
		New_task@("ITMA_TTU_signalisation", "ITMA_TTU", tl_tunnel[2], vl_trigramme, "", 3)
		vl_fenetre_active = FALSE
		vl_ventilation = FALSE

	/*A sur demande affichage IHM commande exploitation */
	CASE "BP_Exploitation"
		ITMA_TTU_Abt_Etat_eqp_ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube, vm_NomSite)
		ITMA_TTU_Abt_Etat_Seq_Ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube)
		DELAY@(1)
		NEW_TASK@("ITMA_TTU_exploitation", tl_tunnel, vm_F_tunnel,"","", 1)
		vl_fenetre_active = FALSE
		vl_ventilation = FALSE

	/*A sur demande affichage IHM commande exploitation 2 */
	CASE "BP_Exploitation2"
		ITMA_TTU_Abt_Etat_eqp_ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube, vm_NomSite)
		ITMA_TTU_Abt_Etat_Seq_Ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube)
		DELAY@(1)
		NEW_TASK@("ITMA_TTU_exploitation", tl_tunnel, vm_F_tunnel,"","", 2)
		vl_fenetre_active = FALSE
		vl_ventilation = FALSE

	/*A sur demande affichage IHM commande exploitation 3 */
	CASE "BP_Exploitation3"
		ITMA_TTU_Abt_Etat_eqp_ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube, vm_NomSite)
		ITMA_TTU_Abt_Etat_Seq_Ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube)
		DELAY@(1)
		NEW_TASK@("ITMA_TTU_exploitation", tl_tunnel, vm_F_tunnel,"","", 3)
		vl_fenetre_active = FALSE
		vl_ventilation = FALSE
	
	/*A sur demande affichage IHM commande BT */
	CASE "BP_BTOUEST"	
		ITMA_TTU_Abt_Etat_eqp_ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube, vm_NomSite)
		ITMA_TTU_Abt_Etat_Seq_Ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube)
		DELAY@(1)
		NEW_TASK@("ITMA_TTU_BT", tl_tunnel, vm_F_tunnel,1)
		vl_fenetre_active = FALSE
		vl_ventilation = FALSE

	/*A sur demande affichage IHM commande BT */
	CASE "BP_BTEST"	
		ITMA_TTU_Abt_Etat_eqp_ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube, vm_NomSite)
		ITMA_TTU_Abt_Etat_Seq_Ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube)
		DELAY@(1)
		NEW_TASK@("ITMA_TTU_BT", tl_tunnel, vm_F_tunnel,2)
		vl_fenetre_active = FALSE
		vl_ventilation = FALSE
		
	/*A sur demande affichage IHM commande HT */
	CASE "BP_HT"	
		ITMA_TTU_Abt_Etat_eqp_ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube, vm_NomSite)
		ITMA_TTU_Abt_Etat_Seq_Ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube)
		DELAY@(1)
		NEW_TASK@("ITMA_TTU_HT")
		vl_fenetre_active = FALSE
		vl_ventilation = FALSE

	/*A sur demande affichage IHM commande HT Centrale La Turbie */
	CASE "BP_HT_TU"	
		ITMA_TTU_Abt_Etat_eqp_ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube, vm_NomSite)
		ITMA_TTU_Abt_Etat_Seq_Ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube)
		DELAY@(1)
		NEW_TASK@("ITMA_TTU_HT_TURBIE")
		vl_fenetre_active = FALSE
		vl_ventilation = FALSE
		
	/*A sur demande affichage IHM commande système */
	CASE "BP_systeme"	
		ITMA_TTU_Abt_Etat_eqp_ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube, vm_NomSite)
		ITMA_TTU_Abt_Etat_Seq_Ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube)
		DELAY@(1)
		if STRING_INDEX@(UPPERCASE@(tl_tunnel[2]),"TOULON") = 0
			New_task@("ITMA_TTU_systeme","ITMA_SYS", "A8A500")
		else
			New_task@("ITMA_TTU_systeme","ITMA_SYS", "TOULON")		
		vl_fenetre_active = FALSE
		vl_ventilation = FALSE

	/*A sur demande affichage IHM commande lit d'arret */
	CASE "BP_litarret"	
		ITMA_TTU_Abt_Etat_eqp_ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube, vm_NomSite)
		ITMA_TTU_Abt_Etat_Seq_Ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube)
		DELAY@(1)
		New_task@("ITMA_TTU_lits_arret","ITMA_LIT")
		vl_fenetre_active = FALSE
		vl_ventilation = FALSE

	/*A sur demande passage Auto (nominal) / Horaire / Manu pour mode eclairage */
	CASE "BP_mode_eclairage"
    	INFO_MESSAGE@("Ordre seulement possible sur la vue eclairage")
	CASE "BP_mode_eclairageRFENOM"
    	INFO_MESSAGE@("Ordre seulement possible sur la vue eclairage")
	CASE "BP_mode_eclairageRFSNOM"
    	INFO_MESSAGE@("Ordre seulement possible sur la vue eclairage")
	CASE "BP_mode_eclairageBASENOM"
    	INFO_MESSAGE@("Ordre seulement possible sur la vue eclairage")
	CASE "BP_mode_eclairageRFEAUTO"
    	INFO_MESSAGE@("Ordre seulement possible sur la vue eclairage")
	CASE "BP_mode_eclairageRFSAUTO"
    	INFO_MESSAGE@("Ordre seulement possible sur la vue eclairage")
	CASE "BP_mode_eclairageBASEAUTO"
    	INFO_MESSAGE@("Ordre seulement possible sur la vue eclairage")
	CASE "BP_mode_eclairageTREAUTO"
    	INFO_MESSAGE@("Ordre seulement possible sur la vue eclairage")
		
	/*A sur action test trappes */
	CASE "BP_ferm_trappes"

      if ( vm_NumEvt<>0 and vm_CleEvt<>0 )
      {
		   
	  if NOT vm_mode_formation
	  {

		/*A Demande de confirmation */
		tl_param[0] = 1	'nombre de boutons
		tl_param[1] = 0	'position X fenetre
		tl_param[2] = 0	'position y fenetre
		tl_param[3] = "Confirmation"	'titre de la fenetre
		tl_param[4] = "CONFIRMER LA FERMETURE"	'titre bouton
		tl_param[5] = "BP_CONFIRME"	'nom bouton

		tl_param[24] = 170	'largeur bouton poussoir
		tl_param[25] = 190	'largeur fenetre

		vl_retour = PEND_FOR_NEW_TASK@("ITMA_TTU_confirmation", tl_param)
		if vl_retour = -1 or vl_retour = null
		{
			GOTO NON_FERM_TRAPPES
 		}

		vl_taille = ARRAY_SIZE@(vm_Sce_Ventilation) -1
		vl_trouve = False
		for i = 0 to vl_taille
		 /*  on envoie la trame correspondante */
		 if STRING_INDEX@(UPPERCASE@(vm_Sce_Ventilation[i,1]),"FERMETURE TRAPPES")<>0
		   {
			vm_NumSequence = vm_Sce_Ventilation[i,0]
			vl_trouve = True
			break i
		   }
		next i

		if vl_trouve = True
		{
			ITMA_TTU_Commande_Seq_Tunnel_ventilation (	
								vm_NumTube, XDC_FAUX,
								vm_NumSequence)
		}
	  }

		vm_NumEvt = 0
		vm_CleEvt = 0
		DB_CTRL_TITLE@(vm_fenetre_TTU,"Li_status2","")          		

	  } else info_message@("Veuillez d'abord lier cette action a une F.M.C...")

		NON_FERM_TRAPPES :

	/*A sur action test trappes */
	CASE "BP_ouv_trappes"

      if ( vm_NumEvt<>0 and vm_CleEvt<>0 )
      {

	  if NOT vm_mode_formation
	  {
		   
		/*A Demande de confirmation */
		tl_param[0] = 1	'nombre de boutons
		tl_param[1] = 0	'position X fenetre
		tl_param[2] = 0	'position y fenetre
		tl_param[3] = "Confirmation"	'titre de la fenetre
		tl_param[4] = "CONFIRMER L'OUVERTURE"	'titre bouton
		tl_param[5] = "BP_CONFIRME"	'nom bouton

		tl_param[24] = 170	'largeur bouton poussoir
		tl_param[25] = 190	'largeur fenetre

		vl_retour = PEND_FOR_NEW_TASK@("ITMA_TTU_confirmation", tl_param)
		if vl_retour = -1 or vl_retour = null
		{
			GOTO NON_OUV_TRAPPES
 		}

		vl_taille = ARRAY_SIZE@(vm_Sce_Ventilation) -1
		vl_trouve = False
		for i = 0 to vl_taille
		 /*  on envoie la trame correspondante */
		 if STRING_INDEX@(UPPERCASE@(vm_Sce_Ventilation[i,1]),"OUVERTURE TRAPPES")<>0
		   {
			vm_NumSequence = vm_Sce_Ventilation[i,0]
			vl_trouve = True
			break i
		   }
		next i

		if vl_trouve = True
		{
			ITMA_TTU_Commande_Seq_Tunnel_ventilation (	
								vm_NumTube, XDC_FAUX,
								vm_NumSequence)

		}
	  }

		vm_NumEvt = 0
		vm_CleEvt = 0
		DB_CTRL_TITLE@(vm_fenetre_TTU,"Li_status2","")          		

	  } else info_message@("Veuillez d'abord lier cette action a une F.M.C...")

		NON_OUV_TRAPPES :

	/*A sur action BP_plage_horaire */
	CASE "BP_plage_horaire"
      if ( vm_NumEvt<>0 and vm_CleEvt<>0 )
      {

	  if NOT vm_mode_formation
	  {
	
		vl_texte = DB_CTRL_GET_TITLE@(vm_fenetre_TTU, "BP_plage_horaire")

		/*A Demande de confirmation */
		tl_param[0] = 1	'nombre de boutons
		tl_param[1] = 0	'position X fenetre
		tl_param[2] = 0	'position y fenetre
		tl_param[3] = "Confirmation"	'titre de la fenetre
		if UPPERCASE@(vl_texte) = "PLAGES HORAIRES ACTIVES"
			tl_param[4] = "DESACTIVATION PLAGES"	'titre bouton
		else
			tl_param[4] = "ACTIVATION PLAGES"	'titre bouton

		tl_param[5] = "BP_CONFIRME"	'nom bouton

		tl_param[24] = 170	'largeur bouton poussoir
		tl_param[25] = 190	'largeur fenetre

		vl_retour = PEND_FOR_NEW_TASK@("ITMA_TTU_confirmation", tl_param)
		if vl_retour = -1 or vl_retour = NULL
		{
			GOTO NON_PLAGE
 		}


		vl_taille = ARRAY_SIZE@(vm_Sce_Ventilation) -1
		vl_trouve = False
		for i = 0 to vl_taille
		 /* si on a l'icone PLAGES HORAIRES ACTIVES on envoie la trame 
			correspondante */
		 if UPPERCASE@(vl_texte) = "PLAGES HORAIRES ACTIVES" and
		 STRING_INDEX@(UPPERCASE@(vm_Sce_Ventilation[i,1]),"PLAGES HORAIRES INACTIVES")<>0
		   {
			vm_NumSequence = vm_Sce_Ventilation[i,0]
			vl_trouve = True
			break i
		   }
		 /* si on a l'icone PLAGES HORAIRES INACTIVES on envoie la trame
			 correspondante */
		 if UPPERCASE@(vl_texte) = "PLAGES HORAIRES INACTIVES" and
		 STRING_INDEX@(UPPERCASE@(vm_Sce_Ventilation[i,1]),"PLAGES HORAIRES ACTIVES")<>0
		   {
			vm_NumSequence = vm_Sce_Ventilation[i,0]
			vl_trouve = True
			break i
		   }
		next i

		if vl_trouve = True
		{
			ITMA_TTU_Commande_Seq_Tunnel_ventilation (	
								vm_NumTube, XDC_FAUX,
								vm_NumSequence)
		}
	  }
		vm_NumEvt = 0
		vm_CleEvt = 0
		DB_CTRL_TITLE@(vm_fenetre_TTU,"Li_status2","")          		

	   } else info_message@("Veuillez d'abord lier cette action a une F.M.C...")

		NON_PLAGE :


	/*A sur action BP_trafic_excep */
	CASE "BP_trafic_excep"
      if ( vm_NumEvt<>0 and vm_CleEvt<>0 )
      {
	  if NOT vm_mode_formation
	  {

		/*A appel la liste des commandes possibles */
		tl_param[0] = 2	'nombre de boutons
		tl_param[1] = 0	'position X fenetre
		tl_param[2] = 0	'position y fenetre
		tl_param[3] = "Forcage trafic"	'titre de la fenetre
		tl_param[4] =  "NON EXCEPTIONNEL"	'titre bouton 1
		tl_param[5] = "BP_NEXC"	'nom bouton 1
		tl_param[6] = "EXCEPTIONNEL"	'titre bouton 2
		tl_param[7] = "BP_EXC"	'nom bouton 2
		tl_param[24] = 170	'largeur bouton poussoir
		tl_param[25] = 190	'largeur fenetre

		vl_retour = PEND_FOR_NEW_TASK@("ITMA_TTU_affiche_liste", tl_param)

		if vl_retour = -1 or vl_retour = NULL
		{
			GOTO NON_TRAFIC
 		}
		/* gestion des commandes forcage  EXCEPTIONNEL ou
			NON EXCEPTIONNEL */
		if vl_retour = "BP_NEXC"
			vl_text = "TRAFIC NON EXCEPTIONNEL"
		else
			vl_text = "TRAFIC EXCEPTIONNEL"

		  vl_taille = ARRAY_SIZE@(vm_Sce_Ventilation) -1
		  vl_trouve = False
		  for i = 0 to vl_taille
		  if STRING_INDEX@(UPPERCASE@(vm_Sce_Ventilation[i,1]),
									vl_text) <> 0
	 		{	
		  	vm_NumSequence = vm_Sce_Ventilation[i,0]
		  	vl_trouve = True
		  	break i
			}		
		  next i

		  if vl_trouve = True
		  ITMA_TTU_Commande_Seq_Tunnel_ventilation(vm_NumTube, XDC_FAUX,vm_NumSequence)
			
		vl_taille = ARRAY_SIZE@(vm_Sce_Ventilation) -1
		vl_trouve = False
		for i = 0 to vl_taille
		 /* si on a l'icone TRAFIC EXCEPTIONNEL on envoie la trame 
			correspondante */
		 if UPPERCASE@(vl_texte) = "TRAFIC EXCEPTIONNEL" and
		 STRING_INDEX@(UPPERCASE@(vm_Sce_Ventilation[i,1]),"TRAFIC NON EXCEPTIONNEL")<>0
		   {
			vm_NumSequence = vm_Sce_Ventilation[i,0]
			vl_trouve = True
			break i
		   }
		 /* si on a l'icone TRAFIC NON EXCEPTIONNEL on envoie la trame
			 correspondante */
		 if UPPERCASE@(vl_texte) = "TRAFIC NON EXCEPTIONNEL" and
		 STRING_INDEX@(UPPERCASE@(vm_Sce_Ventilation[i,1]),"TRAFIC EXCEPTIONNEL")<>0
		   {
			vm_NumSequence = vm_Sce_Ventilation[i,0]
			vl_trouve = True
			break i
		   }
		next i

		if vl_trouve = True
		{
			ITMA_TTU_Commande_Seq_Tunnel_ventilation (	
								vm_NumTube, XDC_FAUX,
								vm_NumSequence)
		}
	  }
		vm_NumEvt = 0
		vm_CleEvt = 0
		DB_CTRL_TITLE@(vm_fenetre_TTU,"Li_status2","")          		
		
	  } else info_message@("Veuillez d'abord lier cette action a une F.M.C...")

	  NON_TRAFIC :

	/*A sur demande passage Auto/Manu/Arret pour mode ventilation : 2nd BP pour Toulon */
	CASE "BP_mode_ventilation2"
		/*A appel la liste des commandes possibles */
		tl_param[0] = 3	'nombre de boutons
		tl_param[1] = 0	'position X fenetre
		tl_param[2] = 0	'position y fenetre
		tl_param[3] = "Auto/Manu"	'titre de la fenetre
		tl_param[4] =  "AUTO"	'titre bouton 1
		tl_param[5] = "BP_AUTO"	'nom bouton 1
		tl_param[6] = "MANUEL"	'titre bouton 2
		tl_param[7] = "BP_MANUEL"	'nom bouton 2

		/* modif du 13-03-2013 : gestion du retour à la normale côté SAE avec fonctionnement synchro avec la GTC
		   pour les tubes avec retour a la normale BP_ARRET disparait des modes ventilation pour devenir un scenario */
		
		' Sur MONACO on n'a pas d'arrêt des ventilateurs
		if STRING_INDEX@(UPPERCASE@(tl_tunnel[2]),  "MONACO") = 0 AND vl_ret_normal = 0
		{
			tl_param[8] = "ARRET ACCELERATEURS"	'titre bouton 3
			tl_param[9] = "BP_ARRET"	'nom bouton 3
		}
		else
			tl_param[0] = 2	'nombre de boutons

		tl_param[24] = 150	'largeur bouton poussoir
		tl_param[25] = 170	'largeur fenetre

		/* si mode MANU/AUTO en cours griser MANU/AUTO */
		vl_icon = DB_CTRL_GET_TITLE@(vm_fenetre_TTU, "BP_mode_ventilation")
		if vl_icon = "pix_auto"
		{
			tl_param[30] = true		'griser=true/degriser=false le bouton
			tl_param[31] = false	'griser=true/degriser=false le bouton
			tl_param[32] = false	'griser=true/degriser=false le bouton
		}
		if vl_icon = "pix_manuel"
		{
			tl_param[30] = false	'griser=true/degriser=false le bouton
			tl_param[31] = true		'griser=true/degriser=false le bouton
			tl_param[32] = false	'griser=true/degriser=false le bouton
		}
		vl_retour = PEND_FOR_NEW_TASK@("ITMA_TTU_affiche_liste", tl_param)

		if vl_retour <> -1 and vl_retour <> NULL
		{
			  ITMA_TTU_Pilote_mode_ventilation(vl_retour, vm_NumTube, 2)
		}
	  
	/*A sur demande passage Auto/Manu/Arret pour mode ventilation */
	CASE "BP_mode_ventilation"
	  if NOT vm_mode_formation
	  {

		/*A appel la liste des commandes possibles */
		tl_param[0] = 3	'nombre de boutons
		tl_param[1] = 0	'position X fenetre
		tl_param[2] = 0	'position y fenetre
		tl_param[3] = "Auto/Manu"	'titre de la fenetre
		tl_param[4] =  "AUTO"	'titre bouton 1
		tl_param[5] = "BP_AUTO"	'nom bouton 1
		tl_param[6] = "MANUEL"	'titre bouton 2
		tl_param[7] = "BP_MANUEL"	'nom bouton 2

		/* A.Bertola 14/03/2013 : gestion complete du retour à la normale pour le domaine ventilation
		   pour les tubes avec retour a la normale BP_ARRET disparait des modes ventilation pour devenir un scenario */

		' Sur MONACO on n'a pas d'arrêt des ventilateurs
		if STRING_INDEX@(UPPERCASE@(tl_tunnel[2]),  "MONACO") = 0 AND vl_ret_normal = 0
		{
			tl_param[8] = "ARRET ACCELERATEURS"	'titre bouton 3
			tl_param[9] = "BP_ARRET"	'nom bouton 3
		}
		else
			tl_param[0] = 2	'nombre de boutons

		tl_param[24] = 150	'largeur bouton poussoir
		tl_param[25] = 170	'largeur fenetre

		/* si mode MANU/AUTO en cours griser MANU/AUTO */
		vl_icon = DB_CTRL_GET_TITLE@(vm_fenetre_TTU, "BP_mode_ventilation")
		if vl_icon = "pix_auto"
		{
			tl_param[30] = true		'griser=true/degriser=false le bouton
			tl_param[31] = false	'griser=true/degriser=false le bouton
			tl_param[32] = false	'griser=true/degriser=false le bouton
		}
		if vl_icon = "pix_manuel"
		{
			tl_param[30] = false	'griser=true/degriser=false le bouton
			tl_param[31] = true		'griser=true/degriser=false le bouton
			tl_param[32] = false	'griser=true/degriser=false le bouton
		}
		vl_retour = PEND_FOR_NEW_TASK@("ITMA_TTU_affiche_liste", tl_param)

		if vl_retour <> -1 and vl_retour <> NULL
		{
			  ITMA_TTU_Pilote_mode_ventilation(vl_retour, vm_NumTube, 1)
		}
	}


	/*A sur demande affichage IHM commande ventilation pour tube amont */
	CASE "BP_gauche"	

		vl_tube_amont = vm_Eqp_Ventilation[0,6]
		vl_trigramme_amont =  ITMA_TTU_recuperer_trigramme(vl_tube_amont)

		if ( vl_trigramme_amont <> null )
		{
			/* controler si le fichier de ventilation existe */
			vl_fichier = REP_RENOVE ++ vl_trigramme_amont ++ "/ConfigEqtVentilation_" ++ vl_trigramme_amont ++ ".cfg"		
			vl_renove = FILE_EXISTS@(vl_fichier)
			
		  if vl_renove = FALSE
		  {
			INFO_MESSAGE@("Pas de vue ventilation pour le tube " ++
										vl_tube_amont)
		  }
		 else
		  {
			for i = 0 to ARRAY_SIZE@(vm_F_tunnel)-1 
				if vl_tube_amont = vm_F_tunnel[i,2]
					vl_rang = i
			next i

			for i = 0 to ARRAY_SIZE@(vm_F_tunnel)-1 
				tl_tunnel[i] = vm_F_tunnel[vl_rang,i]
			next i
  
			vl_fenetre_active = FALSE
			vl_ventilation = FALSE

			ITMA_TTU_Abt_Etat_eqp_ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube, vm_NomSite)
			ITMA_TTU_Abt_Etat_Seq_Ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube)
			DELAY@(1)
  
			''New_task@("ITMA_TTU_ventilation","ITMA_TTU",vm_F_tunnel[vl_rang,0],"","",1)
      New_task@("ITMA_TTU_ventilation",tl_tunnel, vm_F_tunnel[vl_rang,0],"","",1)

		}
		}

	/*A sur demande affichage IHM commande ventilation pour tube aval  */
	CASE "BP_droite"	
		vl_tube_aval = vm_Eqp_Ventilation[0,7]
		vl_trigramme_aval = ITMA_TTU_recuperer_trigramme(vl_tube_aval)
		
		if ( vl_trigramme_aval <> null )
		{
			/* controler si le fichier de ventilation existe */
			vl_fichier = REP_RENOVE ++ vl_trigramme_aval ++ "/ConfigEqtVentilation_" ++ vl_trigramme_aval ++ ".cfg"		
			vl_renove = FILE_EXISTS@(vl_fichier)
			
		  if vl_renove = FALSE
		  {
			INFO_MESSAGE@("Pas de vue ventilation pour le tube " ++
										vl_tube_aval)
		  }
		 else
		  {

			for i = 0 to ARRAY_SIZE@(vm_F_tunnel)-1 
				if vl_tube_aval = vm_F_tunnel[i,2]
					vl_rang = i
			next i
  
			for i = 0 to ARRAY_SIZE@(vm_F_tunnel)-1 
				tl_tunnel[i] = vm_F_tunnel[vl_rang,i]
			next i
  
  		vl_ventilation = FALSE
  		vl_fenetre_active = FALSE

		ITMA_TTU_Abt_Etat_eqp_ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube, vm_NomSite)
		ITMA_TTU_Abt_Etat_Seq_Ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube)
		DELAY@(1)
        
      ''New_task@("ITMA_TTU_ventilation","ITMA_TTU", vm_F_tunnel[vl_rang,0],"","",1)
      New_task@("ITMA_TTU_ventilation",tl_tunnel, vm_F_tunnel[vl_rang,0],"","",1)

		}
		}

	/*A sur demande affichage IHM commande ventilation tunnel autre sens */
	CASE "BP_sens"

		' On change de sens
		if vl_sens = "Sens 2"
			tl_tunnel[2] = REPLACE_SUBSTR@(tl_tunnel[2],"S1", "S2")
		else
			tl_tunnel[2] =	REPLACE_SUBSTR@(tl_tunnel[2],"S2", "S1")
		vl_trigramme_sens = ITMA_TTU_recuperer_trigramme(tl_tunnel[2])
		
		if ( vl_trigramme_sens <> null )
		{

  		/*B envoi du msg fermeture tunnel a la tache IHM principale */
  		vl_cmd = tl_tunnel[2]
  		DB_SEND_POKE@(MTTU_MSG_FERM_FENETRE,vl_cmd)

		for i = 0 to ARRAY_SIZE@(vm_F_tunnel)-1 
			if tl_tunnel[2] = vm_F_tunnel[i,2]
				vl_rang = i
		next i

		for i = 0 to ARRAY_SIZE@(vm_F_tunnel)-1 
			tl_tunnel[i] = vm_F_tunnel[vl_rang,i]
		next i
  
  		vl_ventilation = FALSE
  		vl_fenetre_active = FALSE

		ITMA_TTU_Abt_Etat_eqp_ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube, vm_NomSite)
		ITMA_TTU_Abt_Etat_Seq_Ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube)
		DELAY@(1)
        
      New_task@("ITMA_TTU_ventilation",tl_tunnel, vm_F_tunnel,"","",1)

		}

	/*A sur action 'BP_sequence' */
	CASE "BP_sequence"

		/*A appel la liste des sequences */
		vl_sequence = PEND_FOR_NEW_TASK@("ITMA_TTU_sequence_ventilation", vl_trigramme, vl_ret_normal, vm_nom_tunnel)

		/*A si retour d'une sequence */
		if vl_sequence[0] <> -1
		{

			/*A Effacer le bouton de discordance séquence */
			DB_CTRL_DISPLAY@(vm_fenetre_TTU,"BP_defaut",FALSE)
			
			/*A Reset du flag d'execution de sequence */
			vm_exe_seq_en_cours = False

			/*A MAJ du n° de sequence selectionné */
			vm_NumSequence = SYSTEM_VAR@("NumSequence")+0

			/*A MAJ du message status */
			vm_seq_select = SYSTEM_VAR@("sequence")
			vl_text = "Scénario envisagé : " ++ vm_seq_select
			DB_CTRL_TITLE@(vm_fenetre_TTU,"Li_status",vl_text)
            
			/*A dégriser le bouton d'execution */
			DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_executer",False)
			
			DB_CTRL_DISPLAY@(vm_fenetre_TTU,"BP_manuel",TRUE)
			DB_DESTROY_CTRL@(vm_fenetre_TTU,"BP_manuel")
			DB_CREATE_CTRL@(vm_fenetre_TTU,3,"BP_manuel","pix_scenario",POSX_BP_INDIVIDUEL,POSY_BP_INDIVIDUEL,0)
			DB_CTRL_BUTTON_TYPE@(vm_fenetre_TTU,"BP_manuel",4)

			/*A boucle sur les boutons */
			for j = 1 to ARRAY_SIZE@(vm_F_bouton)-1 

				/*A boucle sur la liste des etats dans la sequence */
				for i = 0 to ARRAY_SIZE@(vl_sequence)-1 step 2   '49
				if vm_F_bouton[j,1] = vl_sequence[i]  and vm_F_bouton[j,1]<>""
					ITMA_TTU_pix_select_ventilation(j,vl_sequence[i+1])
				next i

			next j	
		}

	/*A sur action 'BP_manuel' */
	CASE "BP_manuel"
		if ( DB_CTRL_GET_TITLE@(vm_fenetre_TTU,"BP_manuel") = "pix_manu" )
            INFO_MESSAGE@("Commande Individuelle.")
		else
            INFO_MESSAGE@("Commande Scenario.")

	/*A sur action executer */
	CASE "BP_executer"

    /* --- une liaison FMC doit exister */
    if ( vm_NumEvt<>0 and vm_CleEvt<>0 )
    {
    	   
  		/*A Demande de confirmation */
  		tl_param[0] = 1	'nombre de boutons
  		tl_param[1] = 0	'position X fenetre
  		tl_param[2] = 0	'position y fenetre
  		tl_param[3] = "Confirmation"	'titre de la fenetre
  		tl_param[4] = "CONFIRMER"	'titre bouton
  		tl_param[5] = "BP_CONFIRME"	'nom bouton
  
  		tl_param[24] = 170	'largeur bouton poussoir
  		tl_param[25] = 190	'largeur fenetre

        /*A ----- Effacer le bouton de discordance séquence */
  		DB_CTRL_DISPLAY@(vm_fenetre_TTU,"BP_defaut",FALSE)
		
  		/* Pilotage en Manuel */
		if DB_CTRL_GET_TITLE@(vm_fenetre_TTU,"BP_manuel") = "pix_manu"
		{
  		
  			/*A reset des chaines de caractères */
  			vl_panneau = ""
  			vl_etat = ""
			vl_type_panneau = ""
  
  			for j = 1 to ARRAY_SIZE@(vm_F_bouton)-1  '27
  
  				/*A construction des tableaux à envoyer à la tâche relais */
  				if vm_F_bouton[j,1]<>""
  				{
  					if vm_F_bouton[j,0]>0  and  vm_F_bouton[j,4]>0
  					{ 	vl_etat = vl_etat ++ vm_F_bouton[j,0] ++ ","
  						vl_panneau = vl_panneau ++ vm_F_bouton[j,4] ++ ","
						vl_type_panneau = vl_type_panneau ++ vm_F_bouton[j,12] ++ ","
  					}
  				}
  			next j
  			vl_etat = vl_etat ++ "0"
  			vl_panneau = vl_panneau ++ "0"
			vl_type_panneau = vl_type_panneau ++ "0"
  	
  			/*A MAJ de la ligne de status */
  			DB_CTRL_TITLE@(vm_fenetre_TTU,"Li_status","Execution en manuel ( à confirmer ! )")
  	
	 	 if NOT vm_mode_formation
	  	{

  			/* Passage en mode MANUEL */
  			ITMA_TTU_Pilote_mode_ventilation("BP_MANUEL", vm_NumTube)
			
  			DELAY@(3)
  
  			/*A Appel de la macro de pilotage */
  			ITMA_TTU_pilote_eqp_vent(vm_NumTube, vl_type_panneau, vl_panneau, vl_etat)

			'-- lancement de la séquence hors sequence
			vm_NumAction = ITMA_TTU_Commande_Seq_Tunnel_ventilation(vm_NumTube, XDC_VRAI, XDC_VEN_SEQ_HORS_SEQUENCE)
		}
  			/*A MAJ des boutons de commandes */
  			DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_executer",True)
			DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_refuser",True)
			DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_ok",False)
			DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_nul",False)
			DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_quitter",True)
			DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_lier",True)
			DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_trafic_excep",True)
			DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_plage_horaire",True)
			if va_num_vue = 2
			{
				DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_ferm_trappes",True)
				DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_ouv_trappes",True)
			}			
			DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_desenfumage",True)
            DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_sequence",True)
			
			ITMA_TTU_griser_bandeau(vm_fenetre_TTU, vm_nom_tunnel)
			
		}

  		/*A ----- Pilotage en Automatique */
        if DB_CTRL_GET_TITLE@(vm_fenetre_TTU,"BP_manuel") = "pix_scenario"
  		{
  			if vm_NumSequence = XDC_VEN_SEQ_HORS_SEQUENCE
  				INFO_MESSAGE@(" Choisissez une séquence connue de la GTC ...")
  			else
  			{
  				/*A Set du flag d'execution de sequence */
  				vm_exe_seq_en_cours = True
  
  				DB_CTRL_TITLE@(vm_fenetre_TTU,"Li_status", "Execution en automatique")
  				DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_executer",True)
                DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_refuser",True)
                DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_lier",False)
                DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_sequence",False)

			if NOT vm_mode_formation
	  		{

  				if ( vm_NumSequence = XDC_VEN_SEQ_RETOUR_NORMAL )
					ITMA_TTU_Commande_Retour_Normal_VEN(vm_NumTube, XDC_FAUX)
  				else vm_NumAction = ITMA_TTU_Commande_Seq_Tunnel_ventilation (vm_NumTube, XDC_FAUX, vm_NumSequence)
  			}
  			}
        }

        /*A ----- modif code retour pour PA */
        if vm_Appel="ITMA_TPA" vm_mode_PA=COM_VALIDE 
        else vm_mode_PA=COM_REFUSE
		
		vm_NumEvt = 0
		vm_CleEvt = 0
		DB_CTRL_TITLE@(vm_fenetre_TTU,"Li_status2","")          		
		DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_executer",True)

    } else info_message@("Veuillez d'abord lier cette action a une F.M.C...")

'-- actions présentes sur les anciennes vues >>>

	/*A sur action lier FMC */
	CASE "BP_lier"

    vl_text = "Status : appel lien FMC"
 		DB_CTRL_TITLE@(vm_fenetre_TTU,"Li_status", vl_text)

		/*B on lance la tache de recherche d'evt cause*/
		tl_data=PEND_FOR_NEW_TASK@("ITMA_COM_Liste_Causes","ITMA_TTU_eclairage")
		tm_liste_causes=tl_data[0]

		/*B affiche la liste des evts a traiter*/
		DB_CTRL_DISPLAY@(vm_fenetre_TTU,"LI_Evenements",TRUE)
		DB_CTRL_DISPLAY@(vm_fenetre_TTU,"TA_Evenements",TRUE)
		DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"TA_Evenements",TRUE)
		DB_TABLE_ALLOW_COLUMN_RESIZING@(vm_fenetre_TTU,"TA_Evenements",True)
		DB_TABLE_SET_MARKER_WIDTH@(vm_fenetre_TTU, "TA_Evenements", 25)
		tl_titres[0] = COM_CAUSE_NUMERO,COM_CAUSE_LONG_NUMERO
		tl_titres[1] = COM_CAUSE_CLE,COM_CAUSE_LONG_CLE
		tl_titres[2] = COM_CAUSE_TYPE,COM_CAUSE_LONG_TYPE
		tl_titres[3] = COM_CAUSE_DATE,COM_CAUSE_LONG_DATE
		tl_titres[4] = COM_CAUSE_LOCALISATION,COM_CAUSE_LONG_LOCALISATION
		DB_TABLE_SET_DATA@(vm_fenetre_TTU,"TA_Evenements",tl_data[1],tl_titres)
		DB_TABLE_MARKER_PIXMAPS@(vm_fenetre_TTU, "TA_Evenements", 0, tl_data[2])

	/*B selection d'un element dans la liste des fiches a traiter*/	
  	CASE "TA_Evenements"
 		
      vl_text = "Status : selection evenement"
      DB_CTRL_TITLE@(vm_fenetre_TTU,"Li_status", vl_text)

      tl_retour=ITMA_COM_Validite_Cause("ITMA_TTU_eclairage", vm_fenetre_TTU, tm_liste_causes)
      vm_NumEvt = tl_retour[0][0]
      vm_CleEvt = tl_retour[0][1]
      vl_fmc = tl_retour[1]
      vl_text=TRIM@(SUBSTRING@(vl_fmc,1,46))
      vl_fmc=vl_text ++ "  " ++ TRIM@(SUBSTRING@(vl_fmc,60,18))
      
      DB_CTRL_DISPLAY@(vm_fenetre_TTU,"LI_Evenements",FALSE)
      DB_CTRL_DISPLAY@(vm_fenetre_TTU,"TA_Evenements",FALSE)
      DB_CTRL_TITLE@(vm_fenetre_TTU,"Li_status2",vl_fmc)
      
      if vm_NumEvt = 0 or vm_CleEvt = 0 
        DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_executer",True)
      else
        DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_executer",False)


	/*A sur action BP_explication */
	CASE "BP_explication"
		/* appel de MTEX avec passage en argument de l'explication */
		vl_erreur = NEW_TASK@("ITMA_TEX_Explication_Propo","ITMA_TTU_pilotage_d_un_tunnel",vl_explication)


	/*A sur action BP_ok */
	CASE "BP_ok"
		
		/*A MAJ de l'IHM */
		vl_text = "Confirmation de l'operateur sur Succes ..."
		DB_CTRL_TITLE@(vm_fenetre_TTU,"Li_status",vl_text)
		DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_ok",True)
		DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_nul",True)
		DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_quitter",False)
		DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_lier",False)	
		DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_executer",True)
		DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_sequence",False)
		DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_trafic_excep",False)
		DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_plage_horaire",False)
		if va_num_vue = 2
		{
			DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_ferm_trappes",False)
			DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_ouv_trappes",False)
		}			
		DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_desenfumage",False)
		ITMA_TTU_degriser_bandeau(vm_fenetre_TTU, vm_nom_tunnel)

		if STRING_INDEX@(UPPERCASE@(vm_nom_tunnel),"MONACO") <> 0
		{
			' On grise le BP sens opposé car on représente tout dans la meme vue
			DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_sens",true)	
		}
		
		/*A renvoi à la base du retour OK operateur */
		if NOT vm_mode_formation
		{
			vl_erreur = ITMA_TTU_Fin_Cmd_Manu_Tunnel(vm_NumAction,XDC_VRAI,vm_NumSequence)
		}
		
	/*A sur action BP_nul */
	CASE "BP_nul"

		/*A MAJ de l'IHM */
		vl_text = "Confirmation de l'operateur sur Echec ..."
		DB_CTRL_TITLE@(vm_fenetre_TTU,"Li_status",vl_text)
		DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_ok",True)
		DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_nul",True)
		DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_quitter",False)
		DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_lier",False)	
		DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_executer",True)
		DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_sequence",False)
		DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_trafic_excep",False)
		DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_plage_horaire",False)
		if va_num_vue = 2
		{
			DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_ferm_trappes",False)
			DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_ouv_trappes",False)
		}			
		DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_desenfumage",False)
		ITMA_TTU_degriser_bandeau(vm_fenetre_TTU, vm_nom_tunnel)

		if STRING_INDEX@(UPPERCASE@(vm_nom_tunnel),"MONACO") <> 0
		{
			' On grise le BP sens opposé car on représente tout dans la meme vue
			DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_sens",true)	
		}
		
		/*A renvoi à la base du retour NUL operateur */
		if NOT vm_mode_formation
		{
			vl_erreur = ITMA_TTU_Fin_Cmd_Manu_Tunnel(vm_NumAction,XDC_FAUX,vm_NumSequence)
		}		

	/*A sur action refuser */
	CASE "BP_refuser"

		vm_mode_PA = COM_REFUSE
		DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_executer",True)
		DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_refuser",True)

		vl_text = "Status : Refus de la proposition de plan d'action !!!"
		DB_CTRL_TITLE@(vm_fenetre_TTU,"Li_status",vl_text)
		
'-- <<< actions présentes sur les anciennes vues


	/*A sur action panneau 1 */
	CASE "BP_cmd1"
		ITMA_TTU_pix_ventilation_suivant(1)

	/*A sur action panneau 2 */
	CASE "BP_cmd2"
		ITMA_TTU_pix_ventilation_suivant(2)

	/*A sur action panneau 3 */
	CASE "BP_cmd3"
		ITMA_TTU_pix_ventilation_suivant(3)

	/*A sur action panneau 4 */
	CASE "BP_cmd4"
		ITMA_TTU_pix_ventilation_suivant(4)

	/*A sur action panneau 5 */
	CASE "BP_cmd5"
		ITMA_TTU_pix_ventilation_suivant(5)

	/*A sur action panneau 6 */
	CASE "BP_cmd6"
		ITMA_TTU_pix_ventilation_suivant(6)

	/*A sur action panneau 7 */
	CASE "BP_cmd7"
		ITMA_TTU_pix_ventilation_suivant(7)

	/*A sur action panneau 8 */
	CASE "BP_cmd8"
		ITMA_TTU_pix_ventilation_suivant(8)

	/*A sur action panneau 9 */
	CASE "BP_cmd9"
		ITMA_TTU_pix_ventilation_suivant(9)

	/*A sur action panneau 10 */
	CASE "BP_cmd10"
		ITMA_TTU_pix_ventilation_suivant(10)

	/*A sur action panneau 11 */
	CASE "BP_cmd11"
		ITMA_TTU_pix_ventilation_suivant(11)

	/*A sur action panneau 12 */
	CASE "BP_cmd12"
		ITMA_TTU_pix_ventilation_suivant(12)

	/*A sur action panneau 13 */
	CASE "BP_cmd13"
		ITMA_TTU_pix_ventilation_suivant(13)

	/*A sur action panneau 14 */
	CASE "BP_cmd14"
		ITMA_TTU_pix_ventilation_suivant(14)

	/*A sur action panneau 15 */
	CASE "BP_cmd15"
		ITMA_TTU_pix_ventilation_suivant(15)

	/*A sur action panneau 16 */
	CASE "BP_cmd16"
		ITMA_TTU_pix_ventilation_suivant(16)

	/*A sur action panneau 17 */
	CASE "BP_cmd17"
		ITMA_TTU_pix_ventilation_suivant(17)

	/*A sur action panneau 18 */
	CASE "BP_cmd18"
		ITMA_TTU_pix_ventilation_suivant(18)

	/*A sur action panneau 19 */          
	CASE "BP_cmd19"                       
		ITMA_TTU_pix_ventilation_suivant(19) 
                                      
	/*A sur action panneau 20 */          
	CASE "BP_cmd20"                       
		ITMA_TTU_pix_ventilation_suivant(20) 
                                      
	/*A sur action panneau 21 */          
	CASE "BP_cmd21"                       
		ITMA_TTU_pix_ventilation_suivant(21) 
                                      
	/*A sur action panneau 22 */          
	CASE "BP_cmd22"                       
		ITMA_TTU_pix_ventilation_suivant(22) 
                                      
	/*A sur action panneau 23 */          
	CASE "BP_cmd23"                       
		ITMA_TTU_pix_ventilation_suivant(23) 
                                      
	/*A sur action panneau 24 */          
	CASE "BP_cmd24"                       
		ITMA_TTU_pix_ventilation_suivant(24) 
                                      
	/*A sur action panneau 25 */          
	CASE "BP_cmd25"                       
		ITMA_TTU_pix_ventilation_suivant(25) 
                                      
	/*A sur action panneau 26 */          
	CASE "BP_cmd26"                       
		ITMA_TTU_pix_ventilation_suivant(26) 
                                      
	/*A sur action panneau 27 */          
	CASE "BP_cmd27"                       
		ITMA_TTU_pix_ventilation_suivant(27) 
                                      
	/*A sur action panneau 28 */         
	CASE "BP_cmd28"                      
		ITMA_TTU_pix_ventilation_suivant(28)
                                      
	/*A sur action panneau 29 */         
	CASE "BP_cmd29"                      
		ITMA_TTU_pix_ventilation_suivant(29)
                                      
	/*A sur action panneau 30 */         
	CASE "BP_cmd30"                      
		ITMA_TTU_pix_ventilation_suivant(30)
                                      
	/*A sur action panneau 31 */         
	CASE "BP_cmd31"                      
		ITMA_TTU_pix_ventilation_suivant(31)
                                      
	/*A sur action panneau 32 */         
	CASE "BP_cmd32"                      
		ITMA_TTU_pix_ventilation_suivant(32)
                                      
	/*A sur action panneau 33 */         
	CASE "BP_cmd33"                      
		ITMA_TTU_pix_ventilation_suivant(33)
                                      
	/*A sur action panneau 34 */         
	CASE "BP_cmd34"                      
		ITMA_TTU_pix_ventilation_suivant(34)
                                      
	/*A sur action panneau 35 */         
	CASE "BP_cmd35"                      
		ITMA_TTU_pix_ventilation_suivant(35)
                                      
	/*A sur action panneau 36 */         
	CASE "BP_cmd36"                      
		ITMA_TTU_pix_ventilation_suivant(36)
              
	/*A sur action panneau 37 */         
	CASE "BP_cmd37"                      
		ITMA_TTU_pix_ventilation_suivant(37)
                                      
	/*A sur action panneau 38 */         
	CASE "BP_cmd38"                      
		ITMA_TTU_pix_ventilation_suivant(38)
                                      
	/*A sur action panneau 39 */         
	CASE "BP_cmd39"                      
		ITMA_TTU_pix_ventilation_suivant(39)
                                      
	/*A sur action panneau 40 */         
	CASE "BP_cmd40"                      
		ITMA_TTU_pix_ventilation_suivant(40)
                                      
	/*A sur action panneau 41 */         
	CASE "BP_cmd41"                      
		ITMA_TTU_pix_ventilation_suivant(41)
                                      
	/*A sur action panneau 42 */         
	CASE "BP_cmd42"                      
		ITMA_TTU_pix_ventilation_suivant(42)
                                      
	/*A sur action panneau 43 */         
	CASE "BP_cmd43"                      
		ITMA_TTU_pix_ventilation_suivant(43)
                                      
	/*A sur action panneau 44 */         
	CASE "BP_cmd44"                      
		ITMA_TTU_pix_ventilation_suivant(44)
                                      
	/*A sur action panneau 45 */         
	CASE "BP_cmd45"                      
		ITMA_TTU_pix_ventilation_suivant(45)
                                      
	/*A sur action panneau 46 */         
	CASE "BP_cmd46"                      
		ITMA_TTU_pix_ventilation_suivant(46)

	/*A sur action panneau 47 */         
	CASE "BP_cmd47"                      
		ITMA_TTU_pix_ventilation_suivant(47)
                                      
	/*A sur action panneau 48 */         
	CASE "BP_cmd48"                      
		ITMA_TTU_pix_ventilation_suivant(48)
                                      
	/*A sur action panneau 49 */         
	CASE "BP_cmd49"                      
		ITMA_TTU_pix_ventilation_suivant(49)

	/*A sur action panneau 50 */         
	CASE "BP_cmd50"                      
		ITMA_TTU_pix_ventilation_suivant(50)
                                      
	/*A sur action panneau 51 */         
	CASE "BP_cmd51"                      
		ITMA_TTU_pix_ventilation_suivant(51)
                                      
	/*A sur action panneau 52 */         
	CASE "BP_cmd52"                      
		ITMA_TTU_pix_ventilation_suivant(52)
                                      
	/*A sur action panneau 53 */         
	CASE "BP_cmd53"                      
		ITMA_TTU_pix_ventilation_suivant(53)
                                      
	/*A sur action panneau 54 */         
	CASE "BP_cmd54"                      
		ITMA_TTU_pix_ventilation_suivant(54)
                                      
	/*A sur action panneau 55 */         
	CASE "BP_cmd55"                      
		ITMA_TTU_pix_ventilation_suivant(55)
                                      
	/*A sur action panneau 56 */         
	CASE "BP_cmd56"                      
		ITMA_TTU_pix_ventilation_suivant(56)

	/*A sur action panneau 57 */         
	CASE "BP_cmd57"                      
		ITMA_TTU_pix_ventilation_suivant(57)
                                      
	/*A sur action panneau 58 */         
	CASE "BP_cmd58"                      
		ITMA_TTU_pix_ventilation_suivant(58)
                                      
	/*A sur action panneau 59 */         
	CASE "BP_cmd59"                      
		ITMA_TTU_pix_ventilation_suivant(59)

	/*A sur action panneau 60 */         
	CASE "BP_cmd60"                      
		ITMA_TTU_pix_ventilation_suivant(60)
                                      
	/*A sur action panneau 61 */         
	CASE "BP_cmd61"                      
		ITMA_TTU_pix_ventilation_suivant(61)
                                      
	/*A sur action panneau 62 */         
	CASE "BP_cmd62"                      
		ITMA_TTU_pix_ventilation_suivant(62)
                                      
	/*A sur action panneau 63 */         
	CASE "BP_cmd63"                      
		ITMA_TTU_pix_ventilation_suivant(63)
                                      
	/*A sur action panneau 64 */         
	CASE "BP_cmd64"                      
		ITMA_TTU_pix_ventilation_suivant(64)
                                      
	/*A sur action panneau 65 */         
	CASE "BP_cmd65"                      
		ITMA_TTU_pix_ventilation_suivant(65)
                                      
	/*A sur action panneau 66 */         
	CASE "BP_cmd66"                      
		ITMA_TTU_pix_ventilation_suivant(66)

	/*A sur action panneau 67 */         
	CASE "BP_cmd67"                      
		ITMA_TTU_pix_ventilation_suivant(67)
                                      
	/*A sur action panneau 68 */         
	CASE "BP_cmd68"                      
		ITMA_TTU_pix_ventilation_suivant(68)
                                      
	/*A sur action panneau 69 */         
	CASE "BP_cmd69"                      
		ITMA_TTU_pix_ventilation_suivant(69)

	/*A sur action panneau 70 */         
	CASE "BP_cmd70"                      
		ITMA_TTU_pix_ventilation_suivant(70)
                                      
	/*A sur action panneau 71 */         
	CASE "BP_cmd71"                      
		ITMA_TTU_pix_ventilation_suivant(71)
                                      
	/*A sur action panneau 72 */         
	CASE "BP_cmd72"                      
		ITMA_TTU_pix_ventilation_suivant(72)
                                      
	/*A sur action panneau 73 */         
	CASE "BP_cmd73"                      
		ITMA_TTU_pix_ventilation_suivant(73)
                                      
	/*A sur action panneau 74 */         
	CASE "BP_cmd74"                      
		ITMA_TTU_pix_ventilation_suivant(74)
                                      
	/*A sur action panneau 75 */         
	CASE "BP_cmd75"                      
		ITMA_TTU_pix_ventilation_suivant(75)
                                      
	/*A sur action panneau 76 */         
	CASE "BP_cmd76"                      
		ITMA_TTU_pix_ventilation_suivant(76)

	/*A sur action panneau 77 */         
	CASE "BP_cmd77"                      
		ITMA_TTU_pix_ventilation_suivant(77)
                                      
	/*A sur action panneau 78 */         
	CASE "BP_cmd78"                      
		ITMA_TTU_pix_ventilation_suivant(78)
                                      
	/*A sur action panneau 79 */         
	CASE "BP_cmd79"                      
		ITMA_TTU_pix_ventilation_suivant(79)

	/*A sur action panneau 80 */         
	CASE "BP_cmd80"                      
		ITMA_TTU_pix_ventilation_suivant(80)
                                      
	/*A sur action panneau 81 */         
	CASE "BP_cmd81"                      
		ITMA_TTU_pix_ventilation_suivant(81)
                                      
	/*A sur action panneau 82 */         
	CASE "BP_cmd82"                      
		ITMA_TTU_pix_ventilation_suivant(82)
                                      
	/*A sur action panneau 83 */         
	CASE "BP_cmd83"                      
		ITMA_TTU_pix_ventilation_suivant(83)
                                      
	/*A sur action panneau 84 */         
	CASE "BP_cmd84"                      
		ITMA_TTU_pix_ventilation_suivant(84)
                                      
	/*A sur action panneau 85 */         
	CASE "BP_cmd85"                      
		ITMA_TTU_pix_ventilation_suivant(85)
                                      
	/*A sur action panneau 86 */         
	CASE "BP_cmd86"                      
		ITMA_TTU_pix_ventilation_suivant(86)

	/*A sur action panneau 87 */         
	CASE "BP_cmd87"                      
		ITMA_TTU_pix_ventilation_suivant(87)
                                      
	/*A sur action panneau 88 */         
	CASE "BP_cmd88"                      
		ITMA_TTU_pix_ventilation_suivant(88)
                                      
	/*A sur action panneau 89 */         
	CASE "BP_cmd89"                      
		ITMA_TTU_pix_ventilation_suivant(89)       
	   
	/*A sur action panneau 90 */         
	CASE "BP_cmd90"
		ITMA_TTU_pix_ventilation_suivant(90)
                
	/*A sur action panneau 91 */         
	CASE "BP_cmd91"
		ITMA_TTU_pix_ventilation_suivant(91)
                
	/*A sur action panneau 92 */         
	CASE "BP_cmd92"
		ITMA_TTU_pix_ventilation_suivant(92)
                
	/*A sur action panneau 93 */         
	CASE "BP_cmd93"
		ITMA_TTU_pix_ventilation_suivant(93)
                
	/*A sur action panneau 94 */         
	CASE "BP_cmd94"
		ITMA_TTU_pix_ventilation_suivant(94)
                
	/*A sur action panneau 95 */         
	CASE "BP_cmd95"
		ITMA_TTU_pix_ventilation_suivant(95)
                
	/*A sur action panneau 96 */         
	CASE "BP_cmd96"
		ITMA_TTU_pix_ventilation_suivant(96)

	/*A sur action panneau 97 */         
	CASE "BP_cmd97"
		ITMA_TTU_pix_ventilation_suivant(97)
                
	/*A sur action panneau 98 */         
	CASE "BP_cmd98"
		ITMA_TTU_pix_ventilation_suivant(98)
                
	/*A sur action panneau 99 */         
	CASE "BP_cmd99"
		ITMA_TTU_pix_ventilation_suivant(99)
					  
	/*A sur reception de poke */
	CASE "poke_"
	
		/*A suivant le canal de reception de poke */
		CASE OF DB_GET_POKE@(vm_fenetre_TTU)

		/*A si poke de fin de canal : fermeture de fenetre */
		CASE COM_CANAL_FIN
			/*A la fenetre n'est plus active */
			vl_fenetre_active = FALSE
			return

		/*A si poke de reception d'abonnement état eqp ventilation */
		CASE COM_CANAL_MTTU_EQP_VEN, COM_CANAL_MTTU_EQP_EXP

			/*A capture du message */
			vl_message = DB_GET_POKE_DATA@(vm_fenetre_TTU)
			vl_messageDecoupe = ARRAY_FROM_STRING@(vl_message[0],"|")
			vl_taille2 = ARRAY_SIZE@(vl_messageDecoupe)

			/*A trace de la reception du message */
			vm_text = COM09_Date_Courante() ++ "   MsgPoke MTTU_EQP_VEN : "
			for i = 0 to vl_taille2 - 1
				vm_text = vm_text ++ vl_messageDecoupe[i] ++ " / "
			next i
			COM01_Trace(0,vm_text)

			'-- parcours du tableau des messages
			for i = 0 to vl_taille2 - 1
			
				/*A décomposition des messages en tableau */
				vl_mess = ARRAY_FROM_STRING@(vl_messageDecoupe[i],",")
		  
				if ( vl_mess[0] = XDC_EQT_TUBE and vl_mess[1]+0 = vm_NumTube+0 )
				{				
					/*A on  boucle sur tous les panneaux présents sur l'IHM */
					if ( vl_mess[3] <> 0 )
					{
						vl_taille = ARRAY_SIZE@(vm_F_bouton)
						for j = 0 to vl_taille-1
							'-- comparaison avec type SAE et ID SAE au lieu de ID Intranet
							if ( vm_F_bouton[j,12] = vl_mess[2] and vm_F_bouton[j,4] = vl_mess[3] )
							{
								'-- MAJ du panneau sur l'IHM (avec gestion defaut et mode)
								ITMA_TTU_MAJ_ID_eqp_vent(j, vl_mess)
								break j
							}
						next j
					}
				}
				
			next i

		/* modification ABE du 26-01-2010 : griser BP_cde_incendie pour tube MONACO si pas en mode incendie : modif ABE du 22-05-2013 : on supprime cette condition */
/*
		if STRING_INDEX@(UPPERCASE@(vm_nom_tunnel),"MONACO") <> 0
		{
		vl_icon = DB_CTRL_GET_TITLE@(vm_fenetre_TTU, "BP_cde_incendie")
		if vl_icon = "pix_incendie_debut_40_40"
			DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_desenfumage",False)
		else
			DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_desenfumage",True)
		}
*/
		
		/*A si poke de reception d'abonnement état sequence */
		CASE COM_CANAL_MTTU_SEQ_VEN	

			/*A capture du message */
			vl_message = DB_GET_POKE_DATA@(vm_fenetre_TTU)

			/*A trace de la reception du message */
			vm_text = COM09_Date_Courante() ++ "   MsgPoke MTTU_SEQ_VEN : "
			vm_text =  vm_text ++ vl_message[0]
			COM01_Trace(0,vm_text)

			/*A décomposition du message reçu en tableau */
			vl_mess = ARRAY_FROM_STRING@(vl_message[0],",")

			/*A transfo. en numérique de variables */
			vl_mess[2] = vl_mess[2] + 0		
			vm_NumSequence = vm_NumSequence + 0

			/* Recuperation du numero du scenario en cours */
			vl_scenario_en_cours = vl_mess[2]
			
			/* Affichage du scenario en cours ou fin scenario */
			ITMA_TTU_maj_scenario_vent(vl_scenario_en_cours)

			if vl_mess[0] = XDC_EQT_TUBE and vl_mess[1] = vm_NumTube+0 
			and vl_mess[2] = vm_NumSequence+0 and vl_mess[3] = XDC_DEFAUT 
			and vm_exe_seq_en_cours
			{
				DB_CTRL_DISPLAY@(vm_fenetre_TTU,"BP_defaut",TRUE)
				vl_defaut_sequence = TRUE
			}

			if vl_mess[0] = XDC_EQT_TUBE and vl_mess[1] = vm_NumTube+0 
			and vl_mess[2] = vm_NumSequence+0 and vl_mess[3] = XDC_NORMAL 
			and vm_exe_seq_en_cours
			{
				DB_CTRL_DISPLAY@(vm_fenetre_TTU,"BP_defaut",FALSE)
				vl_defaut_sequence = FALSE
			}
			
		/*A si poke de reception d'abonnement état domaine ventilation */
		CASE COM_CANAL_MTTU_DOM_VEN	

			/*A capture du message */
			vl_message = DB_GET_POKE_DATA@(vm_fenetre_TTU)
			vl_mess = ARRAY_FROM_STRING@(vl_message[0],",")
	
			/*A trace de la reception du message */
			vm_text = COM09_Date_Courante() ++ "   MsgPoke MTTU_DOM_VEN : "
			vm_text =  vm_text ++ vl_message[0]
			COM01_Trace(0,vm_text)

			if vl_mess[0] <> XDC_EQT_TUBE or vl_mess[1]+0 <> vm_NumTube+0
			{
				GOTO FIN_DOMAINE_VENT
 			}
				
			if STRING_INDEX@(UPPERCASE@(vl_tunnel),"TOULON") = 0
			/* Tunnel hors TOULON */
			{
				if vl_mess[2] = 1 '' mode MANU
					ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_ventilation","pix_manuel",3,4)
				if vl_mess[2] = 0 '' mode AUTO
					ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_ventilation","pix_auto",3,4)
			}
			else
			/********************** Tunnel TOULON *******************/
			{
				/* tableau des valeurs
				Mode Manu Ventilation Accélérateur	1
				Mode Auto Ventilation Accélérateur	2
				Mode Manu Ventilation				3
				Mode Auto Ventilation 				4
				*/
				
				/*A décomposition des messages en tableau */
				if vl_mess[2] = 1
				{
				ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_ventilation2", 		
										"pix_manu_40_20",3,4)
				}
				if vl_mess[2] =  2
				{
				ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_ventilation2", 		
										"pix_auto_40_20",3,4)
				}
				if vl_mess[2] = 3
				{
				ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_ventilation", 		
										"pix_manu_40_20",3,4)
				}
				if vl_mess[2] =  4
				{
				ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_ventilation", 		
										"pix_auto_40_20",3,4)
				}
			}
			
			/* Recuperation du numero du scenario en cours */
			vl_scenario_en_cours = vl_mess[3]
			
			/* Affichage du scenario en cours ou fin scenario */
			'ITMA_TTU_maj_scenario_vent(vl_scenario_en_cours)

			FIN_DOMAINE_VENT :
			
		/*A si poke de reception d'abonnement état domaine eclairage */
		CASE COM_CANAL_MTTU_DOM_ECL	

			vl_message = DB_GET_POKE_DATA@(vm_fenetre_TTU)
			vl_mess = ARRAY_FROM_STRING@(vl_message[0],",")

			/*A trace de la reception du message */
			vm_text = COM09_Date_Courante() ++ "   MsgPoke MTTU_ECL : " ++ vl_message[0]
			COM01_Trace(0,vm_text)

			if vl_mess[0] <> XDC_EQT_TUBE or vl_mess[1]+0 <> vm_NumTube+0
			{
				GOTO FIN_DOMAINE_ECL
 			}
			
			if vl_mess[2] = -1
			{
				GOTO SCENARIO_EN_COURS
 			}
			if STRING_INDEX@(UPPERCASE@(vm_nom_tunnel),"TOULON") <> 0
			/************* Tunnel Toulon *******************/
			{
				/*
				Mode Auto eclairage de base	1
				Mode Manuel eclairage de base	2
				Mode Horaire Eclairage de base	3
				Mode Nominal Eclairage de base	4
					
				Mode Auto eclairage renforcement entree	5
				Mode Manuel eclairage renforcement entree	6
				Mode Horaire Eclairage renfort entrée	7
				Mode Nominal Eclairage renfort entrée	8
					
				Mode Auto eclairage renforcement sortie	9
				Mode Manuel eclairage renforcement sortie	10
				Mode Horaire Eclairage renfort sortie	11
				Mode Nominal Eclairage renfort sortie	12				
				*/
				if vl_mess[2] = 1
				{
					ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairageBASEAUTO", 		
											"pix_auto_40_20",3,4)
				}
				if vl_mess[2] = 2
				{
					ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairageBASEAUTO", 		
											"pix_manu_40_20",3,4)
				}
				if vl_mess[2] = 3
				{
					ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairageBASENOM", 		
											"pix_horaire_40_20",3,4)
				}
				if vl_mess[2] = 4
				{
					ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairageBASENOM", 		
											"pix_nominal_40_20",3,4)
				}
				if vl_mess[2] = 5
				{
					ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairageRFEAUTO", 		
											"pix_auto_40_20",3,4)
				}
				if vl_mess[2] = 6
				{
					ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairageRFEAUTO", 		
											"pix_manu_40_20",3,4)
				}
				if vl_mess[2] = 7
				{
					ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairageRFENOM", 		
											"pix_horaire_40_20",3,4)
				}
				if vl_mess[2] = 8
				{
					ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairageRFENOM", 		
											"pix_nominal_40_20",3,4)
				}
				if vl_mess[2] = 9
				{
					ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairageRFSAUTO", 		
											"pix_auto_40_20",3,4)
				}
				if vl_mess[2] = 10
				{
					ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairageRFSAUTO", 		
											"pix_manu_40_20",3,4)
				}
				if vl_mess[2] = 11
				{
					ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairageRFSNOM", 		
											"pix_horaire_40_20",3,4)
				}
				if vl_mess[2] = 12
				{
					ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairageRFSNOM", 		
											"pix_nominal_40_20",3,4)
				}
				if vl_mess[2] = 13
				{
					ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairageTREAUTO", 		
											"pix_auto_40_20",3,4)
				}
				if vl_mess[2] = 14
				{
					ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairageTREAUTO", 		
											"pix_manu_40_20",3,4)
				}
			}

			if STRING_INDEX@(UPPERCASE@(vm_nom_tunnel),"MONACO") = 0 and
				STRING_INDEX@(UPPERCASE@(vm_nom_tunnel),"TOULON") = 0
			/************* Tunnel générique hors Monaco et Toulon *******************/
			{

				/* Affichage du mode  MANU */
				if vl_mess[2] = 1
				{
					'' mode MANU
					ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairage", 		
											"pix_manuel",3,4)
				}
				if vl_mess[2] = 0
				{
					'' mode AUTO/NOMINAL
					ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairage", 		
											"pix_nominal",3,4)
					/*DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_executer",True)	*/

				}
				if vl_mess[2] = 2
				{
					'' mode AUTO/HORAIRE
					ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairage", 		
											"pix_horaire",3,4)
					/*DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_executer",True)	*/
				}
			}
			if STRING_INDEX@(UPPERCASE@(vm_nom_tunnel),"MONACO") <> 0
			/********************** Tunnel Monaco ***********************/
			{
			/* Affichage du mode AUTO */
			if vl_mess[2] = 0
			{
			'' mode MANU
			ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairage", 		
									"pix_auto",3,4)
			}


			/* Affichage du mode MANUEL */
			if vl_mess[2] = 1
			{
			'' mode MANU
			ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairage", 		
									"pix_manuel",3,4)
			ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairage_MC2", 		
									"pix_aucun",3,4)
			ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairage_MC3", 		
									"pix_aucun",3,4)
			DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_sequence",False)
			}
			if vl_mess[2] = 24
			{
			'' mode AUTO/HORAIRE NORD + AUTO/HORAIRE SUD
			ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairage_MC2", 		
									"pix_horaire_nord",3,4)
			ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairage_MC3", 		
									"pix_horaire_sud",3,4)
			ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairage", 		
									"pix_auto",3,4)
			}
			if vl_mess[2] = 25
			{
			'' mode AUTO/HORAIRE NORD + AUTO/NOMINAL SUD
			ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairage_MC2", 		
									"pix_horaire_nord",3,4)
			ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairage_MC3", 		
									"pix_nominal_sud",3,4)
			ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairage", 		
									"pix_auto",3,4)
			}
			if vl_mess[2] = 34
			{
			'' mode AUTO/NOMINAL NORD + AUTO/HORAIRE SUD
			ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairage_MC2", 		
									"pix_nominal_nord",3,4)
			ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairage_MC3", 		
									"pix_horaire_sud",3,4)
			ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairage", 		
									"pix_auto",3,4)
			}
			if vl_mess[2] = 35
			{
			'' mode AUTO/NOMINAL NORD + AUTO/NOMINAL SUD
			ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairage_MC2", 		
									"pix_nominal_nord",3,4)
			ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairage_MC3", 		
									"pix_nominal_sud",3,4)
			ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairage", 		
									"pix_auto",3,4)
			}

			}
			/* Affichage du regime d'eclairage */
			ITMA_TTU_maj_regime_ecl(vm_fenetre_TTU, vl_mess, vm_Sce_Eclairage, vm_nom_tunnel)
			
			'' Gestion de l'affichage du scénario en cours
			SCENARIO_EN_COURS :

			FIN_DOMAINE_ECL :
			
		/*A si poke de reception d'abonnement état sequence */
		CASE COM_CANAL_MTTU_SEQ_ECL	
			
			/*A capture du message */
			vl_message = DB_GET_POKE_DATA@(vm_fenetre_TTU)
			vl_mess = ARRAY_FROM_STRING@(vl_message[0],",")
			
			/*A trace de la reception du message */
			vm_text = COM09_Date_Courante() ++ "   MsgPoke MTTU_SEQ : "
			vm_text =  vm_text ++ vl_message[0]
			COM01_Trace(0,vm_text)

			if vl_mess[0] = XDC_EQT_TUBE and vl_mess[1]+0 = vm_NumTube+0
			{									
				ITMA_TTU_maj_regime_ecl(vm_fenetre_TTU, vl_mess, vm_Sce_Eclairage, vm_nom_tunnel)									
			}
			
		ENDCASE

	/*A sur action BP_actuel */
	CASE "BP_actuel"
		info_message@("Zone correspondant à l'état actuel des panneaux ...")

	/*A sur action BP_nouveau */
	CASE "BP_nouveau"
		info_message@("Zone de commande des panneaux ...")

	/*A sur action quitter */
	CASE "BP_quitter"

		/*A la fenetre n'est plus active */
		vl_fenetre_active = FALSE
		vl_ventilation = FALSE

        if ( vm_Appel = "ITMA_TPA" )
			RETURN(vm_mode_PA)
				
	/*A sur action quitter TMC*/
	CASE "BP_quitterTMC"

		/*A la fenetre n'est plus active */
		vl_fenetre_active = FALSE
		vl_ventilation = FALSE
		
	ENDCASE

/*A fin tant que */
WEND

DB_CLOSE@()

/*B Fermer des abonnements */
'--ITMA_TTU_Abt_Etat_eqp_ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube, vm_NomSite)
'--ITMA_TTU_Abt_Etat_Seq_Ventilation(XDC_FERMER_ABONNEMENT_EQUEXT,vm_NumTube)
'--DELAY@(1)

/*A fin tant que */
WEND

RETURN


ENDMACRO


/* ----------------------------------------------------------------------------
* SERVICE RENDU : creation generique des equipements	
*
*  ----------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TTU_creation_eqp_ventilation()
var vl_taille
var i
var vl_num_eqp
var vl_numero
var vl_icon
var vl_xpos, vl_ypos, vl_xpos2, vl_ypos2
var vl_color
var vl_titre,vl_titre2,vl_titre3,vl_titre4
var vl_TypeEqp
var vl_idEqp

/*A Créer et positionner les panneaux */
vl_color[0] = 255
vl_color[1] = 0,0,0
vl_color[0] = 1
vl_color[1] = 255,255,255


vm_F_bouton = null
vl_taille = ARRAY_SIZE@(vm_Eqp_Ventilation) -1
for i = 1 to vl_taille
	vl_numero = i
	vl_num_eqp = vm_Eqp_Ventilation[vl_numero,4]
	vm_F_bouton[vl_numero,0]	= 0					' le n° du picto associé
	vm_F_bouton[vl_numero,1]	= vm_Eqp_Ventilation[vl_numero,0] 'num eqt
	vm_F_bouton[vl_numero,2]	= vm_Eqp_Ventilation[vl_numero,14] 'picto par defaut
	vm_F_bouton[vl_numero,3]	= vm_Eqp_Ventilation[vl_numero,1]  'type (T ou E)
	vm_F_bouton[vl_numero,4]	= vm_Eqp_Ventilation[vl_numero,4]  'n° eqt en base
	vm_F_bouton[vl_numero,5]	= vm_Eqp_Ventilation[vl_numero,7] 'defaut critique
	vm_F_bouton[vl_numero,6]	= vm_Eqp_Ventilation[vl_numero,8] 'defaut majeur
	vm_F_bouton[vl_numero,7]	= vm_Eqp_Ventilation[vl_numero,9] 'defaut mineur
	vm_F_bouton[vl_numero,8]	= vm_Eqp_Ventilation[vl_numero,10] 'hors service
	vm_F_bouton[vl_numero,9]	= vm_Eqp_Ventilation[vl_numero,11] 'pas de defaut
	vm_F_bouton[vl_numero,10] = vm_Eqp_Ventilation[vl_numero,12] 'mode local
	vm_F_bouton[vl_numero,11] = vm_Eqp_Ventilation[vl_numero,13] 'mode distant
	vm_F_bouton[vl_numero,12] = vm_Eqp_Ventilation[vl_numero,3] 'type eqp

	vl_icon 	= vm_Eqp_Ventilation[vl_numero,14]  'le picto à afficher par defaut
	vl_xpos 	= vm_Eqp_Ventilation[vl_numero,5]	' la position X
	vl_ypos 	= vm_Eqp_Ventilation[vl_numero,6]	' la position Y
	vl_idEqp	= vm_Eqp_Ventilation[vl_numero,3]
	vl_TypeEqp	= vm_Eqp_Ventilation[vl_numero,15]

	/* si c'est un equipement de type specifique 
	 (gestion BP incendie BP trafic, plages horaires...) 
	 on ne cree rien car ils sont dejà existants dans l'IHM */
	if STRING_INDEX@(UPPERCASE@(vl_icon),  "SCENARIO") <> 0 or 
		STRING_INDEX@(UPPERCASE@(vl_icon),  "INCENDIE_AUTRE_SENS") <> 0
	{
		GOTO SUIVANT
	}
	
	/* creation des objets cadre et mode local */
	vl_titre3 = "BP_cadre" ++ vl_numero
	DB_CREATE_CTRL@(vm_fenetre_TTU,6,vl_titre3,
			vm_Eqp_Ventilation[vl_numero,11],vl_xpos-3,vl_ypos - 280-3,0)
	DB_CTRL_DISPLAY@(vm_fenetre_TTU,vl_titre3,FALSE)

	'' positionner le mode local en fonction du type de picto
	if STRING_INDEX@(vl_icon,"40_40") <> 0
	{
		vl_xpos2 = vl_xpos+40
		vl_ypos2 = vl_ypos - 250
	}
	else
	{
		vl_xpos2 = vl_xpos+7
		vl_ypos2 = vl_ypos - 260
	}
	vl_titre4 = "BP_local" ++ vl_numero
	DB_CREATE_CTRL@(vm_fenetre_TTU,6,vl_titre4,
			vm_Eqp_Ventilation[vl_numero,12],vl_xpos2,vl_ypos2,0)
	DB_CTRL_DISPLAY@(vm_fenetre_TTU,vl_titre4,FALSE)

	/* creation des objets BP commande et BP etat */
	vl_titre 	= "BP_cmd" ++ vl_numero
	vl_titre2 = "BP_panneau" ++ vl_numero	
	
	' on ne commande pas les trappes et accelerateurs en individuel pour MONACO
	if not(STRING_INDEX@(UPPERCASE@(vm_nom_tunnel),"MONACO") <> 0 and
		(STRING_INDEX@(UPPERCASE@(vl_TypeEqp),"ACCELERATEUR") <> 0 or
		STRING_INDEX@(UPPERCASE@(vl_TypeEqp),"VENTILATEUR") <> 0 or
		STRING_INDEX@(UPPERCASE@(vl_TypeEqp),"TRAPPE") <> 0) )
		AND
		not(STRING_INDEX@(UPPERCASE@(vm_nom_tunnel),"TOULON S2") <> 0 and
		(STRING_INDEX@(UPPERCASE@(vl_TypeEqp),"REGISTRE") <> 0) )		
	{
		DB_CREATE_CTRL@(vm_fenetre_TTU,3,vl_titre,vl_icon,vl_xpos,vl_ypos,0)
		DB_CTRL_BUTTON_TYPE@(vm_fenetre_TTU,vl_titre,4)
	}
	DB_CREATE_CTRL@(vm_fenetre_TTU,6,vl_titre2,vl_icon,vl_xpos,vl_ypos - 280,0)
	DB_CTRL_BUTTON_TYPE@(vm_fenetre_TTU,vl_titre2,4)
	DB_CTRL_GRAYED@(vm_fenetre_TTU,vl_titre2,True)

	' pas la place d'afficher les id equipements pour les trappes de Monaco
	if not(STRING_INDEX@(UPPERCASE@(vm_nom_tunnel),"MONACO") <> 0 and
		STRING_INDEX@(UPPERCASE@(vl_TypeEqp),"TRAPPE") <> 0)
	{
		/*!! Ajout des numeros de panneaux au dessus des cadres */
		vl_titre  = "BP_Lib_Pan" ++ vl_numero	' libelle panneau
		
		' pas la place d'afficher les type equipements pour les trappes de Toulon
		if not(STRING_INDEX@(UPPERCASE@(vm_nom_tunnel),"TOULON") <> 0 and
			STRING_INDEX@(UPPERCASE@(vl_TypeEqp),"TRAPPE") <> 0) 
			vl_numero = vl_idEqp ++ "-" ++ vl_num_eqp
		else
			vl_numero = vl_num_eqp

		' cas particulier de toulon
		if tm_affiche_repere = 1 and  
			not(STRING_INDEX@(UPPERCASE@(vm_nom_tunnel),"TOULON") <> 0 and
			STRING_INDEX@(UPPERCASE@(vl_TypeEqp),"TRAPPE") <> 0)
		{			
			DB_CREATE_CTRL@(vm_fenetre_TTU,3,vl_titre,vl_numero,vl_xpos-1,vl_ypos-296,0)
			DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU,vl_titre,vl_color)
			DB_CTRL_FONT@(vm_fenetre_TTU, vl_titre,"-adobe-courier-bold-r-normal--10-100-75-75-m-65-iso8859-1")
			DB_CTRL_GRAYED@(vm_fenetre_TTU,vl_titre,True)
		}
	}

	' pas la place d'afficher les id equipements pour les 
	' trappes  et accelerateurs de Monaco/TOULON
	if not(STRING_INDEX@(UPPERCASE@(vm_nom_tunnel),"MONACO") <> 0 and
		(STRING_INDEX@(UPPERCASE@(vl_TypeEqp),"ACCELERATEUR") <> 0 or
		STRING_INDEX@(UPPERCASE@(vl_TypeEqp),"VENTILATEUR") <> 0 or
		STRING_INDEX@(UPPERCASE@(vl_TypeEqp),"TRAPPE") <> 0) )
	{
		vl_titre2 = "BP_Lib_Cmd" ++ vl_numero	' libelle cmd panneau
		
		if not(STRING_INDEX@(UPPERCASE@(vm_nom_tunnel),"TOULON") <> 0 and
			STRING_INDEX@(UPPERCASE@(vl_TypeEqp),"TRAPPE") <> 0) 
			vl_numero = vl_idEqp ++ "-" ++ vl_num_eqp
		else
			vl_numero = vl_num_eqp
		
		' cas particulier de toulon
		if tm_affiche_repere = 1 and  
			not(STRING_INDEX@(UPPERCASE@(vm_nom_tunnel),"TOULON") <> 0 and
			STRING_INDEX@(UPPERCASE@(vl_TypeEqp),"TRAPPE") <> 0)		
		{
			DB_CREATE_CTRL@(vm_fenetre_TTU,3,vl_titre2,vl_numero,vl_xpos-1,vl_ypos-14,0) 
			DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU,vl_titre2,vl_color)
			DB_CTRL_FONT@(vm_fenetre_TTU, vl_titre2,"-adobe-courier-bold-r-normal--10-100-75-75-m-65-iso8859-1")
			DB_CTRL_GRAYED@(vm_fenetre_TTU,vl_titre2,True)
		}
	}
	SUIVANT :
	
next i


RETURN

ENDMACRO

/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU : Choisir le picto suivant pour le panneau désiré
*
*  ----------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TTU_pix_ventilation_suivant(va_num)

/*
* ARGUMENTS EN ENTREE : 
*	va_num	: le N° du bouton
*
* ARGUMENTS EN SORTIE : Aucun
*
* CODE RETOUR         : COM_OK
*
* CONDITION D'UTILISATION
*   Clique sur un panneau dans le vue tunnel
*
* FONCTION
*    Choisir le picto suivant pour le panneau désiré
*
---------------------------------------------------------------------------- */

var	vl_titre
var	vl_objet
var i
var	vl_trouve
var vl_num_eqp
var vl_icon
var vl_xpos
var vl_ypos
var vl_tmp
var vl_pos
var vl_taille
var tl_eqp
var vl_index

if NOT(COM04_Operateur_A_Le_Droit_De(XDC_FAM_EXPLOITATION)) and NOT vm_mode_formation
{
	RETURN(COM_OK)
}

vl_objet = "BP_cmd" ++ va_num
vl_trouve = false

/*A dégriser le bouton 'BP_executer' */
DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_executer",False)

/*A MAJ du mode manuel sur le bouton 'BP_manuel' */
DB_CTRL_DISPLAY@(vm_fenetre_TTU,"BP_manuel",TRUE)
DB_DESTROY_CTRL@(vm_fenetre_TTU,"BP_manuel")
DB_CREATE_CTRL@(vm_fenetre_TTU,3,"BP_manuel","pix_manu",POSX_BP_INDIVIDUEL,POSY_BP_INDIVIDUEL,0)
DB_CTRL_BUTTON_TYPE@(vm_fenetre_TTU,"BP_manuel",4)

vl_tmp = NULL

vl_num_eqp = vm_F_bouton[va_num,1]
tl_eqp = ARRAY_COLUMN@(vm_Eqp_Ventilation, 0)
vl_index = ARRAY_INDEX@(tl_eqp, vl_num_eqp)
vl_tmp = vm_Eqp_Ventilation[vl_index]

vl_pos = vm_F_bouton[va_num,0] ''n° de position de l'icone
vl_titre = vm_F_bouton[va_num,2] ''nom de l'icone

vl_trouve = FALSE
WHILE (NOT vl_trouve)

	vl_pos = vl_pos + 1 ''incrementation de la position

	/**********************************************************************/
	/*** CAS PARTICULIER DE TOULON AVEC les ventilateurs / accelerateurs variateur      ***/
	/**********************************************************************/
	if STRING_INDEX@(UPPERCASE@(vm_nom_tunnel),"TOULON") <> 0
	{
		''recuperation du nom de l'icone
		vl_titre = vl_tmp[vl_pos+14]
		if vl_titre = "pix_ventilateur_40_40_marche" and vl_pos > 4
		{
		/* on saute la position */
		vl_pos = vl_pos + 1
		}
		
		if (vl_titre = "pix_accelerateur_40_40_sens_1" or vl_titre = "pix_accelerateur_40_40_sens_2") and vl_pos > 4
		{
		/* on saute 2 positions */
		vl_pos = vl_pos + 2
		}		
	}
	
	''verif du debordement
	vl_taille = ARRAY_SIZE@(vl_tmp)-14
	if vl_pos >= vl_taille
	{
		vl_pos = 0
	}
	''recuperation du nom de l'icone
	vl_titre = vl_tmp[vl_pos+14]

	'si le fichier pixel existe
	if( FILE_EXISTS@(REP_CONFIG ++ "pic/" ++vl_titre++".im"))
		vl_trouve = TRUE

WEND

vm_F_bouton[va_num,0]  = vl_pos ''n° de position de l'icone
vm_F_bouton[va_num,2]  = vl_titre ''nom de l'icone

/*A MAJ du bouton */
'DB_CTRL_TITLE@(vm_fenetre_TTU,vl_objet,vl_titre)
vl_icon 	= vl_titre	' le picto à afficher par defaut
vl_xpos = vm_Eqp_Ventilation[va_num,5]	' la position X
vl_ypos = vm_Eqp_Ventilation[va_num,6]	' la position Y
DB_CTRL_DISPLAY@(vm_fenetre_TTU,vl_objet,FALSE)
DB_DESTROY_CTRL@(vm_fenetre_TTU,vl_objet)
DB_CREATE_CTRL@(vm_fenetre_TTU,3,vl_objet,vl_icon,vl_xpos,vl_ypos,0)
DB_CTRL_BUTTON_TYPE@(vm_fenetre_TTU,vl_objet,4)

/*A MAJ du message status */
vl_titre = "Status : Modification du panneau n° "++vm_F_bouton[va_num,12]++"-"++vm_F_bouton[va_num,4]
DB_CTRL_TITLE@(vm_fenetre_TTU,"Li_status",vl_titre)

/*A retour OK */
RETURN(COM_OK)

ENDMACRO

/*X*/
MACRO ITMA_TTU_Pilote_mode_ventilation(va_mode, va_NumTube, va_NumBP)

/*-------------------------------------------------------------------------------
* ARGUMENTS EN ENTREE : 
*		va_mode		:	mode ventilation
*
* ARGUMENTS EN SORTIE : aucun
*
* CODE RETOUR	: COM_OK en cas d'execution correcte, COM_NOK sinon.
*
* CONDITION D'UTILISATION :
*   
*
* FONCTION :
*	Permet de commander le mode MANU/AUTO du mode ventilation.
* ------------------------------------------------------------------------------- */
/*
BP_MANUEL
BP_AUTO
*/
	VAR vl_cmd
	VAR vl_text
	VAR vl_mode

	/*A trace de l'appel de procedure */
	vm_text = COM09_Date_Courante()  
	vm_text =  vm_text ++ " --> XZET02_Pilote_mode_Ventilation "
	COM01_Trace(0,vm_text)

	/*B preparation de la requete pour le coupleur */
	vl_cmd[0]=MTAR_MSG_EXEC

	/*B Identifiant de la fonction ventilation */
	vl_cmd[1]=MTTU_FCT_VEN			

	/*B Domaine tunnel ou echangeur */
	vl_cmd[2]=MTAR_DOM_TTU  
	
	if va_mode = "BP_ARRET"
		/* en attente mise à jour TESAE et TEWDOP sinon plantage !!! */
		vl_mode = 6
		'vl_mode = 2
		
	'' hors TOULON
	if STRING_INDEX@(UPPERCASE@(vm_nom_tunnel),"TOULON") = 0
	{
		if va_mode = "BP_MANUEL"
			vl_mode = 1		
		if va_mode = "BP_AUTO"
			vl_mode = 0
	}
	'' ouvrage TOULON
	if STRING_INDEX@(UPPERCASE@(vm_nom_tunnel),"TOULON") <> 0
	{
		if va_NumBP = 2
		{
			if va_mode = "BP_MANUEL"
				vl_mode = 1
			if va_mode = "BP_AUTO"
				vl_mode = 2
		}
		if va_NumBP = 1
		{
			if va_mode = "BP_MANUEL"
				vl_mode = 3
			if va_mode = "BP_AUTO"
				vl_mode = 4
		}
	}
	/*B arguments */
	vl_cmd[3]= va_NumTube ++ MTAR_CAR_SEPAR ++ vl_mode

	/*B envoi de la commande a la tache ITMA_TAR01 */
	DB_SEND_POKE@(COM_CANAL_TAR01,vl_cmd)
	
	/*B trace de l'émmission */
	vl_text = COM09_Date_Courante() ++ " - DB_SEND_POKE@(COM_CANAL_TAR01," ++ vl_cmd[0]++ ","++vl_cmd[1]++","++vl_cmd[2]++","++vl_cmd[3] ++ ")"
	COM01_Trace(0,vl_text)
	
	/*B code retour OK */
	RETURN(COM_OK)

ENDMACRO


/*X*/
/* ------------------------------------------------------------------------------
* SERVICE RENDU :	Permet de commander un ou plusieurs  panneaux.
*
* -------------------------------------------------------------------------------*/

MACRO ITMA_TTU_Pilote_eqp_vent(va_NumTube, va_TypesEq, va_NumEqt, va_Position)

/*-------------------------------------------------------------------------------
* ARGUMENTS EN ENTREE : 
*		va_NumTube		:	Numero tu tube
*		va_TypesEq		:	La chaine des types des panneaux à piloter
*		va_NumEqt			:	La chaine des panneaux à piloter
*		va_Position		:	La chaine des positions à commander
*
* ARGUMENTS EN SORTIE : aucun
*
* CODE RETOUR	: COM_OK en cas d'execution correcte, COM_NOK sinon.
*
* CONDITION D'UTILISATION :
*   ITMA_TCA_pilotage_camera
*
* FONCTION :
*	Permet de commander un ou plusieurs panneaux.
* ------------------------------------------------------------------------------- */

	VAR vl_cmd
	VAR vl_text

	/*A trace de l'appel de procedure */
	vm_text = COM09_Date_Courante()  
	vm_text =  vm_text ++ " --> XZET01_Pilote_panneau "
	COM01_Trace(0,vm_text)

	/*B preparation de la requete pour le coupleur */
	vl_cmd[0]=MTAR_MSG_EXEC

	/*B Identifiant de la fonction ventilation */
	vl_cmd[1]=MTTU_FCT_VEN			

	/*B fonction a executer */
	vl_cmd[2]=MTAR_FCT_XZET01  

	/*B arguments */
	vl_cmd[3]= va_NumTube ++ MTAR_CAR_SEPAR ++ va_TypesEq ++ MTAR_CAR_SEPAR ++ va_NumEqt ++ MTAR_CAR_SEPAR ++ va_Position ++ MTAR_CAR_SEPAR ++ 0

	/*B envoi de la commande a la tache ITMA_TAR01 */
	DB_SEND_POKE@(COM_CANAL_TAR01,vl_cmd)
	
	/*B trace de l'émmission */
	vl_text = COM09_Date_Courante() ++ " - DB_SEND_POKE@(COM_CANAL_TAR01," ++ vl_cmd[0]++ ","++vl_cmd[1]++","++vl_cmd[2]++","++vl_cmd[3] ++ ")"
	COM01_Trace(0,vl_text)
	
	/*B code retour OK */
	RETURN(COM_OK)

ENDMACRO


/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :	MAJ du panneau dans la vue actuelle
* 
*  ----------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TTU_MAJ_ID_eqp_vent(va_num,va_msg)

/*
* ARGUMENTS EN ENTREE : 
*	va_num	: le N° du panneau à modifier
*	va_msg	: msg recu
*
* ARGUMENTS EN SORTIE : Aucun
*
* CODE RETOUR         : COM_OK
*
* CONDITION D'UTILISATION
*   appel de cette procedure
*
* FONCTION
*    MAJ du panneau dans la vue actuelle
*
---------------------------------------------------------------------------- */

var	vl_picto, vl_picto_etat, vl_picto_mode
var	vl_objet, vl_objet_etat, vl_objet_mode
var	i
var	vl_size
var	vl_taille
var	vl_icon
var	vl_xpos
var	vl_ypos
var	vl_pos
var	vl_etat
var	vl_mode
var	vl_numeqp
var	vl_text

/* utilisation des cst pour les defaut equipement
XDC_NORMAL		0
XDC_EQP_DEF_CRIT	3
XDC_EQP_DEF_MAJEUR	2
XDC_EQP_DEF_MINEUR	1
XDC_EQP_HS		4
vl_mess[2]	type panneau (SAE)
vl_mess[3]	id panneau (SAE)
vl_mess[4]	position panneau
vl_mess[5]	etat defaut du panneau
vl_mess[6]	mode local /distant du panneau
*/

/*A si le bouton existe */
if vm_F_bouton[va_num,1] = ""
	Return(COM_NOK)

vl_numeqp = va_num
vl_pos = va_msg[4]
vl_etat =  va_msg[5]
vl_mode =  va_msg[6]

vl_xpos = vm_Eqp_Ventilation[vl_numeqp,5]
vl_ypos = vm_Eqp_Ventilation[vl_numeqp,6]
vl_icon = vm_Eqp_Ventilation[vl_numeqp,14]

/* si c'est l'equipement specifique pour mode ventilation et eclairage */
if STRING_INDEX@(UPPERCASE@(vl_icon),  "VEN_MODE") <> 0 or STRING_INDEX@(UPPERCASE@(vl_icon),  "ECL_MODE") <> 0 or STRING_INDEX@(UPPERCASE@(vl_icon),  "ECL_REGIME") <> 0 
{	
	ITMA_TTU_maj_BP_vent(va_num,va_msg)
	Return(COM_OK)
}

/* si c'est l'equipement specifique pour Bloquage des commandes IHM incendie si incendie dans l'autre sens */
if STRING_INDEX@(UPPERCASE@(vl_icon),  "INCENDIE_AUTRE_SENS") <> 0
{	
	ITMA_TTU_maj_BP_vent(va_num,va_msg)
	Return(COM_OK)
}

/* si c'est un equipement de type specifique 
 (gestion BP incendie, BP trafic, plages horaires...) 
 on ne cree rien car ils sont dejà existants dans l'IHM */
if STRING_INDEX@(UPPERCASE@(vl_icon),  "SCENARIO") <> 0
{
	ITMA_TTU_maj_BP_vent(va_num,va_msg)
	Return(COM_OK)
}

/* mode de l'equipement */
vl_objet_mode = "BP_local" ++ vl_numeqp 
if vl_mode = 0
{
	'mode distant
	DB_CTRL_DISPLAY@(vm_fenetre_TTU,vl_objet_mode,FALSE)
}
if vl_mode = 1
{
	'mode local
	vl_picto_mode = vm_Eqp_Ventilation[va_num,12]
	DB_CTRL_DISPLAY@(vm_fenetre_TTU,vl_objet_mode,TRUE)
}
/* selon l'état de l'equipement */
CASE OF vl_etat

/*A etat normal */
CASE XDC_EQP_DEF_CRIT
	vl_text = "Equipement "++vm_F_bouton[va_num,12]++"-"++vm_F_bouton[va_num,4]++" avec défaut critique !"
	vl_picto_etat = vm_Eqp_Ventilation[va_num,7]
CASE XDC_EQP_DEF_MAJEUR
	vl_text = "Equipement "++vm_F_bouton[va_num,12]++"-"++vm_F_bouton[va_num,4]++" avec défaut majeur !"
	vl_picto_etat = vm_Eqp_Ventilation[va_num,8]

CASE XDC_EQP_DEF_MINEUR
	vl_text = "Equipement "++vm_F_bouton[va_num,12]++"-"++vm_F_bouton[va_num,4]++" avec défaut mineur !"
	vl_picto_etat = vm_Eqp_Ventilation[va_num,9]

CASE XDC_EQP_HS
	vl_text = "Equipement "++vm_F_bouton[va_num,12]++"-"++vm_F_bouton[va_num,4]++" hors service !"
	vl_picto_etat = vm_Eqp_Ventilation[va_num,10]

CASE XDC_NORMAL
	vl_text = "Réception état équipement " ++vm_F_bouton[va_num,12]++"-"++vm_F_bouton[va_num,4]
	vl_picto_etat = vm_Eqp_Ventilation[va_num,11]

ENDCASE

if vm_Appel<>"ITMA_TPA" and STRING_INDEX@(UPPERCASE@(vm_nom_tunnel),"TOULON") = 0
{
	'' sur toulon on n'affiche pas les retour etats eqp : inutiles !
    DB_CTRL_TITLE@( vm_fenetre_TTU,"Li_status",vl_text)
}

vl_objet_etat = "BP_cadre" ++ vl_numeqp 
DB_DESTROY_CTRL@(vm_fenetre_TTU,vl_objet_etat)
/* modification ABE du 20-05-2020 : specifique aux eqp trappe */
if STRING_INDEX@(vl_picto_etat,"22_22") <> 0
        DB_CREATE_CTRL@(vm_fenetre_TTU,6,vl_objet_etat,
	                                        vl_picto_etat,vl_xpos-1,vl_ypos - 280 - 1,0)
else
        DB_CREATE_CTRL@(vm_fenetre_TTU,6,vl_objet_etat,
	                                        vl_picto_etat,vl_xpos-3,vl_ypos - 280-3,0)

/*A construction du nom de l'objet vl_objet */
vl_objet = "BP_panneau" ++ vl_numeqp

/*A lecture du picto disponible à cette position dans vl_picto */
vl_picto = vm_Eqp_Ventilation[vl_numeqp,vl_pos+14]

/*A si le picto existe pour cette position : MAJ du bouton */
if TRIM@(vl_picto) <>  ""
{  
	DB_DESTROY_CTRL@(vm_fenetre_TTU,vl_objet)
	DB_CREATE_CTRL@(vm_fenetre_TTU,3,vl_objet,vl_picto,vl_xpos,vl_ypos-280,0)
	DB_CTRL_BUTTON_TYPE@(vm_fenetre_TTU,vl_objet,4)
	DB_CTRL_GRAYED@(vm_fenetre_TTU,vl_objet,True)
}

Return(COM_OK)

ENDMACRO


/*X*/
/* ------------------------------------------------------------------------------
* SERVICE RENDU :	Permet de s'abonner à l'état des panneaux.
*
* -------------------------------------------------------------------------------*/

MACRO ITMA_TTU_Abt_Etat_Eqp_ventilation(va_Abonnement,va_NumTube, va_NomSite)

/*-------------------------------------------------------------------------------
* ARGUMENTS EN ENTREE : 
*		va_Abonnement	:	Type d'abonnement (debut ou fin)
*
* ARGUMENTS EN SORTIE : aucun
*
* CODE RETOUR	: COM_OK en cas d'execution correcte, COM_NOK sinon.
*
* CONDITION D'UTILISATION :
*   
*
* FONCTION :
*	Permet de s'abonner à l'état des panneaux.
* ------------------------------------------------------------------------------- */

	VAR vl_cmd
	VAR vl_text
	VAR vl_TypeEqt

	vl_TypeEqt = XDC_EQT_TUBE

	/*A trace de l'appel de procedure */
	vm_text = COM09_Date_Courante()  
	vm_text =  vm_text ++ " --> XZEA18_Abt_Eqp_ventilation "
	COM01_Trace(0,vm_text)

	/*B preparation de la requete pour le coupleur */
	vl_cmd[0]=MTAR_MSG_EXEC

	/*B Identifiant de la fonction ventilation */
	vl_cmd[1]=MTTU_FCT_VEN			

	/*B fonction a executer */
	vl_cmd[2]=MTAR_FCT_XZEA18  

	/*B arguments */
	vl_cmd[3]= va_Abonnement ++ MTAR_CAR_SEPAR ++ vm_NomSite ++ MTAR_CAR_SEPAR ++ vl_TypeEqt ++ MTAR_CAR_SEPAR ++ (va_NumTube+0) 

	/*B envoi de la commande a la tache ITMA_TAR01 */
	DB_SEND_POKE@(COM_CANAL_TAR01,vl_cmd)
	
	/*B trace de l'émission */
	vl_text = COM09_Date_Courante() ++ " - DB_SEND_POKE@(COM_CANAL_TAR01," ++ vl_cmd[0]++ ","++vl_cmd[1]++","++vl_cmd[2]++","++vl_cmd[3] ++ ")"
	COM01_Trace(0,vl_text)

	/*B code retour OK */
	RETURN(COM_OK)

ENDMACRO

/*X*/
/* ------------------------------------------------------------------------------
* SERVICE RENDU :	Permet de s'abonner à l'état des sequences.
*
* -------------------------------------------------------------------------------*/

MACRO ITMA_TTU_Abt_Etat_Seq_Ventilation(va_Abonnement, va_NumTube)

/*-------------------------------------------------------------------------------
* ARGUMENTS EN ENTREE : 
*		va_Abonnement	:	Type d'abonnement (debut ou fin)
*
* ARGUMENTS EN SORTIE : aucun
*
* CODE RETOUR	: COM_OK en cas d'execution correcte, COM_NOK sinon.
*
* CONDITION D'UTILISATION :
*   
*
* FONCTION :
*	Permet de s'abonner à l'état des sequences.
* ------------------------------------------------------------------------------- */

	VAR vl_cmd
	VAR vl_text

	/*A trace de l'appel de procedure */
	vm_text = COM09_Date_Courante()  
	vm_text =  vm_text ++ " --> XZEA23_Abt_Etat_Seq_Ventilation "
	COM01_Trace(0,vm_text)

	/*B preparation de la requete pour le coupleur */
	vl_cmd[0]=MTAR_MSG_EXEC

	/*B Identifiant de la fonction ventilation */
	vl_cmd[1]=MTTU_FCT_VEN			

	/*B fonction a executer */
	vl_cmd[2]=MTAR_FCT_XZEA23  

	/*B arguments */
	vl_cmd[3]= va_Abonnement ++ MTAR_CAR_SEPAR ++ vm_NomSite ++ MTAR_CAR_SEPAR ++ (va_NumTube+0) 


	/*B envoi de la commande a la tache ITMA_TAR01 */
	DB_SEND_POKE@(COM_CANAL_TAR01,vl_cmd)
	
	/*B trace de l'émmission */
	vl_text = COM09_Date_Courante() ++ " - DB_SEND_POKE@(COM_CANAL_TAR01," ++ vl_cmd[0]++ ","++vl_cmd[1]++","++vl_cmd[2]++","++vl_cmd[3] ++ ")"
	COM01_Trace(0,vl_text)

	/*B code retour OK */
	RETURN(COM_OK)

ENDMACRO

/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :	Mise à jour du régime de ventilation  
*
* ---------------------------------------------------------------------------*/
MACRO ITMA_TTU_maj_regime_ven(vm_fenetre_TTU, va_message, va_Sce_Ventilation)

/*------------------------------------------------------------------------------
* ARGUMENTS EN ENTREE : 
*		va_Sce_Ventilation : scenarios ventilation
*
* ARGUMENTS EN SORTIE : aucun
*
* CODE RETOUR		: COM_OK en cas d'execution correcte, COM_NOK sinon.
*
* CONDITION D'UTILISATION
*   		
*
---------------------------------------------------------------------------- */
var vl_taille
var vl_trouve
var i
var vl_text
var vl_Regime_Ven
var vl_titre_regime
var vl_Sce_Ventilation

vl_Regime_Ven = va_message[3]
vl_Sce_Ventilation = va_Sce_Ventilation
vl_trouve = False

vl_taille = ARRAY_SIZE@(vl_Sce_Ventilation) -1
for i = 0 to vl_taille
	if vl_Sce_Ventilation[i,0]= vl_Regime_Ven
	{
		vl_trouve = True
		break i
	}
next i

if vl_trouve = True
{
	vl_titre_regime = vl_Sce_Ventilation[i,1]
	DB_CTRL_TITLE@(vm_fenetre_TTU,"Li_regime_ventilation",vl_titre_regime)
}
else
{
	/*B trace de l'erreur */
	vl_text = "ITMA_TTU_ventilation : numéro de régime inexistant = " ++ vl_Regime_Ven
	COM01_Trace(0,vl_text)
}

RETURN (COM_OK)

ENDMACRO


MACRO ITMA_TTU_Confirme_ouverture_IHM_Ventilation(va_nom_tube)

/*
* ARGUMENTS EN ENTREE :
* 
*
* ARGUMENTS EN SORTIE : Choix effectué
*
*
* CODE RETOUR         : Status OK ou NOK suivant résultat
*
* CONDITION D'UTILISATION
*   
*
* FONCTION
*    Choix d'ouvrir la vue ventilation concernée ou de fermer la fenêtre
*
---------------------------------------------------------------------------- */
/*A Déclaration des variables statiques */
var vl_fenetre_active
var	vl_titre_fen
var	vl_controle_sortie
var vl_text
var vl_presence_ventilation

/*A Traitements en cas d'erreur durant l'initialisation :
*   informer l'operateur, tracer l'erreur et abandonner
* ------------------------------------------------------*/
ON ERROR 
{
	ERROR_BOX@
	COM01_Trace (COM_WARNING, COM03_Message_Erreur (C_MODULE))
	RETURN(COM_NOK)
}

/*A Chargement de la fenetre & assignation des sockets 
*   -------------------------------------------------- */
vm_Nom_Fenetre = "ITMA_TTU_incendie"
vm_fenetre_TTU = DB_LOAD@(vm_Nom_Fenetre)

vm_messages_acceptes[0] = COM_CANAL_FIN
DB_ACCEPT_POKES@ (vm_fenetre_TTU, vm_messages_acceptes)

/*A Positionnement de la fenetre & assignation de la fiche d'aide  
*   ------------------------------------------------------------- */
DB_XPOS@(vm_fenetre_TTU,COM_POS_X)
DB_YPOS@(vm_fenetre_TTU, COM_POS_y_FEN)
 
DB_DISPLAY_ONLY@(vm_fenetre_TTU,True)
DB_DISPLAY@(vm_fenetre_TTU)
DB_DISPLAY_ONLY@(vm_fenetre_TTU,False)

vl_text = "ALARME PRESOMPTION INCENDIE TUNNEL " ++ va_nom_tube
DB_CTRL_TITLE@(vm_fenetre_TTU,"Li_incendie",vl_text)

vl_presence_ventilation = SYSTEM_VAR@ (vg_nb_vue_ventilation)
if vl_presence_ventilation = "0"
		DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_acces",True)

vl_fenetre_active = TRUE
/*A tant que la fenetre est active */
WHILE (vl_fenetre_active)

	
	/* affichage de la liste */
	DB_DISPLAY@(vm_fenetre_TTU)
	vl_titre_fen = DB_GET_TITLE@(vm_fenetre_TTU)
	PROMOTE_DIALOG@(vl_titre_fen)

	/*A capture de l'evenement dans la BD TCA */
	vl_controle_sortie = DB_EXIT_CTRL@(vm_fenetre_TTU)

	/*A si l'evenement n'est pas un poke & verrou=vrai */
	if vl_controle_sortie<>"poke_" and SYSTEM_VAR@(vg_verrou)
		/*A reset de l'evenement */
		{ vl_controle_sortie = NULL }

	/* selon l'evenement */
	CASE OF vl_controle_sortie

	/*A sur reception de poke */
	CASE "poke_"
	
		/*A suivant le canal de reception de poke */
		CASE OF DB_GET_POKE@(vm_fenetre_TTU)

		/*A si poke de fin de canal : fermeture de fenetre */
		CASE COM_CANAL_FIN
			/*A la fenetre n'est plus active */
			vl_fenetre_active = FALSE

			
		ENDCASE

	/*A sur action ouvrir fenetre ventilation */
	CASE "BP_acces"
		/* Afficher la fenetre ventilation */
		vl_fenetre_active = FALSE
		RETURN(True)

	/*A sur action fermer */
	CASE "BP_fermer"
		/*A la fenetre n'est plus active */
		vl_fenetre_active = FALSE
		RETURN(False)
	ENDCASE

/*A fin tant que */
WEND

DB_CLOSE@()


RETURN


ENDMACRO

MACRO ITMA_TTU_Choix_Commande_Desenfumage(va_sens,
					va_desenfum_tete, va_gestion_desenfum)
/*
* ARGUMENTS EN ENTREE :
* 
*
* ARGUMENTS EN SORTIE : Choix effectué
*
*
* CODE RETOUR         : Status OK ou NOK suivant résultat
*
* CONDITION D'UTILISATION
*   
*
* FONCTION
*    Choix de la commande de désenfumage
*
---------------------------------------------------------------------------- */
/*A Déclaration des variables statiques */
var vl_fenetre_active
var vl_titre_fen
var vl_controle_sortie
var vl_text
var vl_choix_canton1, vl_choix_canton2
var tl_color

/*A Traitements en cas d'erreur durant l'initialisation :
*   informer l'operateur, tracer l'erreur et abandonner
* ------------------------------------------------------*/
ON ERROR 
{
	ERROR_BOX@
	COM01_Trace (COM_WARNING, COM03_Message_Erreur (C_MODULE))
	RETURN(COM_NOK)
}

/*A Chargement de la fenetre & assignation des sockets 
*   -------------------------------------------------- */
vm_Nom_Fenetre = "ITMA_TTU_desenfumage"
vm_fenetre_TTU = DB_LOAD@(vm_Nom_Fenetre)

vm_messages_acceptes[0] = COM_CANAL_FIN
DB_ACCEPT_POKES@ (vm_fenetre_TTU, vm_messages_acceptes)
 
DB_DISPLAY_ONLY@(vm_fenetre_TTU,True)
DB_DISPLAY@(vm_fenetre_TTU)
DB_DISPLAY_ONLY@(vm_fenetre_TTU,False)

if va_sens = "Sens 2"
{
	DB_CTRL_DISPLAY@(vm_fenetre_TTU,"BP_est",True)
	DB_CTRL_DISPLAY@(vm_fenetre_TTU,"BP_ouest",False)
}                         
else
{
	DB_CTRL_DISPLAY@(vm_fenetre_TTU,"BP_est",False)
	DB_CTRL_DISPLAY@(vm_fenetre_TTU,"BP_ouest",True)
}

'' BP desenfumage tete inactif si incendie en cours
if va_desenfum_tete = FALSE
{
	DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_est",True)
	DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_ouest",True)
}

/* modification ABE le 27-07-2009 pour gestion de la fenetre desenfumage 
des ventilation rénovées de façon générique.
Principe adopté : utilisation d'1 seule variable vl_gestion_desenfum,
vl_gestion_desenfum = 0 : tous les BP sont présents
vl_gestion_desenfum = 1 : pas de anti recyclage
vl_gestion_desenfum = 2 : pas de desenfumage avec congestion
vl_gestion_desenfum = 3 : pas de desenfumage sans congestion
vl_gestion_desenfum = 4 : pas de desenfumage avec congestion + 
					pas de anti-recyclage 
vl_gestion_desenfum = 5 : pas de desenfumage sans congestion + 
					pas de anti-recyclage 
*/ 

if va_gestion_desenfum = 1
{
	DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_phase3",True)
}
if va_gestion_desenfum = 2
{
	DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_phase1",True)
	DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_canton1",True)
	DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_canton2",True)
}
if va_gestion_desenfum = 3
{
	DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_phase2",True)
}
if va_gestion_desenfum = 4
{
	DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_phase1",True)
	DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_canton1",True)
	DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_canton2",True)
	DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_phase3",True)
}
if va_gestion_desenfum = 5
{
	DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_phase2",True)
	DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_phase3",True)
}

'vl_choix_canton1 = False
'vl_choix_canton2 = False

/* choix initial canton 1 par défaut */
ITMA_TTU_Modif_BP_Canton("BP_canton1","Moitié 1",0,255,0)
ITMA_TTU_Modif_BP_Canton("BP_canton2","Moitié 2",-1)

vl_choix_canton1 = True
vl_choix_canton2 = False

vl_fenetre_active = TRUE
/*A tant que la fenetre est active */
WHILE (vl_fenetre_active)

	
	/* affichage de la liste */
	DB_DISPLAY@(vm_fenetre_TTU)
	vl_titre_fen = DB_GET_TITLE@(vm_fenetre_TTU)
	PROMOTE_DIALOG@(vl_titre_fen)

	/*A capture de l'evenement dans la BD TCA */
	vl_controle_sortie = DB_EXIT_CTRL@(vm_fenetre_TTU)

	/*A si l'evenement n'est pas un poke & verrou=vrai */
	if vl_controle_sortie<>"poke_" and SYSTEM_VAR@(vg_verrou)
		/*A reset de l'evenement */
		{ vl_controle_sortie = NULL }

	/* selon l'evenement */
	CASE OF vl_controle_sortie

	/*A sur reception de poke */
	CASE "poke_"
	
		/*A suivant le canal de reception de poke */
		CASE OF DB_GET_POKE@(vm_fenetre_TTU)

		/*A si poke de fin de canal : fermeture de fenetre */
		CASE COM_CANAL_FIN
			/*A la fenetre n'est plus active */
			vl_fenetre_active = FALSE

			
		ENDCASE

	/*A sur choix tete ouest */
	CASE "BP_ouest"
		/* retour choix tete ouest */
		RETURN(		COM_SCEN_VENT_DES_TETE)

	/*A sur choix tete est */
	CASE "BP_est"
		/* retour choix tete est */
		RETURN(COM_SCEN_VENT_DES_TETE)

	/*A sur choix moitié 1 */
	CASE "BP_canton1"
		/* retour choix canton 1 */
		ITMA_TTU_Modif_BP_Canton("BP_canton1","Moitié 1",0,255,0)
		ITMA_TTU_Modif_BP_Canton("BP_canton2","Moitié 2",-1)

		vl_choix_canton1 = True
		vl_choix_canton2 = False

	/*A sur choix moitié 2 */
	CASE "BP_canton2"
		/* retour choix canton 2 */
		ITMA_TTU_Modif_BP_Canton("BP_canton1","Moitié 1",-1)
		ITMA_TTU_Modif_BP_Canton("BP_canton2","Moitié 2",0,255,0)

		vl_choix_canton1 = False
		vl_choix_canton2 = True

	/*A sur choix phase 1 */
	CASE "BP_phase1"
		/* retour choix Désenfumage avec congestion moitié 1 */
		if vl_choix_canton1 = True
			RETURN(COM_SCEN_VENT_DES_MOI1)
		/* retour choix Désenfumage avec congestion moitié 2 */
		if vl_choix_canton2 = True
			RETURN(COM_SCEN_VENT_DES_MOI2)

		if vl_choix_canton1 = False and
		  vl_choix_canton2 = False 
			INFO_MESSAGE@("Sélectionnez tout d'abord une moitié de tunnel.")

	/*A sur choix Désenfumage sans congestion */
	CASE "BP_phase2"
		/* retour choix phase 2 */
		RETURN(COM_SCEN_VENT_SS_CONGS)

	/*A sur choix anti recyclage */
	CASE "BP_phase3"
		/* retour choix phase 3 */
		RETURN(COM_SCEN_VENT_RECYCLAG)

	/*A sur choix arret séquence */
	CASE "BP_arret"
		/* retour arret séquence */
		RETURN(COM_SCEN_VENT_ARRET)

	/*A sur action annuler */
	CASE "BP_annuler"
		/*A la fenetre n'est plus active */
		vl_fenetre_active = FALSE
		RETURN(-1)

	ENDCASE

/*A fin tant que */
WEND

DB_CLOSE@()


RETURN


ENDMACRO

MACRO ITMA_TTU_Choix_Commande_Desenfumage_oui_renove(va_sens, va_tunnel, 
				va_desenfum_tete, va_gestion_desenfum, va_absence_desenfum_tete)
/*
* ARGUMENTS EN ENTREE :
* 
*
* ARGUMENTS EN SORTIE : Choix effectué
*
*
* CODE RETOUR         : Status OK ou NOK suivant résultat
*
* CONDITION D'UTILISATION
*   
*
* FONCTION
*    Choix de la commande de désenfumage
*
---------------------------------------------------------------------------- */
/*A Déclaration des variables statiques */
var vl_fenetre_active
var vl_titre_fen
var vl_controle_sortie
var vl_text
var vl_choix_canton1, vl_choix_canton2
var tl_color

/*A Traitements en cas d'erreur durant l'initialisation :
*   informer l'operateur, tracer l'erreur et abandonner
* ------------------------------------------------------*/
ON ERROR 
{
	ERROR_BOX@
	COM01_Trace (COM_WARNING, COM03_Message_Erreur (C_MODULE))
	RETURN(COM_NOK)
}

/*A Chargement de la fenetre & assignation des sockets 
*   -------------------------------------------------- */

vm_Nom_Fenetre = "ITMA_TTU_desenfumage_oui_renove"

vm_fenetre_TTU = DB_LOAD@(vm_Nom_Fenetre)

vm_messages_acceptes[0] = COM_CANAL_FIN
DB_ACCEPT_POKES@ (vm_fenetre_TTU, vm_messages_acceptes)
 
DB_DISPLAY_ONLY@(vm_fenetre_TTU,True)
DB_DISPLAY@(vm_fenetre_TTU)
DB_DISPLAY_ONLY@(vm_fenetre_TTU,False)

if va_sens = "Sens 2"
{
	DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_est",False)
	DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_ouest",True)
}                         
else
{
	DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_est",True)
	DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_ouest",False)
}

'' BP desenfumage tete inactif si incendie en cours
if va_desenfum_tete = FALSE
{
	DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_est",True)
	DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_ouest",True)
}

/* modif du 22-01-2013 : gestion de l'absence de désenfumage par la tete */
if va_absence_desenfum_tete = 1
{
	DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_est",True)
	DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_ouest",True)
}

/* modification ABE le 27-07-2009 pour gestion de la fenetre desenfumage 
des ventilation rénovées de façon générique.
Principe adopté : utilisation d'1 seule variable vl_gestion_desenfum,
vl_gestion_desenfum = 0 : tous les BP sont présents
vl_gestion_desenfum = 1 : pas de anti recyclage
vl_gestion_desenfum = 2 : pas de desenfumage avec congestion
vl_gestion_desenfum = 3 : pas de desenfumage sans congestion
vl_gestion_desenfum = 4 : pas de desenfumage avec congestion + 
					pas de anti-recyclage 
vl_gestion_desenfum = 5 : pas de desenfumage sans congestion + 
					pas de anti-recyclage 
*/ 

if va_gestion_desenfum = 1
{
	DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_phase3",True)
}
if va_gestion_desenfum = 2
{
	DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_canton1",True)
	DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_canton2",True)
}
if va_gestion_desenfum = 3
{
	DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_phase2",True)
}
if va_gestion_desenfum = 4
{
	DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_canton1",True)
	DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_canton2",True)
	DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_phase3",True)
}
if va_gestion_desenfum = 5
{
	DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_phase2",True)
	DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_phase3",True)
}

vl_fenetre_active = TRUE
/*A tant que la fenetre est active */
WHILE (vl_fenetre_active)

	
	/* affichage de la liste */
	DB_DISPLAY@(vm_fenetre_TTU)
	vl_titre_fen = DB_GET_TITLE@(vm_fenetre_TTU)
	PROMOTE_DIALOG@(vl_titre_fen)

	/*A capture de l'evenement dans la BD TCA */
	vl_controle_sortie = DB_EXIT_CTRL@(vm_fenetre_TTU)

	/*A si l'evenement n'est pas un poke & verrou=vrai */
	if vl_controle_sortie<>"poke_" and SYSTEM_VAR@(vg_verrou)
		/*A reset de l'evenement */
		{ vl_controle_sortie = NULL }

	/* selon l'evenement */
	CASE OF vl_controle_sortie

	/*A sur reception de poke */
	CASE "poke_"
	
		/*A suivant le canal de reception de poke */
		CASE OF DB_GET_POKE@(vm_fenetre_TTU)

		/*A si poke de fin de canal : fermeture de fenetre */
		CASE COM_CANAL_FIN
			/*A la fenetre n'est plus active */
			vl_fenetre_active = FALSE

			
		ENDCASE

	/*A sur choix tete ouest */
	CASE "BP_ouest"
		/* retour choix tete ouest */
		RETURN(COM_SCEN_VENT_DES_TETE)

	/*A sur choix tete est */
	CASE "BP_est"
		/* retour choix tete est */
		RETURN(COM_SCEN_VENT_DES_TETE)

	/*A sur choix moitié 1 */
	CASE "BP_canton1"
		/* retour choix canton 1 */
		RETURN(COM_SCEN_VENT_DES_MOI1)

	/*A sur choix moitié 2 */
	CASE "BP_canton2"
		/* retour choix canton 2 */
		RETURN(COM_SCEN_VENT_DES_MOI2)

	/*A sur choix Désenfumage sans congestion */
	CASE "BP_phase2"
		/* retour choix phase 2 */
		RETURN(COM_SCEN_VENT_SS_CONGS)

	/*A sur choix anti recyclage */
	CASE "BP_phase3"
		/* retour choix phase 3 */
		RETURN(COM_SCEN_VENT_RECYCLAG)

	/*A sur choix arret séquence */
	CASE "BP_arret"
		/* retour arret séquence */
		RETURN(COM_SCEN_VENT_ARRET)

	/*A sur action annuler */
	CASE "BP_annuler"
		/*A la fenetre n'est plus active */
		vl_fenetre_active = FALSE
		RETURN(-1)

	ENDCASE

/*A fin tant que */
WEND

DB_CLOSE@()


RETURN


ENDMACRO

MACRO ITMA_TTU_Choix_Cde_Desenfumage_Monaco(va_sens, va_tunnel)
/*
* ARGUMENTS EN ENTREE :
* 
*
* ARGUMENTS EN SORTIE : Choix effectué
*
*
* CODE RETOUR         : Status OK ou NOK suivant résultat
*
* CONDITION D'UTILISATION
*   
*
* FONCTION
*    Choix de la commande de désenfumage
*
---------------------------------------------------------------------------- */
/*A Déclaration des variables statiques */
var vl_fenetre_active
var vl_titre_fen
var vl_controle_sortie
var vl_text
var tl_color

/*A Traitements en cas d'erreur durant l'initialisation :
*   informer l'operateur, tracer l'erreur et abandonner
* ------------------------------------------------------*/
ON ERROR 
{
	ERROR_BOX@
	COM01_Trace (COM_WARNING, COM03_Message_Erreur (C_MODULE))
	RETURN(COM_NOK)
}

/*A Chargement de la fenetre & assignation des sockets 
*   -------------------------------------------------- */

vm_Nom_Fenetre = "ITMA_TTU_desenfumage_Monaco"

vm_fenetre_TTU = DB_LOAD@(vm_Nom_Fenetre)

vm_messages_acceptes[0] = COM_CANAL_FIN
DB_ACCEPT_POKES@ (vm_fenetre_TTU, vm_messages_acceptes)
 
DB_DISPLAY_ONLY@(vm_fenetre_TTU,True)
DB_DISPLAY@(vm_fenetre_TTU)
DB_DISPLAY_ONLY@(vm_fenetre_TTU,False)

vl_fenetre_active = TRUE
/*A tant que la fenetre est active */
WHILE (vl_fenetre_active)

	
	/* affichage de la liste */
	DB_DISPLAY@(vm_fenetre_TTU)
	vl_titre_fen = DB_GET_TITLE@(vm_fenetre_TTU)
	PROMOTE_DIALOG@(vl_titre_fen)

	/*A capture de l'evenement dans la BD TCA */
	vl_controle_sortie = DB_EXIT_CTRL@(vm_fenetre_TTU)

	/*A si l'evenement n'est pas un poke & verrou=vrai */
	if vl_controle_sortie<>"poke_" and SYSTEM_VAR@(vg_verrou)
		/*A reset de l'evenement */
		{ vl_controle_sortie = NULL }

	/* selon l'evenement */
	CASE OF vl_controle_sortie

	/*A sur reception de poke */
	CASE "poke_"
	
		/*A suivant le canal de reception de poke */
		CASE OF DB_GET_POKE@(vm_fenetre_TTU)

		/*A si poke de fin de canal : fermeture de fenetre */
		CASE COM_CANAL_FIN
			/*A la fenetre n'est plus active */
			vl_fenetre_active = FALSE

			
		ENDCASE

	/*A sur choix arret séquence */
	CASE "BP_arret"
		/* retour choix arret scenario en cours */
		RETURN(COM_SCEN_VENT_ARRET)	

	/*A sur choix incendie_non_localise */
	CASE "BP_incendie_non_localise"
		/* retour choix tete ouest */
		RETURN(COM_SC_VT_MON_INC_NON_LOC)

	/*A sur choix arret purge */
	CASE "BP_purge"
		/* retour choix arret scenario en cours */
		RETURN(COM_SC_VT_MON_ARR_PURGE)	

	/*A sur choix scenario1 */
	CASE "BP_scenario1"
		/* retour choix scenario1 */
		RETURN(COM_SCEN_VENT_MONACO_1)

	/*A sur choix scenario2 */
	CASE "BP_scenario2"
		/* retour choix scenario2 */
		RETURN(COM_SCEN_VENT_MONACO_22)

	/*A sur choix scenario3 */
	CASE "BP_scenario3"
		/* retour choix scenario3 */
		RETURN(COM_SCEN_VENT_MONACO_20)

	/*A sur choix scenario4 */
	CASE "BP_scenario4"
		/* retour choix scenario4 */
		RETURN(COM_SCEN_VENT_MONACO_19)

	/*A sur choix scenario5 */
	CASE "BP_scenario5"
		/* retour choix scenario5 */
		RETURN(COM_SCEN_VENT_MONACO_18)

	/*A sur choix scenario6 */
	CASE "BP_scenario6"
		/* retour choix scenario6 */
		RETURN(COM_SCEN_VENT_MONACO_17)

	/*A sur choix scenario7 */
	CASE "BP_scenario7"
		/* retour choix scenario7 */
		RETURN(COM_SCEN_VENT_MONACO_21)

	/*A sur choix scenario8 */
	CASE "BP_scenario8"
		/* retour choix scenario8 */
		RETURN(COM_SCEN_VENT_MONACO_16)

	/*A sur choix scenario9 */
	CASE "BP_scenario9"
		/* retour choix scenario9 */
		RETURN(COM_SCEN_VENT_MONACO_15)

	/*A sur choix scenario10 */
	CASE "BP_scenario10"
		/* retour choix scenario10 */
		RETURN(COM_SCEN_VENT_MONACO_14)

	/*A sur choix scenario11 */
	CASE "BP_scenario11"
		/* retour choix scenario11 */
		RETURN(COM_SCEN_VENT_MONACO_13)

	/*A sur choix scenario12 */
	CASE "BP_scenario12"
		/* retour choix scenario12 */
		RETURN(COM_SCEN_VENT_MONACO_12)

	/*A sur choix scenario13 */
	CASE "BP_scenario13"
		/* retour choix scenario13 */
		RETURN(COM_SCEN_VENT_MONACO_11)

	/*A sur choix scenario14 */
	CASE "BP_scenario14"
		/* retour choix scenario14 */
		RETURN(COM_SCEN_VENT_MONACO_10)

	/*A sur choix scenario15 */
	CASE "BP_scenario15"
		/* retour choix scenario15 */
		RETURN(COM_SCEN_VENT_MONACO_9)

	/*A sur choix scenario16 */
	CASE "BP_scenario16"
		/* retour choix scenario16 */
		RETURN(COM_SCEN_VENT_MONACO_8)

	/*A sur choix scenario17 */
	CASE "BP_scenario17"
		/* retour choix scenario17 */
		RETURN(COM_SCEN_VENT_MONACO_7)

	/*A sur choix scenario18 */
	CASE "BP_scenario18"
		/* retour choix scenario18 */
		RETURN(COM_SCEN_VENT_MONACO_6)

	/*A sur choix scenario19 */
	CASE "BP_scenario19"
		/* retour choix scenario19 */
		RETURN(COM_SCEN_VENT_MONACO_5)

	/*A sur choix scenario20 */
	CASE "BP_scenario20"
		/* retour choix scenario20 */
		RETURN(COM_SCEN_VENT_MONACO_4)

	/*A sur choix scenario21 */
	CASE "BP_scenario21"
		/* retour choix scenario21 */
		RETURN(COM_SCEN_VENT_MONACO_3)

	/*A sur choix scenario22 */
	CASE "BP_scenario22"
		/* retour choix scenario22 */
		RETURN(COM_SCEN_VENT_MONACO_2)

	/*A sur choix scenario23 */
	CASE "BP_scenario23"
		/* retour choix scenario23 */
		RETURN(COM_SCEN_VENT_MONACO_23)

	/*A sur choix scenario24 */
	CASE "BP_scenario24"
		/* retour choix scenario24 */
		RETURN(COM_SCEN_VENT_MONACO_24)

	/*A sur choix scenario25 */
	CASE "BP_scenario25"
		/* retour choix scenario25 */
		RETURN(COM_SCEN_VENT_MONACO_25)

	/*A sur choix scenario26 */
	CASE "BP_scenario26"
		/* retour choix scenario26 */
		RETURN(COM_SCEN_VENT_MONACO_26)

	/*A sur action annuler */
	CASE "BP_annuler"
		/*A la fenetre n'est plus active */
		vl_fenetre_active = FALSE
		RETURN(-1)

	ENDCASE

/*A fin tant que */
WEND

DB_CLOSE@()


RETURN


ENDMACRO




MACRO ITMA_TTU_Modif_BP_Canton(va_canton, va_libcanton, 
								color1,color2,color3)
var tl_color
var vl_posX, vl_posY

/* couleur texte */
tl_color[0] = 1
tl_color[1] = color1,color2,color3

vl_posX = DB_CTRL_GET_XPOS@(vm_fenetre_TTU,va_canton)
vl_posY = DB_CTRL_GET_YPOS@(vm_fenetre_TTU,va_canton)

DB_DESTROY_CTRL@(vm_fenetre_TTU, va_canton)
DB_CREATE_CTRL@(vm_fenetre_TTU,3,va_canton,va_libcanton,vl_posX,vl_posY,0)
DB_CTRL_BUTTON_TYPE@(vm_fenetre_TTU,va_canton,0)
DB_CTRL_HEIGHT@(vm_fenetre_TTU,va_canton,25)
DB_CTRL_WIDTH@(vm_fenetre_TTU,va_canton,90)
DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,va_canton,True)

if color1 <> -1
	DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU,va_canton,tl_color)

RETURN


ENDMACRO


/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :	maj du libellé qui indique le scenario en cours
*
*  ----------------------------------------------------------------------------
*/

MACRO ITMA_TTU_maj_scenario_vent(va_scenario_en_cours)

/*
* ARGUMENTS EN ENTREE : 
*		va_scenario_en_cours :	num scénario
*
*
* ARGUMENTS EN SORTIE : 
*
* CONDITION D'UTILISATION
*
*
---------------------------------------------------------------------------- */
var i
var vl_libelle


COM01_Trace(COM_WARNING,"ITMA_TTU_maj_scenario_vent va_scenario_en_cours = " ++ va_scenario_en_cours)

/* aucun scenario en cours + on affiche pas le retour a la normale */
if va_scenario_en_cours = 0 or va_scenario_en_cours = 46
{	
	DB_CTRL_TITLE@(vm_fenetre_TTU,"Li_status2","Aucun scénario en cours")

	return
}

for i = 0 to ARRAY_SIZE@(vm_Sce_Ventilation)-1 
COM01_Trace(COM_WARNING,"ITMA_TTU_maj_scenario_vent vm_Sce_Ventilation[i,0] = " ++ vm_Sce_Ventilation[i,0])
	if  va_scenario_en_cours = vm_Sce_Ventilation[i,0]
	{
		vl_libelle = vm_Sce_Ventilation[i,1]
		'' ABE le 21-02-2020 : gestion "INCENDIE  TUBE" pour toulon
		if STRING_INDEX@(UPPERCASE@(vl_libelle),"INCENDIE") = 0 or STRING_INDEX@(UPPERCASE@(vl_libelle),"INCENDIE TUBE") <> 0
		{
			DB_CTRL_TITLE@(vm_fenetre_TTU,"Li_status2","Scénario en cours : " ++ vl_libelle)
		}
		break i
	}
next i

ENDMACRO

/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :	Indique la fin de la commande individuelle par l'operateur
*
* ---------------------------------------------------------------------------*/

MACRO ITMA_TTU_Fin_Cmd_Manu_Tunnel(va_NumAction,va_Validation,va_NumSequence)

/*------------------------------------------------------------------------------
* ARGUMENTS EN ENTREE : 
*		va_NumAction		:	le numero de l'action
*		va_Validation	:	Validation de l'operateur
*		va_NumSequence	:	N° de la sequence
*
* ARGUMENTS EN SORTIE : aucun
*
* CODE RETOUR		: COM_OK en cas d'execution correcte, COM_NOK sinon.
*
* CONDITION D'UTILISATION
*   		ITMA_TTU_pilotage_tunnel
*
* FONCTION
*   		Indique la fin de la commande individuelle par l'operateur.
*
---------------------------------------------------------------------------- */

	VAR FORMAT SQL_Procedure_Params@ vl_parametres
	VAR FORMAT SQL_Procedure_Result@ vl_resultats

	var	vl_Heure1			' heure courante
	var	vl_Heure2			' heure courante
        VAR     vl_NomSite                      ' Nom du site

	/*A test les droits d'acces à cette fonction */
	if NOT(COM04_Operateur_A_Le_Droit_De(XDC_FAM_EXPLOITATION_DISTRICT)) AND
		NOT(COM04_Operateur_A_Le_Droit_De(XDC_FAM_EXPLOITATION))
	{
		ITMA_TTU_Acces_interdit("ITMA_TTU_Fin_Cmd_Manu_Tunnel")
		RETURN(COM_NOK)
	}


	/*A si retour OK de l'operateur */
	if va_Validation  = XDC_VRAI
	{
		vl_Heure1 = COM09_Date_Courante(TRUE)
		vl_heure2 = 0
	}
	/*A sinon */
	else
	{
		vl_Heure1 = 0
		vl_Heure2 = COM09_Date_Courante(TRUE)
	}

        vl_NomSite = SYSTEM_VAR@("vg_nom_site")
		
	/*A trace de l'appel de la procedure */
	vm_text = COM09_Date_Courante()++" ---> Appel de la procedure 'XZAC112_Commande_Seq_VEN("++va_NumAction++","++vl_Heure1++","++vl_Heure2++","++va_NumSequence++")' "
	COM01_Trace(0,vm_text)

	/*A parametrage de vl_parametres */
	vl_parametres[0].type = SYB#INT4_
	vl_parametres[0].data = va_NumAction+0
	vl_parametres[0].output = FALSE
	
	vl_parametres[1].type = SYB#DATETIME_
	vl_parametres[1].data = vl_Heure1
	vl_parametres[1].output = FALSE

	vl_parametres[2].type = SYB#DATETIME_
	vl_parametres[2].data = vl_Heure2
	vl_parametres[2].output = FALSE

	vl_parametres[3].type = SYB#INT1_
	vl_parametres[3].data = va_NumSequence+0
	vl_parametres[3].output = FALSE

        vl_parametres[4].type = SYB#CHAR_
        vl_parametres[4].data = vl_NomSite                             ' Site local
        vl_parametres[4].output = FALSE

  IF COM05_SQL_Procedure (XZAC112_Commande_Seq_VEN,vl_parametres,vl_resultats,C_MODULE) <> COM_OK
    RETURN (COM_NOK)

	/*A retour OK */
	RETURN (COM_OK)

ENDMACRO

/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :	Retourne un message à l'operateur et trace l'accès interdit
*				à une macro.
*
* ----------------------------------------------------------------------------*/

MACRO ITMA_TTU_Acces_interdit(va_NomMacro)

/*-----------------------------------------------------------------------------
* ARGUMENTS EN ENTREE : 
*		va_NomMacro	:	le nom de la macro interdite
*
* ARGUMENTS EN SORTIE : aucun
*
* CODE RETOUR	: COM_OK en cas d'execution correcte, COM_NOK sinon.

* CONDITION D'UTILISATION :
*   appel d'une macro avec les droits d'accès insuffisant.
*
* FONCTION :
*	Retourne un message à l'operateur et trace l'accès interdit à une macro
*---------------------------------------------------------------------------- */

	/*A message d'info à l'opérateur */
	var		vl_tptext			' zone de text tampon
	var		vm_NomOperateur		' nom de l'operateur
	
	vm_NomOperateur = SYSTEM_VAR@(vg_operateur)
	
	vl_tptext = "L'utilisateur " ++vm_NomOperateur ++ " n'a pas les droits suffisants" ++ NUM_TO_STRING@(10) ++ "pour la fonction : " ++ va_NomMacro
	info_message@(vl_tptext)

	/*A trace de l'appel de procedure */
	vl_tptext = COM09_Date_Courante()  
	vl_tptext =  vl_tptext ++ " Accès Macro " ++ va_NomMacro ++ " refusé pour " ++ vm_NomOperateur
	COM01_Trace(0,vl_tptext)

ENDMACRO

/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU : Commander une sequence ventilation
*
* ---------------------------------------------------------------------------*/

MACRO ITMA_TTU_Commande_Seq_Tunnel_ventilation(va_NumTube, va_Manuelle, va_NumSequence, va_NumEvt, va_CleEvt)

/*------------------------------------------------------------------------------
* ARGUMENTS EN ENTREE : 
*		va_NumTube		: numero de tube
*       va_Manuelle     : XDC_FAUX pour automatique, XDC_VRAI pour manuel
*		va_NumSequence	: N° de la sequence
*
* ARGUMENTS EN SORTIE   : aucun
* CODE RETOUR		    : COM_OK en cas d'execution correcte, COM_NOK sinon.
* FONCTION
*   		Commander une sequence ventilation
*
---------------------------------------------------------------------------- */

	VAR FORMAT SQL_Procedure_Params@ vl_parametres
	VAR FORMAT SQL_Procedure_Result@ vl_resultats

	var	vl_Heure        ' heure courante
	var	vl_NumAction	' le N° d'action retournée par la base
	var vl_poste        ' Le nom de la machine
	var vl_NumEvt
	var vl_CleEvt
        VAR     vl_NomSite                      ' Nom du site

    vl_poste = SYSTEM_VAR@("vg_numero_operateur")
        vl_NomSite = SYSTEM_VAR@("vg_nom_site")

	/*A test les droits d'acces à cette fonction */
	if NOT(COM04_Operateur_A_Le_Droit_De(XDC_FAM_EXPLOITATION_DISTRICT)) AND
		NOT(COM04_Operateur_A_Le_Droit_De(XDC_FAM_EXPLOITATION))
	{
		ITMA_TTU_Acces_interdit("ITMA_TTU_Commande_Seq_Tunnel")
		RETURN(COM_NOK)
	}

	if va_NumEvt = null and va_CleEvt = null
	{
		vl_NumEvt = vm_NumEvt
		vl_CleEvt = vm_CleEvt
	}
	else
	{
		vl_NumEvt = va_NumEvt
		vl_CleEvt = va_CleEvt
	}
	
	vl_Heure = COM09_Date_Courante(TRUE)

	/*A trace de l'appel de la procedure */
	vm_text = COM09_Date_Courante()++" ---> Appel de la procedure 'XZAC102_Commande_Seq_VEN("++va_NumTube++","++va_NumSequence++")'"
	COM01_Trace(0,vm_text)

	/*A parametrage de vl_parametres */
	vl_parametres[0].type = SYB#INT4_
	vl_parametres[0].data = vl_NumEvt+0			' NumEvt
	vl_parametres[0].output = FALSE
	
	vl_parametres[1].type = SYB#INT1_
	vl_parametres[1].data = vl_CleEvt+0			' CléEvt
	vl_parametres[1].output = FALSE
	
	vl_parametres[2].type = SYB#INT2_
	vl_parametres[2].data = vl_poste+0		    ' Poste Opérateur
	vl_parametres[2].output = FALSE

	vl_parametres[3].type = SYB#INT1_
	vl_parametres[3].data = 3			        ' TypeEqt = tube
	vl_parametres[3].output = FALSE
        
	vl_parametres[4].type = SYB#INT2_
	vl_parametres[4].data = va_NumTube+0		' NumEqt
	vl_parametres[4].output = FALSE

	vl_parametres[5].type = SYB#DATETIME_
	vl_parametres[5].data = vl_heure			' Heure de lancement
	vl_parametres[5].output = FALSE

	vl_parametres[6].type = SYB#BIT_
	vl_parametres[6].data = va_Manuelle			' Manu ou Auto
	vl_parametres[6].output = FALSE
	
	vl_parametres[7].type = SYB#INT1_
	vl_parametres[7].data = 0 '--vm_tunnel.Priorite ' Priorité
	vl_parametres[7].output = FALSE

	vl_parametres[8].type = SYB#INT4_
	vl_parametres[8].data = XDC_DISTANCE_INCONNUE '--vm_tunnel.DistanceEvt	' DistanceEvt
	vl_parametres[8].output = FALSE

	vl_parametres[9].type = SYB#INT1_
	vl_parametres[9].data = va_NumSequence+0	' N° de la sequence
	vl_parametres[9].output = FALSE

	vl_parametres[10].type = SYB#INT4_
	vl_parametres[10].data = NULL				' NumAction
	vl_parametres[10].output = True

        vl_parametres[11].type = SYB#CHAR_
        vl_parametres[11].data = vl_NomSite                             ' Site local
        vl_parametres[11].output = FALSE

	IF COM05_SQL_Procedure(XZAC102_Commande_Seq_VEN, vl_parametres, vl_resultats, C_MODULE) <> COM_OK
        RETURN (COM_NOK)

    vl_NumAction = vl_resultats.return_parameters[0]
	RETURN (vl_NumAction)

ENDMACRO

MACRO ITMA_TTU_Choix_Commande_Desenfumage_non_renove(va_sens,va_renove)
/*
* ARGUMENTS EN ENTREE :
* 
*
* ARGUMENTS EN SORTIE : Choix effectué
*
*
* CODE RETOUR         : Status OK ou NOK suivant résultat
*
* CONDITION D'UTILISATION
*   
*
* FONCTION
*    Choix de la commande de désenfumage pour ventilation non renove
*
---------------------------------------------------------------------------- */
/*A Déclaration des variables statiques */
var vl_fenetre_active
var vl_titre_fen
var vl_controle_sortie

/*A Traitements en cas d'erreur durant l'initialisation :
*   informer l'operateur, tracer l'erreur et abandonner
* ------------------------------------------------------*/
ON ERROR 
{
	ERROR_BOX@
	COM01_Trace (COM_WARNING, COM03_Message_Erreur (C_MODULE))
	RETURN(COM_NOK)
}

/*A Chargement de la fenetre & assignation des sockets 
*   -------------------------------------------------- */

vm_Nom_Fenetre = "ITMA_TTU_desenfumage_non_renove"

vm_fenetre_TTU = DB_LOAD@(vm_Nom_Fenetre)

vm_messages_acceptes[0] = COM_CANAL_FIN
DB_ACCEPT_POKES@ (vm_fenetre_TTU, vm_messages_acceptes)
 
/* ABE le 05-10-2009 : rappel des cas de figures :
_non_renove : ventilation non rénovée avec sens direct et inverse
_non_renove_dir : ventilation non rénovée avec sens direct seul
_non_renove_dir_av_antirecycl :  ventilation non rénovée avec sens direct seul + antirecyclage
_non_renove_av_antirecycl :  ventilation non rénovée avec sens direct  et inverse + antirecyclage
*/ 

/* modification ABE le 14-01-2009 pour gestion tube avec ventilation renovee ou non et ventilation directe / inverse ou seulement directe */ 
if STRING_INDEX@(UPPERCASE@(va_renove),"NON_RENOVE_DIR") <> 0
{
	DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_phase2",True)
}
else
{
	DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_phase2",False)
}

/* modification ABE le 05-10-2009 pour gestion tube avec ventilation renovee ou non ET ventilation directe / inverse ou seulement directe ET avec anti recyclage 
	ou non */ 
if STRING_INDEX@(UPPERCASE@(va_renove),"_AV_ANTIRECYCL") <> 0
{
	DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_phase3",False)
}
else
{
	DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_phase3",True)
}

DB_DISPLAY_ONLY@(vm_fenetre_TTU,True)
DB_DISPLAY@(vm_fenetre_TTU)
DB_DISPLAY_ONLY@(vm_fenetre_TTU,False)


vl_fenetre_active = TRUE
/*A tant que la fenetre est active */
WHILE (vl_fenetre_active)

	
	/* affichage de la liste */
	DB_DISPLAY@(vm_fenetre_TTU)
	vl_titre_fen = DB_GET_TITLE@(vm_fenetre_TTU)
	PROMOTE_DIALOG@(vl_titre_fen)

	/*A capture de l'evenement dans la BD TCA */
	vl_controle_sortie = DB_EXIT_CTRL@(vm_fenetre_TTU)

	/*A si l'evenement n'est pas un poke & verrou=vrai */
	if vl_controle_sortie<>"poke_" and SYSTEM_VAR@(vg_verrou)
		/*A reset de l'evenement */
		{ vl_controle_sortie = NULL }

	/* selon l'evenement */
	CASE OF vl_controle_sortie

	/*A sur reception de poke */
	CASE "poke_"
	
		/*A suivant le canal de reception de poke */
		CASE OF DB_GET_POKE@(vm_fenetre_TTU)

		/*A si poke de fin de canal : fermeture de fenetre */
		CASE COM_CANAL_FIN
			/*A la fenetre n'est plus active */
			vl_fenetre_active = FALSE
			
		ENDCASE

	/*A sur choix tete ouest */
	CASE "BP_ouest"
		/* retour choix tete ouest */
		RETURN(COM_SCEN_VENT_DES_TETE)

	/*A sur choix Désenfumage sans congestion */
	CASE "BP_phase2"
		/* retour choix phase 2 */
		RETURN(COM_SCEN_VENT_SS_CONGS)

	/*A sur choix anti recyclage */
	CASE "BP_phase3"
		/* retour choix phase 3 */
		RETURN(COM_SCEN_VENT_RECYCLAG)

	/*A sur choix arret séquence */
	CASE "BP_arret"
		/* retour arret séquence */
		RETURN(COM_SCEN_VENT_ARRET)

	/*A sur action annuler */
	CASE "BP_annuler"
		/*A la fenetre n'est plus active */
		vl_fenetre_active = FALSE
		RETURN(-1)

	ENDCASE

/*A fin tant que */
WEND

DB_CLOSE@()


RETURN


ENDMACRO


MACRO ITMA_TTU_Commande_Desenfumage_non_renove(va_NumTube, va_Sce_Ventilation, va_sens)
/*
* ARGUMENTS EN ENTREE :
* ARGUMENTS EN SORTIE : Choix effectué
* CODE RETOUR         : Status OK ou NOK suivant résultat
* FONCTION
*   Commande de désenfumage
*
---------------------------------------------------------------------------- */
var vl_cmd
var vl_text
var tl_param
var vl_taille
var vl_retour
var vl_trouve
var i
var vl_action
var vl_NumEvt
var vl_CleEvt

vl_action = TRUE
WHILE (vl_action)

    vl_cmd = PEND_FOR_NEW_TASK@("ITMA_TTU_Choix_Commande_Desenfumage_non_renove", va_sens,vm_Eqp_Ventilation[0,4])
    if vl_cmd = -1 or vl_cmd = null
    {
        vl_action = FALSE
        GOTO NON_DESENFUMAGE
    }

    vl_NumEvt = vm_NumEvt
    vl_CleEvt = vm_CleEvt
        
    /* gestion de la fenetre de demande de confirmation */
    if vl_cmd = COM_SCEN_VENT_DES_TETE
    {
        vl_text = "Ventilation sens direct"
        tl_param[24] = 320	'largeur bouton poussoir
        tl_param[25] = 340	'largeur fenetre
    }
    
    if vl_cmd = COM_SCEN_VENT_SS_CONGS
    {
        vl_text = "Ventilation sens inverse"
        tl_param[24] = 350
        tl_param[25] = 360
    }
    
    if vl_cmd = COM_SCEN_VENT_RECYCLAG
    {
	vl_text = "anti-recyclage"
	tl_param[24] = 260	'largeur bouton poussoir
	tl_param[25] = 280	'largeur fenetre
    }

    if vl_cmd = COM_SCEN_VENT_ARRET
    {
        vl_text = "arret ventilation"
        tl_param[24] = 350
        tl_param[25] = 360
    }
        
    /*A Demande de confirmation */
    tl_param[0] = 1	'nombre de boutons
    tl_param[1] = 0	'position X fenetre
    tl_param[2] = 0	'position y fenetre
    tl_param[3] = "Confirmation " ++ vl_text 'titre de la fenetre
    tl_param[4] = "CONFIRMER"	'titre bouton
    tl_param[5] = "BP_CONFIRME"	'nom bouton
    
    vl_retour = PEND_FOR_NEW_TASK@("ITMA_TTU_confirmation", tl_param)
    if vl_retour = -1
    {
        GOTO NON_DESENFUMAGE
    }
    
    vl_taille = ARRAY_SIZE@(va_Sce_Ventilation) -1
    vl_trouve = False
    for i = 0 to vl_taille
  if (STRING_INDEX@(UPPERCASE@(va_Sce_Ventilation[i,1]),"DESENFUM") <> 0 or 
 	STRING_INDEX@(UPPERCASE@(va_Sce_Ventilation[i,1]),"VENTIL") <> 0) and
        	va_Sce_Ventilation[i,0] = vl_cmd
        {
            vm_NumSequence = va_Sce_Ventilation[i,0]
            vl_trouve = True
            break i
        }
    next i

	if vl_trouve = True
	{
        ITMA_TTU_Commande_Seq_Tunnel_ventilation (
        				va_NumTube,
        				XDC_FAUX,
        				vm_NumSequence)
	}
	else
	{
		/*B trace de l'erreur */
		vl_text = "ITMA_TTU_ventilation : numéro de scénario inexistant = "++ vl_cmd
		COM01_Trace(0,vl_text)
	}
            
    NON_DESENFUMAGE :

WEND
RETURN

ENDMACRO

MACRO ITMA_TTU_Commande_Desenfumage_oui_renove(va_NumTube, va_Sce_Ventilation, va_sens, va_desenfum_tete, va_gestion_desenfum, va_absence_desenfum_tete)
/*
* ARGUMENTS EN ENTREE :
* 
*
* ARGUMENTS EN SORTIE : Choix effectué
*
*
* CODE RETOUR         : Status OK ou NOK suivant résultat
*
* CONDITION D'UTILISATION
*   
*
* FONCTION
*   Commande de désenfumage
*
---------------------------------------------------------------------------- */
var vl_cmd
var vl_text
var tl_param
var vl_taille
var vl_retour
var vl_trouve
var i
var vl_action

vl_action = TRUE
WHILE (vl_action)

vl_cmd = PEND_FOR_NEW_TASK@("ITMA_TTU_Choix_Commande_Desenfumage_oui_renove", 
			va_sens, vm_tunnel, va_desenfum_tete, va_gestion_desenfum, va_absence_desenfum_tete)
if vl_cmd = -1 or vl_cmd = null
{
	vl_action = FALSE
	GOTO NON_DESENFUMAGE
}

/* gestion de la fenetre de demande de confirmation */
if vl_cmd = COM_SCEN_VENT_DES_TETE
{
	vl_text = "desenfumage tete"
	tl_param[24] = 320	'largeur bouton poussoir
	tl_param[25] = 340	'largeur fenetre
}
if vl_cmd = COM_SCEN_VENT_DES_MOI1
{
	vl_text = "desenfumage avec congestion moitie 1"
	tl_param[24] = 400	'largeur bouton poussoir
	tl_param[25] = 420	'largeur fenetre
}
if vl_cmd = COM_SCEN_VENT_DES_MOI2
{
	vl_text = "desenfumage avec congestion moitie 2"
	tl_param[24] = 400	'largeur bouton poussoir
	tl_param[25] = 420	'largeur fenetre
}

if vl_cmd = COM_SCEN_VENT_SS_CONGS
{
	vl_text = "desenfumage sans congestion"
	tl_param[24] = 320	'largeur bouton poussoir
	tl_param[25] = 340	'largeur fenetre
}

if vl_cmd = COM_SCEN_VENT_ARRET
{
	vl_text = "figer sequence"
	tl_param[24] = 320	'largeur bouton poussoir
	tl_param[25] = 340	'largeur fenetre
}

if vl_cmd = COM_SCEN_VENT_RECYCLAG
{
	vl_text = "anti-recyclage"
	tl_param[24] = 260	'largeur bouton poussoir
	tl_param[25] = 280	'largeur fenetre
}

/*A Demande de confirmation */
tl_param[0] = 1	'nombre de boutons
tl_param[1] = 0	'position X fenetre
tl_param[2] = 0	'position y fenetre
tl_param[3] = "Confirmation " ++ vl_text 'titre de la fenetre
tl_param[4] = "CONFIRMER"	'titre bouton
tl_param[5] = "BP_CONFIRME"	'nom bouton

vl_retour = PEND_FOR_NEW_TASK@("ITMA_TTU_confirmation", tl_param)
if vl_retour = -1 or vl_retour = null
{
	GOTO NON_DESENFUMAGE
}

vl_taille = ARRAY_SIZE@(va_Sce_Ventilation) -1
vl_trouve = False
for i = 0 to vl_taille
if (STRING_INDEX@(UPPERCASE@(va_Sce_Ventilation[i,1]),"DESENFUM") <> 0 or 
 	STRING_INDEX@(UPPERCASE@(va_Sce_Ventilation[i,1]),"VENTIL") <> 0)  and
	va_Sce_Ventilation[i,0] = vl_cmd
{
	vm_NumSequence = va_Sce_Ventilation[i,0]
	vl_trouve = True
	break i
}
next i

if vl_trouve = True
{
	ITMA_TTU_Commande_Seq_Tunnel_ventilation (	
						va_NumTube,
        				XDC_FAUX,
						vm_NumSequence)
}
else
{
	/*B trace de l'erreur */
	vl_text = "ITMA_TTU_ventilation : numéro de scénario inexistant = "++ vl_cmd
	COM01_Trace(0,vl_text)
}

NON_DESENFUMAGE :

WEND


RETURN


ENDMACRO

MACRO ITMA_TTU_Commande_Desenfumage(va_NumTube, va_Sce_Ventilation, va_sens, va_desenfum_tete, va_gestion_desenfum)
/*
* ARGUMENTS EN ENTREE :
* ARGUMENTS EN SORTIE : Choix effectué
* CODE RETOUR         : Status OK ou NOK suivant résultat
* FONCTION
*   Commande de désenfumage
*
---------------------------------------------------------------------------- */
var vl_cmd
var vl_text
var tl_param
var vl_taille
var vl_retour
var vl_trouve
var i
var vl_action
var vl_NumEvt
var vl_CleEvt

vl_action = TRUE
WHILE (vl_action)

    vl_cmd = PEND_FOR_NEW_TASK@("ITMA_TTU_Choix_Commande_Desenfumage", va_sens,
					va_desenfum_tete, va_gestion_desenfum)
    if vl_cmd = -1 or vl_cmd = null
    {
        vl_action = FALSE
        GOTO NON_DESENFUMAGE
    }

    vl_NumEvt = vm_NumEvt
    vl_CleEvt = vm_CleEvt
        
    /* gestion de la fenetre de demande de confirmation */
    if vl_cmd = COM_SCEN_VENT_DES_TETE
    {
        vl_text = "desenfumage tete"
        tl_param[24] = 320	'largeur bouton poussoir
        tl_param[25] = 340	'largeur fenetre
    }
    if vl_cmd = COM_SCEN_VENT_DES_MOI1
    {
        vl_text = "desenfumage avec congestion moitie 1"
        tl_param[24] = 400
        tl_param[25] = 420
    }
    if vl_cmd = COM_SCEN_VENT_DES_MOI2
    {
        vl_text = "desenfumage avec congestion moitie 2"
        tl_param[24] = 400
        tl_param[25] = 420
    }
    
    if vl_cmd = COM_SCEN_VENT_SS_CONGS
    {
        vl_text = "desenfumage sans congestion"
        tl_param[24] = 350
        tl_param[25] = 360
    }
    
    if vl_cmd = COM_SCEN_VENT_ARRET
    {
        vl_text = "arret sequence"
        tl_param[24] = 350
        tl_param[25] = 360
    }
    
    if vl_cmd = COM_SCEN_VENT_RECYCLAG
    {
        vl_text = "anti-recyclage"
        tl_param[24] = 260
        tl_param[25] = 280
    }
    
    /*A Demande de confirmation */
    tl_param[0] = 1	'nombre de boutons
    tl_param[1] = 0	'position X fenetre
    tl_param[2] = 0	'position y fenetre
    tl_param[3] = "Confirmation " ++ vl_text 'titre de la fenetre
    tl_param[4] = "CONFIRMER"	'titre bouton
    tl_param[5] = "BP_CONFIRME"	'nom bouton
    
    vl_retour = PEND_FOR_NEW_TASK@("ITMA_TTU_confirmation", tl_param)
    if vl_retour = -1
    {
        GOTO NON_DESENFUMAGE
    }
    
    vl_taille = ARRAY_SIZE@(va_Sce_Ventilation) -1
    vl_trouve = False
    for i = 0 to vl_taille
  if (STRING_INDEX@(UPPERCASE@(va_Sce_Ventilation[i,1]),"DESENFUM") <> 0 or 
 	STRING_INDEX@(UPPERCASE@(va_Sce_Ventilation[i,1]),"VENTIL") <> 0) and
        	va_Sce_Ventilation[i,0] = vl_cmd
        {
            vm_NumSequence = va_Sce_Ventilation[i,0]
            vl_trouve = True
            break i
        }
    next i
    
    if vl_trouve = True
    {
        ITMA_TTU_Commande_Seq_Tunnel_ventilation (va_NumTube, XDC_FAUX, vm_NumSequence)
        if vm_NumSequence = COM_SCEN_VENT_DES_MOI1 or vm_NumSequence = COM_SCEN_VENT_DES_MOI2
        {	
            DELAY@(1)
            ITMA_TTU_Commande_Seq_Tunnel_ventilation (va_NumTube, XDC_FAUX, COM_SCEN_VENT_AV_CONGS, vl_NumEvt, vl_CleEvt)
        }
    }
    else
    {
        /*B trace de l'erreur */
        COM01_Trace(0, "ITMA_TTU_ventilation : numéro de scénario inexistant = "++ vl_cmd)
    }
    
    NON_DESENFUMAGE :

WEND
RETURN

ENDMACRO


MACRO ITMA_TTU_Cde_Desenfumage_Monaco(va_NumTube, va_Sce_Ventilation, va_sens)
/*
* ARGUMENTS EN ENTREE :
* 
*
* ARGUMENTS EN SORTIE : Choix effectué
*
*
* CODE RETOUR         : Status OK ou NOK suivant résultat
*
* CONDITION D'UTILISATION
*   
*
* FONCTION
*   Commande de désenfumage
*
---------------------------------------------------------------------------- */
var vl_cmd
var vl_text
var tl_param
var vl_taille
var vl_retour
var vl_trouve
var i
var vl_action
var vl_NumEvt
var vl_CleEvt
var tl_commande

tl_commande = 0,0,0,0,0,0,0,0,0,0,0,1,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,6,5,4,3,7,2,23,24,25,26

vl_action = TRUE
WHILE (vl_action)

vl_cmd = PEND_FOR_NEW_TASK@("ITMA_TTU_Choix_Cde_Desenfumage_Monaco", 
										va_sens, vm_nom_tunnel)
if vl_cmd = -1 or vl_cmd = null
{
	vl_action = FALSE
	GOTO NON_DESENFUMAGE
}

vl_NumEvt = vm_NumEvt
vl_CleEvt = vm_CleEvt

/* gestion de la fenetre de demande de confirmation */
if vl_cmd = COM_SC_VT_MON_INC_NON_LOC
{
	vl_text = "scenario incendie non localise"
	tl_param[24] = 350	'largeur bouton poussoir
	tl_param[25] = 370	'largeur fenetre
}
else
{
	if vl_cmd = COM_SCEN_VENT_ARRET
	{
		vl_text = "arret scenario en cours"
		tl_param[24] = 340	'largeur bouton poussoir
		tl_param[25] = 360	'largeur fenetre
	}
	else
	{
	  if vl_cmd = COM_SC_VT_MON_ARR_PURGE
	  {
		vl_text = "arret de la purge"
		tl_param[24] = 270	'largeur bouton poussoir
		tl_param[25] = 290	'largeur fenetre
	  }
	  else
	  {
		'' vl_text = "scenario de desenfumage " ++ (vl_cmd - 10)
		vl_text = "scénario de désenfumage trappe " ++ tl_commande[vl_cmd]
		tl_param[24] = 340	'largeur bouton poussoir
		tl_param[25] = 360	'largeur fenetre
	  }
	}
}

/*A Demande de confirmation */
tl_param[0] = 1	'nombre de boutons
tl_param[1] = 0	'position X fenetre
tl_param[2] = 0	'position y fenetre
tl_param[3] = "Confirmation " ++ vl_text 'titre de la fenetre
tl_param[4] = "CONFIRMER"	'titre bouton
tl_param[5] = "BP_CONFIRME"	'nom bouton

vl_retour = PEND_FOR_NEW_TASK@("ITMA_TTU_confirmation", tl_param)
if vl_retour = -1 or vl_retour = null
{
	GOTO NON_DESENFUMAGE
}

vl_taille = ARRAY_SIZE@(va_Sce_Ventilation) -1
vl_trouve = False
for i = 0 to vl_taille

if (STRING_INDEX@(UPPERCASE@(va_Sce_Ventilation[i,1]),"DESENFUM") <> 0  or
STRING_INDEX@(UPPERCASE@(va_Sce_Ventilation[i,1]),"PURGE") <> 0) and
	va_Sce_Ventilation[i,0] = vl_cmd
{
	vm_NumSequence = va_Sce_Ventilation[i,0]
	vl_trouve = True
	break i
}
next i

if vl_trouve = True
{
	ITMA_TTU_Commande_Seq_Tunnel_ventilation (	
						va_NumTube, XDC_FAUX,
						vm_NumSequence, vl_NumEvt, vl_CleEvt)
}
else
{
	/*B trace de l'erreur */
	vl_text = "ITMA_TTU_ventilation : numéro de scénario inexistant = "++ vl_cmd
	COM01_Trace(0,vl_text)
}

NON_DESENFUMAGE :

WEND


RETURN


ENDMACRO


/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU : Choisir une sequence de commande de panneaux
*
*  ----------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TTU_sequence_ventilation(va_trig, va_ret_normal, va_lib_tunnel)

/*
* ARGUMENTS EN ENTREE : 
*	
*
* ARGUMENTS EN SORTIE : Aucun
*
* CODE RETOUR         : la liste des etats des panneaux
*
* CONDITION D'UTILISATION
*   Selectionner le bouton 'Appel sequence' dans la vue tunnel
*
* FONCTION
*    Choisir une sequence de commande de panneaux
*
---------------------------------------------------------------------------- */


/*A Déclaration des variables statiques */
var		vl_fenetre_TEC
var		vl_fenetre_active
var		vl_controle_sortie
var		i,j				/* index de loop */
var		vl_taille			/* taille d'une table */
var 	vl_taille2		/* taille d'une table */
var		vl_rang			/* rang selectionné dans la liste */
var		vl_text			/* text à afficher dans le status */
var		vl_F_tpm			/* tableau tampon */
var		vl_F_seq			/* tableau tampon avec sequence */
var		vl_ligne			/* tableau d'une ligne */
var		vl_F_sequence		/* fichier de config des sequences */
var		vl_sequence		/* sequence selectionné dans la liste */
var		vl_icon 			/* graph à afficher dans l'objet */
var		vl_xpos 			/* position X de l'objet */
var		vl_ypos 			/* position Y de l'objet */ 
var		vl_titre  		/* titre du bouton */
var		vl_titre2  		/* titre de l'image digit */
var		vl_trouve
var		vl_longeur
var		vl_titre_fen
var		vl_tab
var		vl_index
var		vl_pos
var		vl_lib_tunnel

vl_lib_tunnel = va_lib_tunnel
vl_ret_normal = va_ret_normal

/*A Chargement du fichier de config sequence ventilation des tunnels */
vl_F_tpm = READ_ASCII_FILE@(REP_RENOVE ++va_trig ++ "/ConfigSceVentilation_" ++ va_trig ++ ".cfg")
vl_taille = ARRAY_SIZE@(vl_F_tpm) -1
vl_index = 0
for i = 0 to vl_taille
  vl_ligne = ARRAY_FROM_STRING@(vl_F_tpm[i],",")
  vl_tab = ARRAY_SIZE@(vl_ligne)
  if substring@(vl_F_tpm[i],1,1) <> "#"
  {

	vl_taille2 = ARRAY_SIZE@(vl_ligne) -1
	for j = 0 to vl_taille2
		vm_Sce_Ventilation[vl_index,j]=TRIM@(TABS_TO_SPACES@(vl_ligne[j]))
	next j
	vl_index = vl_index + 1
  }
next i

/* modif du 13-03-2013 : gestion du retour à la normale côté SAE avec fonctionnement synchro avec la GTC */
if vl_ret_normal = 0
{
	/* tube sans gestion retour a la normale */
	vl_F_tpm = null
	for i = 1 to vl_index-1
		/* modif du 18-03-2013 : on filtre la sequence retour a la normale */
		if STRING_INDEX@(UPPERCASE@(vm_Sce_Ventilation[i,1]),"RETOUR A LA NORMALE")=0
		{		
			vl_F_tpm[i] = vm_Sce_Ventilation[i,1] 
			vl_F_seq[i] = vm_Sce_Ventilation[i]
		}
	next i
}
else
{
	/* tube avec gestion retour a la normale */
	vl_F_tpm = null
	for i = 1 to vl_index-1
		vl_F_tpm[i] = vm_Sce_Ventilation[i,1] 
		vl_F_seq[i] = vm_Sce_Ventilation[i]
	next i

}

/*A Ouvertue de la liste des sequences */
vl_fenetre_TEC = DB_LOAD@("ITMA_TEC_liste_sequence")
vm_messages_acceptes[0] = COM_CANAL_FIN
DB_ACCEPT_POKES@ (vl_fenetre_TEC, vm_messages_acceptes)

/*A Positionnement de la fenetre & assignation de la fiche d'aide  
*   ------------------------------------------------------------- */
DB_XPOS@(vl_fenetre_TEC,COM_POS_X)
DB_YPOS@(vl_fenetre_TEC, COM_POS_y_FEN)
DEFINE_HELPFILE@("Liste des sequences", "./aid/ITMA_TEC_liste_sequence.aide")
DB_HELP_TOPIC@(vl_fenetre_TEC,"Liste des sequences")

if STRING_INDEX@(UPPERCASE@(vl_lib_tunnel),"TOULON") <> 0
{
	vl_xpos = DB_GET_WIDTH@(vl_fenetre_TEC)
	vl_ypos = DB_GET_HEIGHT@(vl_fenetre_TEC)
	vl_xpos = vl_xpos + 70
	vl_ypos = vl_ypos + 250
	DB_WIDTH@(vl_fenetre_TEC,vl_xpos)
	DB_HEIGHT@(vl_fenetre_TEC,vl_ypos)
}

DB_DISPLAY_ONLY@(vl_fenetre_TEC,True)
DB_DISPLAY@(vl_fenetre_TEC)
DB_DISPLAY_ONLY@(vl_fenetre_TEC,False)

DB_CTRL_RETURN_ON_CHANGE@(vl_fenetre_TEC,"BL_sequence",True)
DB_CTRL_STRINGS@(vl_fenetre_TEC,"BL_sequence",vl_F_tpm)
DB_CTRL_GRAYED@(vl_fenetre_TEC,"BP_valider",True)

if STRING_INDEX@(UPPERCASE@(vl_lib_tunnel),"TOULON") <> 0
{
	vl_pos = DB_CTRL_GET_SIZE@(vl_fenetre_TEC,"BL_sequence")
	vl_xpos = vl_pos[2]
	vl_ypos = vl_pos[3]
	vl_xpos = vl_xpos + 10
	vl_ypos = vl_ypos + 15
	DB_CTRL_WIDTH@(vl_fenetre_TEC, "BL_sequence", vl_xpos)
	DB_CTRL_HEIGHT@(vl_fenetre_TEC, "BL_sequence", vl_ypos)
	
	vl_xpos = DB_CTRL_GET_XPOS@(vl_fenetre_TEC, "BP_valider")
	vl_ypos = DB_CTRL_GET_YPOS@(vl_fenetre_TEC, "BP_valider")
	vl_xpos = vl_xpos + 20
	vl_ypos = vl_ypos + 220
	DB_CTRL_XPOS@(vl_fenetre_TEC, "BP_valider", vl_xpos)
	DB_CTRL_YPOS@(vl_fenetre_TEC, "BP_valider", vl_ypos)
	
	vl_xpos = DB_CTRL_GET_XPOS@(vl_fenetre_TEC, "BP_quitter")
	vl_ypos = DB_CTRL_GET_YPOS@(vl_fenetre_TEC, "BP_quitter")
	vl_xpos = vl_xpos + 35
	vl_ypos = vl_ypos + 220
	DB_CTRL_XPOS@(vl_fenetre_TEC, "BP_quitter", vl_xpos)
	DB_CTRL_YPOS@(vl_fenetre_TEC, "BP_quitter", vl_ypos)
		
	vl_xpos = DB_CTRL_GET_XPOS@(vl_fenetre_TEC, "Help")
	vl_ypos = DB_CTRL_GET_YPOS@(vl_fenetre_TEC, "Help")
	vl_xpos = vl_xpos + 50
	vl_ypos = vl_ypos + 220
	DB_CTRL_XPOS@(vl_fenetre_TEC, "Help", vl_xpos)
	DB_CTRL_YPOS@(vl_fenetre_TEC, "Help", vl_ypos)
}

/*A Boucle de capture des événements de la boite de dialogue  
*   -------------------------------------------------------- */
vl_fenetre_active = TRUE


/*A tant que la fenetre est active */
WHILE (vl_fenetre_active)

	/* affichage de la liste */
	DB_DISPLAY@(vl_fenetre_TEC)
	vl_titre_fen = DB_GET_TITLE@(vm_fenetre_TTU)

	/*A capture de l'evenement dans la BD TCA */
	vl_controle_sortie = DB_EXIT_CTRL@(vl_fenetre_TEC)

	/*A si l'evenement n'est pas un poke & verrou = vrai */
	if vl_controle_sortie<>"poke_" and SYSTEM_VAR@(vg_verrou)
		vl_controle_sortie = NULL 

	/* selon l'evenement */
	CASE OF vl_controle_sortie

	/*A sur action valider */
	CASE "BP_valider"

		/*A retour de la sequence */
		vl_fenetre_active=false

	/*A sur action quitter */
	CASE "BP_quitter"

		/*A Fermeture de la fenetre */
		vl_sequence[0] = -1
		vl_fenetre_active=false

	/*A sur action quitter */
	CASE "BL_sequence"

		/*A Capture du rang dans la liste des tunnels */
		vl_rang = DB_CTRL_GET_VALUE@(vl_fenetre_TEC,"BL_sequence")

		/*A Capture du libellé de la sequence choisie */
		vm_seq_select = vl_F_tpm[vl_rang]
		SET_SYSTEM_VAR@("sequence",vm_seq_select)
		SET_SYSTEM_VAR@("NumSequence",vl_F_seq[vl_rang,0])

		/*A modif du 12-06-2013 : filtrer les lignes : vide et hors sequence */
		vl_pos = STRING_INDEX@(UPPERCASE@(vl_F_seq[vl_rang,1]),"HORS SEQUENCE")
		if vl_rang = 0 or vl_pos > 0
		{
			/*A griser le bouton valider */
			DB_CTRL_GRAYED@(vl_fenetre_TEC,"BP_valider",True)
		}
		/*A sinon */
		else
		{
			/*A MAJ de vl_sequence */
		
			vl_F_tpm = vl_F_seq[vl_rang]

			''suppression des 2 premieres iterations
			vl_F_tpm = ARRAY_DELETE@(vl_F_tpm,0)
			vl_F_tpm = ARRAY_DELETE@(vl_F_tpm,0)

			vl_sequence = vl_F_tpm

			/*A trace de la sequence selectionné */
			COM01_Trace(0,"Choix sequence : " ++ vm_seq_select ++ " ---> " ++
					 vl_F_seq[vl_rang,0])

			/*A dégriser le bouton valider */
			DB_CTRL_GRAYED@(vl_fenetre_TEC,"BP_valider",False)
			/*A Fermeture de la fenetre */
			''RETURN(vl_sequence)
			vl_fenetre_active=false
		}		

	/*A sur reception de poke */
	CASE "poke_"
	
		/*A suivant le canal de reception de poke */
		CASE OF DB_GET_POKE@(vl_fenetre_TEC)

		/*A si poke de fin de canal : fermeture de fenetre */
		CASE COM_CANAL_FIN
			/*A la fenetre n'est plus active */
			vl_fenetre_active = FALSE

		ENDCASE

	ENDCASE

/*A fin tant que */
WEND

DB_CLOSE@(vl_fenetre_TEC)

RETURN(vl_sequence)

ENDMACRO


/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :	Remet le tunnel à l'etat normal
*
* ---------------------------------------------------------------------------*/

MACRO ITMA_TTU_Commande_Retour_Normal_VEN(va_NumEqt, va_Manuelle)

/*------------------------------------------------------------------------------
* ARGUMENTS EN ENTREE : 
*		va_NumEqt	:	le numero d'équipement
*		va_Manuelle	:	Le flag manuel ou automatique
*
* ARGUMENTS EN SORTIE : aucun
*
* CODE RETOUR		: COM_OK en cas d'execution correcte, COM_NOK sinon.
*
* CONDITION D'UTILISATION
*   		ITMA_TTU_pilotage_tunnel
*
* FONCTION
*   		Remet le tunnel à l'etat normal.
*
---------------------------------------------------------------------------- */

	VAR FORMAT SQL_Procedure_Params@ vl_parametres
	VAR FORMAT SQL_Procedure_Result@ vl_resultats

	var	vl_heure			' heure courante

	/*A test les droits d'acces à cette fonction */
	if NOT(COM04_Operateur_A_Le_Droit_De(XDC_FAM_EXPLOITATION_DISTRICT)) AND
		NOT(COM04_Operateur_A_Le_Droit_De(XDC_FAM_EXPLOITATION))
	{
		ITMA_TTU_Acces_interdit("Commande_Fin_Tunnel")
		RETURN(COM_NOK)
	}

	vl_Heure = COM09_Date_Courante(TRUE)
	vm_District = SYSTEM_VAR@("vg_site")

	/*A trace de l'appel de la procedure */
	vm_text = COM09_Date_Courante()++" ---> Appel de la procedure 'XZAC633_Commande_Fin_Ventilation' "
	COM01_Trace(0,vm_text)

	/*A parametrage de vl_parametres */
	vl_parametres[0].type = SYB#INT1_
	vl_parametres[0].data = 3
	vl_parametres[0].output = FALSE
	
	vl_parametres[1].type = SYB#INT4_
	vl_parametres[1].data = va_NumEqt
	vl_parametres[1].output = FALSE
	
	vl_parametres[2].type = SYB#INT4_
	vl_parametres[2].data = vm_District
	vl_parametres[2].output = FALSE

	vl_parametres[3].type = SYB#CHAR_
	vl_parametres[3].data = vl_heure
	vl_parametres[3].output = FALSE

	vl_parametres[4].type = SYB#INT4_
	vl_parametres[4].data = va_Manuelle
	vl_parametres[4].output = FALSE

	vl_parametres[5].type = SYB#CHAR_                               ' Site local
	vl_parametres[5].data = SYSTEM_VAR@(vg_nom_site)
	vl_parametres[5].output = FALSE

	if ( COM05_SQL_Procedure (XZAC633_Commande_Fin_Ventilation,vl_parametres,vl_resultats,C_MODULE) <> COM_OK )
		RETURN (COM_NOK)

	RETURN (COM_OK)

ENDMACRO

/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :	Choisir une sequence de commande de panneaux
*
*  ----------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TTU_pix_select_ventilation(va_num,va_pos)

/*
* ARGUMENTS EN ENTREE : 
*	va_num	: le N° du bouton
*	va_pos	: le N° du picto désiré ( 0 :  neutre )
*
* ARGUMENTS EN SORTIE : Aucun
*
* CODE RETOUR         : COM_OK
*
* CONDITION D'UTILISATION
*
* FONCTION
*    Choisir une sequence de commande de panneaux
*
---------------------------------------------------------------------------- */
var	vl_titre
var	vl_objet
var	i
var	vl_trouve
var	vl_icon
var	vl_xpos
var	vl_ypos
var	vl_sens


vm_F_bouton[va_num,0] = va_pos+0
vm_F_bouton[va_num,2] = vl_titre

/*A MAJ du bouton */
vl_icon 	= vm_Eqp_Ventilation[va_num,va_pos+14]


vl_objet = "BP_cmd" ++ va_num

vl_xpos = DB_CTRL_GET_XPOS@(vm_fenetre_TTU, vl_objet)
vl_ypos = DB_CTRL_GET_YPOS@(vm_fenetre_TTU, vl_objet)

DB_CTRL_DISPLAY@(vm_fenetre_TTU,vl_objet,FALSE)
DB_DESTROY_CTRL@(vm_fenetre_TTU,vl_objet)
DB_CREATE_CTRL@(vm_fenetre_TTU,3,vl_objet,vl_icon,vl_xpos,vl_ypos,0)
DB_CTRL_BUTTON_TYPE@(vm_fenetre_TTU,vl_objet,4)

/*A retour OK */
Return(COM_OK)

ENDMACRO

/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :	maj des BP trafic exceptionnel ...
*
*  ----------------------------------------------------------------------------
*/

MACRO ITMA_TTU_maj_BP_vent(va_num,va_msg)

/*
* ARGUMENTS EN ENTREE : 
*		va_scenario_en_cours :	num scénario
*
*
* ARGUMENTS EN SORTIE : 
*
* CONDITION D'UTILISATION
*
*
---------------------------------------------------------------------------- */
var vl_numeqp
var vl_pos
var vl_picto
var vl_icon
var vl_libelle
var vl_xpos
var vl_ypos
var vl_mess
var tl_color, tl_color2, tl_color3, tl_color4

/* on donne une couleur identique au fond à l'objet */
tl_color[0] = 1
tl_color[1] = 0,255,0
tl_color[2] = "vert"

tl_color2[0] = 1
tl_color2[1] = 255,255,255
tl_color2[2] = "blanc"

/* Orange-Red =	255 69 	0 pour SCENARIO_TRAFIC_EXCEPTIONNEL modif du 11-04-2013 */
tl_color3[0] = 1
tl_color3[1] = 255,100,0
tl_color3[2] = "orange"

/* Silver = 192 192 192 */
tl_color4[0] = 1
tl_color4[1] = 215,215,215
tl_color4[2] = "gris"

vl_numeqp = va_num
vl_pos = va_msg[4]

vl_icon = vm_Eqp_Ventilation[vl_numeqp,14]

/*A lecture du picto disponible à cette position dans vl_picto */
vl_picto = vm_Eqp_Ventilation[vl_numeqp,vl_pos+14]

/* si c'est l'equipement specifique pour mode eclairage */
if STRING_INDEX@(UPPERCASE@(vl_icon),  "ECL_REGIME") <> 0
{	
	vl_mess[2] = vl_picto + 0
	ITMA_TTU_maj_regime_ecl(vm_fenetre_TTU, vl_mess, vm_Sce_Eclairage, vm_nom_tunnel)
}

/* si c'est l'equipement specifique pour mode eclairage */
if STRING_INDEX@(UPPERCASE@(vl_icon),  "ECL_MODE_ENTREE_AUTO") <> 0
{	
	if UPPERCASE@(vl_picto) = "MANU"
	{
		ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairageRFEAUTO", 		
											"pix_manu_40_20",3,4)
	}
	if UPPERCASE@(vl_picto) = "AUTO"
	{
		ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairageRFEAUTO", 		
											"pix_auto_40_20",3,4)
	}
}

/* si c'est l'equipement specifique pour mode eclairage */
if STRING_INDEX@(UPPERCASE@(vl_icon),  "ECL_MODE_ENTREE_NOMI") <> 0
{	
	if UPPERCASE@(vl_picto) = "HORA"
	{
		ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairageRFENOM", 		
											"pix_horaire_40_20",3,4)
	}
	if UPPERCASE@(vl_picto) = "NOMI"
	{
		ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairageRFENOM", 		
											"pix_nominal_40_20",3,4)
	}
}

/* si c'est l'equipement specifique pour mode eclairage */
if STRING_INDEX@(UPPERCASE@(vl_icon),  "ECL_MODE_SORTIE_AUTO") <> 0
{	
	if UPPERCASE@(vl_picto) = "MANU"
	{
		ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairageRFSAUTO", 		
											"pix_manu_40_20",3,4)
	}
	if UPPERCASE@(vl_picto) = "AUTO"
	{
		ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairageRFSAUTO", 		
											"pix_auto_40_20",3,4)
	}
}

/* si c'est l'equipement specifique pour mode eclairage */
if STRING_INDEX@(UPPERCASE@(vl_icon),  "ECL_MODE_SORTIE_NOMI") <> 0
{	
	if UPPERCASE@(vl_picto) = "HORA"
	{
		ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairageRFSNOM", 		
											"pix_horaire_40_20",3,4)
	}
	if UPPERCASE@(vl_picto) = "NOMI"
	{
		ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairageRFSNOM", 		
											"pix_nominal_40_20",3,4)
	}
}

/* si c'est l'equipement specifique pour mode eclairage */
if STRING_INDEX@(UPPERCASE@(vl_icon),  "ECL_MODE_BASE_AUTO") <> 0
{	
	if UPPERCASE@(vl_picto) = "MANU"
	{
		ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairageBASEAUTO", 		
									"pix_manu_40_20",3,4)
	}
	if UPPERCASE@(vl_picto) = "AUTO"
	{
		ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairageBASEAUTO", 		
									"pix_auto_40_20",3,4)
	}
}

/* si c'est l'equipement specifique pour mode eclairage */
if STRING_INDEX@(UPPERCASE@(vl_icon),  "ECL_MODE_BASE_NOMI") <> 0
{	
	if UPPERCASE@(vl_picto) = "HORA"
	{
		ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairageBASENOM", 		
											"pix_horaire_40_20",3,4)
	}
	if UPPERCASE@(vl_picto) = "NOMI"
	{
		ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairageBASENOM", 		
											"pix_nominal_40_20",3,4)
	}
}

/* si c'est l'equipement specifique pour mode eclairage */
if STRING_INDEX@(UPPERCASE@(vl_icon),  "ECL_MODE_TREMIE_AUTO") <> 0
{	
	if UPPERCASE@(vl_picto) = "MANU"
	{
		ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairageTREAUTO", 		
											"pix_manu_40_20",3,4)
	}
	if UPPERCASE@(vl_picto) = "AUTO"
	{
		ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_eclairageTREAUTO", 		
											"pix_auto_40_20",3,4)
	}
}

/* si c'est l'equipement specifique pour mode ventilation */
if STRING_INDEX@(UPPERCASE@(vl_icon),  "VEN_MODE_GEN") <> 0
{	
	if UPPERCASE@(vl_picto) = "MANU"
	{
		ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_ventilation", 		
									"pix_manu_40_20",3,4)
	}
	if UPPERCASE@(vl_picto) = "AUTO"
	{
		ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_ventilation", 		
									"pix_auto_40_20",3,4)
	}
}

/* si c'est l'equipement specifique pour mode ventilation */
if STRING_INDEX@(UPPERCASE@(vl_icon),  "VEN_MODE_ACC") <> 0
{	
	if UPPERCASE@(vl_picto) = "MANU"
	{
		ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_ventilation2", 		
									"pix_manu_40_20",3,4)
	}
	if UPPERCASE@(vl_picto) = "AUTO"
	{
		ITMA_TTU_maj_aff_BP(vm_fenetre_TTU, "BP_mode_ventilation2", 		
									"pix_auto_40_20",3,4)
	}
}

/* gestion de l'equipement specifique pour Bloquage des commandes IHM incendie si incendie dans l'autre sens */
if UPPERCASE@(vl_icon) = "INCENDIE_AUTRE_SENS"
{
	if UPPERCASE@(vl_picto) = "DEBUT_INCENDIE"
	{
		tm_incendie_autre_sens = 1
		SET_SYSTEM_VAR@(vg_inc_autre_sens,"1")
		DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_sequence",True)
		DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_desenfumage",True)
	}
	if UPPERCASE@(vl_picto) = "FIN_INCENDIE"
	{
		tm_incendie_autre_sens = 0
		SET_SYSTEM_VAR@(vg_inc_autre_sens,"0")
		DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_sequence",False)
		DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_desenfumage",False)
	}
}
if UPPERCASE@(vl_icon) = "SCENARIO_INCENDIE"
{
	vl_xpos = DB_CTRL_GET_XPOS@(vm_fenetre_TTU, "BP_cde_incendie")
	vl_ypos = DB_CTRL_GET_YPOS@(vm_fenetre_TTU, "BP_cde_incendie")
	DB_DESTROY_CTRL@(vm_fenetre_TTU,"BP_cde_incendie")
	if UPPERCASE@(vl_picto) = "PRESOMP_INCENDIE"
	{
		DB_CREATE_CTRL@(vm_fenetre_TTU,3,"BP_cde_incendie",
					"pix_incendie_presomp_40_40",
					vl_xpos,vl_ypos,0)
	}
	if UPPERCASE@(vl_picto) = "DEBUT_INCENDIE"
	{
		DB_CREATE_CTRL@(vm_fenetre_TTU,3,"BP_cde_incendie",
					"pix_incendie_debut_40_40",
					vl_xpos,vl_ypos,0)
	}
	if UPPERCASE@(vl_picto) = "FIN_INCENDIE"
	{
		DB_CREATE_CTRL@(vm_fenetre_TTU,3,"BP_cde_incendie",
					"pix_incendie_fin_40_40",
					vl_xpos,vl_ypos,0)
	}
	DB_CTRL_BUTTON_TYPE@(vm_fenetre_TTU,"BP_cde_incendie",4)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"BP_cde_incendie",True)
}

if UPPERCASE@(vl_icon) = "SCENARIO_TRAFIC_EXCEPTIONNEL"
{
	vl_xpos = DB_CTRL_GET_XPOS@(vm_fenetre_TTU, "BP_etat_trafic_excep")
	vl_ypos = DB_CTRL_GET_YPOS@(vm_fenetre_TTU, "BP_etat_trafic_excep")
	DB_DESTROY_CTRL@(vm_fenetre_TTU,"BP_etat_trafic_excep")
	if UPPERCASE@(vl_picto) = "EXCEP"
	{
		DB_CREATE_CTRL@(vm_fenetre_TTU,3,"BP_etat_trafic_excep",
					"Trafic exceptionnel",vl_xpos,vl_ypos,0)
		DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU,"BP_etat_trafic_excep",tl_color3)
	}
	else
	{
		DB_CREATE_CTRL@(vm_fenetre_TTU,3,"BP_etat_trafic_excep",
					"Trafic non exceptionnel",vl_xpos,vl_ypos,0)
		DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU,"BP_etat_trafic_excep",tl_color4)
	}
	DB_CTRL_BUTTON_TYPE@(vm_fenetre_TTU,"BP_etat_trafic_excep",0)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"BP_etat_trafic_excep",22)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"BP_etat_trafic_excep",126)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"BP_etat_trafic_excep",True)
	DB_CTRL_DISPLAY@(vm_fenetre_TTU,"BP_etat_trafic_excep",True)
}

if UPPERCASE@(vl_icon) = "SCENARIO_PLAGE_HORAIRE"
{
	vl_xpos = DB_CTRL_GET_XPOS@(vm_fenetre_TTU, "BP_plage_horaire")
	vl_ypos = DB_CTRL_GET_YPOS@(vm_fenetre_TTU, "BP_plage_horaire")
	DB_DESTROY_CTRL@(vm_fenetre_TTU,"BP_plage_horaire")
	if UPPERCASE@(vl_picto) = "ACTIVE"
	{
		DB_CREATE_CTRL@(vm_fenetre_TTU,3,"BP_plage_horaire",
					"Plages horaires actives",vl_xpos,vl_ypos,0)
		DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU,"BP_plage_horaire",tl_color)
	}
	else
	{
		DB_CREATE_CTRL@(vm_fenetre_TTU,3,"BP_plage_horaire",
					"Plages horaires inactives",vl_xpos,vl_ypos,0)
		DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU,"BP_plage_horaire",tl_color4)
	}

	DB_CTRL_BUTTON_TYPE@(vm_fenetre_TTU,"BP_plage_horaire",0)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"BP_plage_horaire",22)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"BP_plage_horaire",126)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"BP_plage_horaire",True)
	DB_CTRL_DISPLAY@(vm_fenetre_TTU,"BP_plage_horaire",True)
}


endmacro


/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :       Choisir une sequence de commande de panneaux pour le PA
*
*  ----------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TTU_sequence_PA(va_trig, va_NumSequence)

/*
* ARGUMENTS EN ENTREE :
*       va_trig         : trigramme du tunnel
*       va_NumSequence  : le n0 de la sequence disirie
*
* ARGUMENTS EN SORTIE : Aucun
*
* CODE RETOUR         : la liste des etats des panneaux
*
* CONDITION D'UTILISATION
*   origine de l'appel : Plan d'action
*
* FONCTION
*    Choisir une sequence de commande de panneaux pour le PA
*
---------------------------------------------------------------------------- */

var             vl_liste_positions
var             i,j
var             vl_taille
var     vl_taille2
var             vl_F_tpm
var             vl_ligne

vl_F_tpm = READ_ASCII_FILE@(REP_RENOVE ++ va_trig ++ "/ConfigSceVentilation_" ++ va_trig ++ ".cfg")
vl_taille = ARRAY_SIZE@(vl_F_tpm)-1


for i = 0 to vl_taille
    if ( substring@(vl_F_tpm[i],1,1) <> "#" )
    {
        vl_ligne = ARRAY_FROM_STRING@(vl_F_tpm[i],",")
        if ( TRIM@(TABS_TO_SPACES@(vl_ligne[0])) = va_NumSequence )
        {
            vl_liste_positions = null
            vl_taille2 = ARRAY_SIZE@(vl_ligne)-1
            for j = 0 to vl_taille2
                vl_liste_positions[j] = TRIM@(TABS_TO_SPACES@(vl_ligne[j]))
            next j

            SET_SYSTEM_VAR@("sequence", vl_liste_positions[1]) '-- nom sequence

            '--suppression des 2 premieres iterations
            vl_liste_positions = ARRAY_DELETE@(vl_liste_positions,0)
            vl_liste_positions = ARRAY_DELETE@(vl_liste_positions,0)

            RETURN(vl_liste_positions)
        }
    }
next i

info_message@("Séquence ventilation numero " ++ va_NumSequence ++ " non trouvée pour ce tunnel...")

vl_liste_positions[0] = -1
RETURN(vl_liste_positions)

ENDMACRO

/*---------------------------------------------------------------------------- */
MACRO ITMA_TTU_ajout_fdp_ven(va_sens, va_vue)
var tl_color
var vl_color

tl_color[0] = 1
tl_color[1] = 0,0,0
tl_color[2] = "noir"

if UPPERCASE@(va_sens) = "S1"
{	/* SUD */

	/* vue accelerateurs + gaine avec trappes */
	
	/* partie haute */
	DB_CREATE_CTRL@(vm_fenetre_TTU,3,"BP_actuel","pix_actuel",5,80,0)
	DB_CTRL_BUTTON_TYPE@(vm_fenetre_TTU,"BP_actuel",4)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"BP_actuel",66)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"BP_actuel",36)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"BP_actuel",True)

	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"TxtSens2","",15,130,0)	
	DB_CTRL_LABEL_FONT_WEIGHT@(vm_fenetre_TTU, "TxtSens2", 1)	
	vl_color[0] = 1
	vl_color[1] = 138, 43, 226
	DB_CTRL_LABEL_COLOR@(vm_fenetre_TTU, "TxtSens2", vl_color)					
	DB_CTRL_TITLE@ (vm_fenetre_TTU, "TxtSens2", "Sud->")
	
	'' traits de liaison des registres verticaux UV1
	DB_CREATE_CTRL@(vm_fenetre_TTU,8,"liaisonv1UV1"," ",215,88,0)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"liaisonv1UV1",100)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"liaisonv1UV1",4)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"liaisonv1UV1",True)
	DB_CTRL_LINE_THICKNESS@(vm_fenetre_TTU,"liaisonv1UV1",2)
	DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU, "liaisonv1UV1", tl_color)
    
	DB_CREATE_CTRL@(vm_fenetre_TTU,8,"liaisonv1UV12"," ",315,88,0)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"liaisonv1UV12",100)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"liaisonv1UV12",4)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"liaisonv1UV12",True)
	DB_CTRL_LINE_THICKNESS@(vm_fenetre_TTU,"liaisonv1UV12",2)
	DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU, "liaisonv1UV12", tl_color)
    
	DB_CREATE_CTRL@(vm_fenetre_TTU,8,"liaisonv1UV13"," ",415,88,0)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"liaisonv1UV13",100)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"liaisonv1UV13",4)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"liaisonv1UV13",True)
	DB_CTRL_LINE_THICKNESS@(vm_fenetre_TTU,"liaisonv1UV13",2)
	DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU, "liaisonv1UV13", tl_color)
    
	''' traits de liaison des registres horizontaux UV1
	DB_CREATE_CTRL@(vm_fenetre_TTU,8,"liaisonh1UV1"," ",195,185,0)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"liaisonh1UV1",4)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"liaisonh1UV1",248)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"liaisonh1UV1",True)
	DB_CTRL_LINE_THICKNESS@(vm_fenetre_TTU,"liaisonh1UV1",2)
	DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU, "liaisonh1UV1", tl_color)
	
	''' traits de liaison des registres verticaux UV2
	DB_CREATE_CTRL@(vm_fenetre_TTU,8,"liaisonv1UV2"," ",665,88,0)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"liaisonv1UV2",100)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"liaisonv1UV2",4)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"liaisonv1UV2",True)
	DB_CTRL_LINE_THICKNESS@(vm_fenetre_TTU,"liaisonv1UV2",2)
	DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU, "liaisonv1UV2", tl_color)
    
	DB_CREATE_CTRL@(vm_fenetre_TTU,8,"liaisonv1UV22"," ",765,88,0)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"liaisonv1UV22",100)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"liaisonv1UV22",4)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"liaisonv1UV22",True)
	DB_CTRL_LINE_THICKNESS@(vm_fenetre_TTU,"liaisonv1UV22",2)
	DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU, "liaisonv1UV22", tl_color)
    
	DB_CREATE_CTRL@(vm_fenetre_TTU,8,"liaisonv1UV23"," ",865,88,0)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"liaisonv1UV23",100)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"liaisonv1UV23",4)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"liaisonv1UV23",True)
	DB_CTRL_LINE_THICKNESS@(vm_fenetre_TTU,"liaisonv1UV23",2)
	DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU, "liaisonv1UV23", tl_color)
    
	''' traits de liaison des registres horizontaux UV2
	DB_CREATE_CTRL@(vm_fenetre_TTU,8,"liaisonh1UV2"," ",640,185,0)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"liaisonh1UV2",4)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"liaisonh1UV2",248)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"liaisonh1UV2",True)
	DB_CTRL_LINE_THICKNESS@(vm_fenetre_TTU,"liaisonh1UV2",2)
	DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU, "liaisonh1UV2", tl_color)
			
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"Gaine","Gaine Air Frais",500,120,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"Gaine","Gaine Air vicié",500,290,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"Gaine","UV1",165,65,0)        
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"Gaine","UV2",575,65,0)

	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"accelerateur","Accélérateurs",75,308,0)        
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"accelerateur","tunnel",90,320,0)        

	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"accelerateur","Accélérateurs",905,308,0)        
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"accelerateur","tunnel",920,320,0)        
	
	/* partie libellés equipement */
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AF1SO",245,85,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AF1SS",345,85,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AF1SE",445,85,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AF2SO",610,85,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AF2SS",710,85,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AF2SE",810,85,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",250,100,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",350,100,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",450,100,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",635,100,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",735,100,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",835,100,0)

	'DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AV1SA",245,274,0)
	'DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AV1SB",345,274,0)
	'DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AV2SB",645,274,0)
	'DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AV2SA",845,274,0)

	'DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R1",220,274,0)
	'DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R2",320,274,0)
	'DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R2",620,274,0)
	'DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R1",820,274,0)

	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R1-AV1SA",155,315,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R2-AV1SB",405,315,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R2-AV2SB",555,315,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R1-AV2SA",755,315,0)	

	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R1",237,140,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R3",337,140,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R2",437,140,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R4",260,155,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R5",360,155,0)

	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R1",688,140,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R3",788,140,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R2",888,140,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R5",710,155,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R4",810,155,0)
	
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","4",135,85,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",76,85,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","3",135,145,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","2",135,210,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",76,210,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","1",135,275,0)

	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","4",965,85,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",908,83,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","3",965,145,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","2",965,210,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",908,208,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","1",965,275,0)
		
	/* partie trappes */		
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","59",859,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","57",835,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","55",811,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","53",787,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","51",763,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","49",738,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","47",714,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","45",690,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","43",666,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","41",642,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","39",618,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","37",594,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","35",570,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","33",546,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","31",522,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","29",498,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","27",474,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","25",450,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","23",426,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","21",402,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","19",378,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","17",354,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","15",330,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","13",306,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","11",282,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","9", 260,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","7", 236,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","5", 212,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","3", 188,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","1", 164,205,0)

	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","58",847,241,0)	
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","56",823,241,0)	
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","54",799,241,0)	
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","52",775,241,0)	
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","50",751,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","48",726,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","46",702,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","44",678,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","42",654,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","40",630,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","38",606,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","36",582,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","34",558,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","32",534,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","30",510,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","28",486,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","26",462,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","24",438,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","22",414,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","20",390,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","18",366,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","16",342,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","14",318,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","12",294,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","10",270,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","8", 249,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","6", 225,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","4", 201,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","2", 177,241,0)

	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"sit","16S     15SB    15S     14S    13S 13S 12SB 12S  12S   11S    10S      9S",165,276,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"sit","8SB       8S     7S     6S      6SB     5S       4S     3SB      3S      2S        1S",535,276,0)	
	'' separation haut bas doublée	
	DB_CREATE_CTRL@(vm_fenetre_TTU,6,"barre","pix_barre_separation",0,339,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,6,"barre","pix_barre_separation",315,339,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,6,"barre","pix_barre_separation",630,339,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,6,"barre","pix_barre_separation",0,341,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,6,"barre","pix_barre_separation",315,341,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,6,"barre","pix_barre_separation",630,341,0)
	
	/* partie basse */
	
	DB_CREATE_CTRL@(vm_fenetre_TTU,3,"BP_nouveau","pix_nouveau",5,365,0)
	DB_CTRL_BUTTON_TYPE@(vm_fenetre_TTU,"BP_nouveau",4)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"BP_nouveau",66)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"BP_nouveau",36)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"BP_nouveau",True)
	
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"TxtSens3","",15,415,0)	
	DB_CTRL_LABEL_FONT_WEIGHT@(vm_fenetre_TTU, "TxtSens3", 1)	
	vl_color[0] = 1
	vl_color[1] = 138, 43, 226
	DB_CTRL_LABEL_COLOR@(vm_fenetre_TTU, "TxtSens3", vl_color)					
	DB_CTRL_TITLE@ (vm_fenetre_TTU, "TxtSens3", "Sud->")
	
	'' traits de liaison des registres verticaux UV1
	DB_CREATE_CTRL@(vm_fenetre_TTU,8,"liaisonv1UV1b"," ",217,370,0)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"liaisonv1UV1b",100)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"liaisonv1UV1b",4)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"liaisonv1UV1b",True)
	DB_CTRL_LINE_THICKNESS@(vm_fenetre_TTU,"liaisonv1UV1b",2)
	DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU, "liaisonv1UV1b", tl_color)
    
	DB_CREATE_CTRL@(vm_fenetre_TTU,8,"liaisonv1UV12b"," ",317,370,0)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"liaisonv1UV12b",100)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"liaisonv1UV12b",4)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"liaisonv1UV12b",True)
	DB_CTRL_LINE_THICKNESS@(vm_fenetre_TTU,"liaisonv1UV12b",2)
	DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU, "liaisonv1UV12b", tl_color)
    
	DB_CREATE_CTRL@(vm_fenetre_TTU,8,"liaisonv1UV13b"," ",417,370,0)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"liaisonv1UV13b",100)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"liaisonv1UV13b",4)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"liaisonv1UV13b",True)
	DB_CTRL_LINE_THICKNESS@(vm_fenetre_TTU,"liaisonv1UV13b",2)
	DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU, "liaisonv1UV13b", tl_color)
    
	''' traits de liaison des registres horizontaux UV1
	DB_CREATE_CTRL@(vm_fenetre_TTU,8,"liaisonh1UV1b"," ",195,467,0)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"liaisonh1UV1b",4)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"liaisonh1UV1b",248)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"liaisonh1UV1b",True)
	DB_CTRL_LINE_THICKNESS@(vm_fenetre_TTU,"liaisonh1UV1b",2)
	DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU, "liaisonh1UV1b", tl_color)
	
	''' traits de liaison des registres verticaux UV2
	DB_CREATE_CTRL@(vm_fenetre_TTU,8,"liaisonv1UV2b"," ",667,370,0)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"liaisonv1UV2b",100)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"liaisonv1UV2b",4)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"liaisonv1UV2b",True)
	DB_CTRL_LINE_THICKNESS@(vm_fenetre_TTU,"liaisonv1UV2b",2)
	DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU, "liaisonv1UV2b", tl_color)
    
	DB_CREATE_CTRL@(vm_fenetre_TTU,8,"liaisonv1UV22b"," ",767,370,0)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"liaisonv1UV22b",100)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"liaisonv1UV22b",4)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"liaisonv1UV22b",True)
	DB_CTRL_LINE_THICKNESS@(vm_fenetre_TTU,"liaisonv1UV22b",2)
	DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU, "liaisonv1UV22b", tl_color)
    
	DB_CREATE_CTRL@(vm_fenetre_TTU,8,"liaisonv1UV23b"," ",867,370,0)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"liaisonv1UV23b",100)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"liaisonv1UV23b",4)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"liaisonv1UV23b",True)
	DB_CTRL_LINE_THICKNESS@(vm_fenetre_TTU,"liaisonv1UV23b",2)
	DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU, "liaisonv1UV23b", tl_color)
    
	''' traits de liaison des registres horizontaux UV2
	DB_CREATE_CTRL@(vm_fenetre_TTU,8,"liaisonh1UV2b"," ",645,467,0)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"liaisonh1UV2b",4)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"liaisonh1UV2b",248)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"liaisonh1UV2b",True)
	DB_CTRL_LINE_THICKNESS@(vm_fenetre_TTU,"liaisonh1UV2b",2)
	DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU, "liaisonh1UV2b", tl_color)
					
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"Gaine","Gaine Air Frais",500,405,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"Gaine","Gaine Air vicié",500,575,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"Gaine","UV1",165,350,0)        
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"Gaine","UV2",575,350,0)

	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"accelerateur","Accélérateurs",75,588,0)        
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"accelerateur","tunnel",90,600,0)        

	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"accelerateur","Accélérateurs",905,588,0)        
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"accelerateur","tunnel",920,600,0)        

	/* partie libellés equipement */
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AF1SO",245,367,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AF1SS",345,367,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AF1SE",445,367,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AF2SO",610,367,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AF2SS",710,367,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AF2SE",810,367,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",250,382,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",350,382,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",450,382,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",635,382,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",735,382,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",835,382,0)

	'DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AV1SA",250,558,0)
	'DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AV1SB",350,558,0)
	'DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AV2SB",650,558,0)
	'DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AV2SA",850,558,0)

	'DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R1",220,558,0)
	'DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R2",320,558,0)
	'DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R2",620,558,0)
	'DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R1",820,558,0)

	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R1-AV1SA",155,595,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R2-AV1SB",405,595,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R2-AV2SB",555,595,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R1-AV2SA",755,595,0)
	
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R1",237,427,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R3",337,427,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R2",437,427,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R4",260,440,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R5",360,440,0)

	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R1",687,427,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R3",787,427,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R2",887,427,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R5",710,440,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R4",810,440,0)
	
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","4",135,367,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",76,367,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","3",135,427,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","2",135,492,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",76,492,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","1",135,557,0)

	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","4",965,367,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",908,367,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","3",965,427,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","2",965,492,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",908,492,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","1",965,557,0)

	/* partie trappes */			
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","59",862,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","57",838,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","55",814,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","53",790,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","51",766,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","49",741,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","47",717,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","45",693,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","43",669,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","41",645,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","39",621,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","37",597,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","35",573,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","33",549,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","31",525,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","29",501,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","27",477,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","25",453,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","23",429,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","21",405,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","19",381,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","17",357,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","15",333,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","13",309,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","11",285,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","9", 263,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","7", 239,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","5", 215,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","3", 191,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","1", 167,487,0)
                                                    
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","58",850,523,0)	
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","56",826,523,0)	
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","54",802,523,0)	
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","52",778,523,0)	
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","50",754,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","48",729,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","46",705,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","44",681,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","42",657,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","40",633,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","38",609,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","36",585,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","34",561,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","32",537,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","30",513,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","28",489,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","26",465,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","24",441,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","22",417,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","20",393,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","18",369,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","16",345,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","14",321,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","12",297,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","10",273,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","8", 252,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","6", 228,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","4", 204,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","2", 180,523,0)	

	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"sit","16S     15SB    15S     14S    13S 13S 12SB 12S  12S   11S    10S      9S",165,558,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"sit","8SB       8S     7S     6S      6SB     5S       4S     3SB      3S      2S        1S",535,558,0)	
}
else
{	/* NORD */

	/* vue accelerateurs + gaine avec trappes */
	
	/* partie haute */
	DB_CREATE_CTRL@(vm_fenetre_TTU,3,"BP_actuel","pix_actuel",925,60,0)
	DB_CTRL_BUTTON_TYPE@(vm_fenetre_TTU,"BP_actuel",4)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"BP_actuel",66)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"BP_actuel",36)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"BP_actuel",True)

	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"TxtSens2","",930,92,0)	
	DB_CTRL_LABEL_FONT_WEIGHT@(vm_fenetre_TTU, "TxtSens2", 1)	
	vl_color[0] = 1
	vl_color[1] = 0, 0, 255
	DB_CTRL_LABEL_COLOR@(vm_fenetre_TTU, "TxtSens2", vl_color)					
	DB_CTRL_TITLE@ (vm_fenetre_TTU, "TxtSens2", "<-Nord")
	
	'' traits de liaison des registres verticaux UV1
	DB_CREATE_CTRL@(vm_fenetre_TTU,8,"liaisonv1UV1"," ",215,88,0)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"liaisonv1UV1",100)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"liaisonv1UV1",4)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"liaisonv1UV1",True)
	DB_CTRL_LINE_THICKNESS@(vm_fenetre_TTU,"liaisonv1UV1",2)
	DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU, "liaisonv1UV1", tl_color)

	DB_CREATE_CTRL@(vm_fenetre_TTU,8,"liaisonv1UV12"," ",315,88,0)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"liaisonv1UV12",100)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"liaisonv1UV12",4)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"liaisonv1UV12",True)
	DB_CTRL_LINE_THICKNESS@(vm_fenetre_TTU,"liaisonv1UV12",2)
	DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU, "liaisonv1UV12", tl_color)

	DB_CREATE_CTRL@(vm_fenetre_TTU,8,"liaisonv1UV13"," ",415,88,0)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"liaisonv1UV13",100)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"liaisonv1UV13",4)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"liaisonv1UV13",True)
	DB_CTRL_LINE_THICKNESS@(vm_fenetre_TTU,"liaisonv1UV13",2)
	DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU, "liaisonv1UV13", tl_color)

	''' traits de liaison des registres horizontaux UV1
	DB_CREATE_CTRL@(vm_fenetre_TTU,8,"liaisonh1UV1"," ",195,185,0)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"liaisonh1UV1",4)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"liaisonh1UV1",248)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"liaisonh1UV1",True)
	DB_CTRL_LINE_THICKNESS@(vm_fenetre_TTU,"liaisonh1UV1",2)
	DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU, "liaisonh1UV1", tl_color)
	
	''' traits de liaison des registres verticaux UV2
	DB_CREATE_CTRL@(vm_fenetre_TTU,8,"liaisonv1UV2"," ",595,88,0)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"liaisonv1UV2",100)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"liaisonv1UV2",4)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"liaisonv1UV2",True)
	DB_CTRL_LINE_THICKNESS@(vm_fenetre_TTU,"liaisonv1UV2",2)
	DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU, "liaisonv1UV2", tl_color)

	DB_CREATE_CTRL@(vm_fenetre_TTU,8,"liaisonv1UV22"," ",695,88,0)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"liaisonv1UV22",100)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"liaisonv1UV22",4)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"liaisonv1UV22",True)
	DB_CTRL_LINE_THICKNESS@(vm_fenetre_TTU,"liaisonv1UV22",2)
	DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU, "liaisonv1UV22", tl_color)

	DB_CREATE_CTRL@(vm_fenetre_TTU,8,"liaisonv1UV23"," ",795,92,0)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"liaisonv1UV23",100)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"liaisonv1UV23",4)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"liaisonv1UV23",True)
	DB_CTRL_LINE_THICKNESS@(vm_fenetre_TTU,"liaisonv1UV23",2)
	DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU, "liaisonv1UV23", tl_color)

	''' traits de liaison des registres horizontaux UV2
	DB_CREATE_CTRL@(vm_fenetre_TTU,8,"liaisonh1UV2"," ",580,188,0)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"liaisonh1UV2",4)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"liaisonh1UV2",248)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"liaisonh1UV2",True)
	DB_CTRL_LINE_THICKNESS@(vm_fenetre_TTU,"liaisonh1UV2",2)
	DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU, "liaisonh1UV2", tl_color)
			
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"Gaine","Gaine Air Frais",480,120,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"Gaine","Gaine Air vicié",480,290,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"Gaine","UV1",165,65,0)        
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"Gaine","UV2",545,65,0)

	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"accelerateur","Accélérateurs",55,308,0)        
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"accelerateur","tunnel",70,320,0)        

	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"accelerateur","Accélérateurs",855,308,0)        
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"accelerateur","tunnel",870,320,0)        
	
	/* partie libellés equipement */
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AF1NO",245,85,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AF1NS",345,85,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AF1NE",445,85,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AF2NO",625,85,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AF2NS",725,85,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AF2NE",825,85,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",250,100,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",350,100,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",450,100,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",630,100,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",730,100,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",830,100,0)

	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AV1NOB",245,305,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AV1NOA",345,305,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AV1NE",445,305,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AV2NO",695,305,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AV2NE",795,305,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",250,320,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",350,320,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",450,320,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",700,320,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",800,320,0)

	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R1",237,140,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R2",337,140,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R3",437,140,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R4",260,155,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R5",360,155,0)

	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R1",617,140,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R2",717,140,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R3",817,140,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R4",640,155,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","R5",740,155,0)

	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","1",82,67,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","2",25,107,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",50,140,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","3",82,147,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","4",25,187,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","5",80,227,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",110,260,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","6",25,267,0)

	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","1",890,67,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","2",948,107,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",918,140,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","3",890,147,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","4",950,187,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","5",890,222,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",860,263,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","6",950,267,0)
	
	/* trappes */
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","1", 851,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","3", 827,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","5", 803,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","7", 779,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","9", 755,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","11",730,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","13",706,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","15",682,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","17",658,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","19",634,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","21",610,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","23",586,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","25",562,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","27",538,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","29",514,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","31",490,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","33",466,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","35",442,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","37",418,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","39",394,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","41",370,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","43",346,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","45",322,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","47",298,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","49",274,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","51",250,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","53",226,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","55",202,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","57",178,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","59",154,205,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","61",130,205,0)

	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","2" ,839,241,0)	
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","4" ,815,241,0)	
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","6" ,791,241,0)	
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","8" ,767,241,0)	
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","10",741,241,0)	
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","12",718,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","14",694,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","16",670,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","18",646,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","20",622,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","22",598,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","24",574,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","26",550,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","28",526,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","30",502,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","32",478,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","34",454,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","36",430,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","38",406,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","40",382,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","42",358,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","44",334,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","46",310,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","48",286,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","50",262,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","52",238,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","54",214,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","56",190,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","58",166,241,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","60",142,241,0)
	
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"sit","16N          15N        14N          13N         12N         11N         10N           9N",130,276,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"sit","8N            7N          6N            5N           4N           3N           2N            1N",514,276,0)

	'' separation haut bas doublée	
	DB_CREATE_CTRL@(vm_fenetre_TTU,6,"barre","pix_barre_separation",0,339,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,6,"barre","pix_barre_separation",315,339,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,6,"barre","pix_barre_separation",630,339,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,6,"barre","pix_barre_separation",0,341,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,6,"barre","pix_barre_separation",315,341,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,6,"barre","pix_barre_separation",630,341,0)
	
	/* partie basse */
	
	DB_CREATE_CTRL@(vm_fenetre_TTU,3,"BP_nouveau","pix_nouveau",925,345,0)
	DB_CTRL_BUTTON_TYPE@(vm_fenetre_TTU,"BP_nouveau",4)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"BP_nouveau",66)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"BP_nouveau",36)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"BP_nouveau",True)
	
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"TxtSens3","",930,377,0)	
	DB_CTRL_LABEL_FONT_WEIGHT@(vm_fenetre_TTU, "TxtSens3", 1)	
	vl_color[0] = 1
	vl_color[1] = 0, 0, 255
	DB_CTRL_LABEL_COLOR@(vm_fenetre_TTU, "TxtSens3", vl_color)					
	DB_CTRL_TITLE@ (vm_fenetre_TTU, "TxtSens3", "<-Nord")
	
	'' traits de liaison des registres verticaux UV1
	DB_CREATE_CTRL@(vm_fenetre_TTU,8,"liaisonv1UV1b"," ",217,370,0)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"liaisonv1UV1b",100)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"liaisonv1UV1b",4)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"liaisonv1UV1b",True)
	DB_CTRL_LINE_THICKNESS@(vm_fenetre_TTU,"liaisonv1UV1b",2)
	DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU, "liaisonv1UV1b", tl_color)

	DB_CREATE_CTRL@(vm_fenetre_TTU,8,"liaisonv1UV12b"," ",317,370,0)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"liaisonv1UV12b",100)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"liaisonv1UV12b",4)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"liaisonv1UV12b",True)
	DB_CTRL_LINE_THICKNESS@(vm_fenetre_TTU,"liaisonv1UV12b",2)
	DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU, "liaisonv1UV12b", tl_color)

	DB_CREATE_CTRL@(vm_fenetre_TTU,8,"liaisonv1UV13b"," ",417,370,0)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"liaisonv1UV13b",100)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"liaisonv1UV13b",4)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"liaisonv1UV13b",True)
	DB_CTRL_LINE_THICKNESS@(vm_fenetre_TTU,"liaisonv1UV13b",2)
	DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU, "liaisonv1UV13b", tl_color)

	''' traits de liaison des registres horizontaux UV1
	DB_CREATE_CTRL@(vm_fenetre_TTU,8,"liaisonh1UV1b"," ",195,467,0)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"liaisonh1UV1b",4)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"liaisonh1UV1b",248)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"liaisonh1UV1b",True)
	DB_CTRL_LINE_THICKNESS@(vm_fenetre_TTU,"liaisonh1UV1b",2)
	DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU, "liaisonh1UV1b", tl_color)
	
	''' traits de liaison des registres verticaux UV2
	DB_CREATE_CTRL@(vm_fenetre_TTU,8,"liaisonv1UV2b"," ",595,370,0)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"liaisonv1UV2b",100)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"liaisonv1UV2b",4)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"liaisonv1UV2b",True)
	DB_CTRL_LINE_THICKNESS@(vm_fenetre_TTU,"liaisonv1UV2b",2)
	DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU, "liaisonv1UV2b", tl_color)

	DB_CREATE_CTRL@(vm_fenetre_TTU,8,"liaisonv1UV22b"," ",695,370,0)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"liaisonv1UV22b",100)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"liaisonv1UV22b",4)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"liaisonv1UV22b",True)
	DB_CTRL_LINE_THICKNESS@(vm_fenetre_TTU,"liaisonv1UV22b",2)
	DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU, "liaisonv1UV22b", tl_color)

	DB_CREATE_CTRL@(vm_fenetre_TTU,8,"liaisonv1UV23b"," ",795,370,0)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"liaisonv1UV23b",100)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"liaisonv1UV23b",4)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"liaisonv1UV23b",True)
	DB_CTRL_LINE_THICKNESS@(vm_fenetre_TTU,"liaisonv1UV23b",2)
	DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU, "liaisonv1UV23b", tl_color)

	''' traits de liaison des registres horizontaux UV2
	DB_CREATE_CTRL@(vm_fenetre_TTU,8,"liaisonh1UV2b"," ",575,467,0)
	DB_CTRL_HEIGHT@(vm_fenetre_TTU,"liaisonh1UV2b",4)
	DB_CTRL_WIDTH@(vm_fenetre_TTU,"liaisonh1UV2b",248)
	DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"liaisonh1UV2b",True)
	DB_CTRL_LINE_THICKNESS@(vm_fenetre_TTU,"liaisonh1UV2b",2)
	DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU, "liaisonh1UV2b", tl_color)
					
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"Gaine","Gaine Air Frais",480,405,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"Gaine","Gaine Air vicié",480,575,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"Gaine","UV1",165,350,0)        
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"Gaine","UV2",545,350,0)

	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"accelerateur","Accélérateurs",55,588,0)        
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"accelerateur","tunnel",70,600,0)        

	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"accelerateur","Accélérateurs",855,588,0)        
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"accelerateur","tunnel",870,600,0) 

	/* partie libellés equipement */
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AF1NO",245,370,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AF1NS",345,370,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AF1NE",445,370,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AF2NO",625,370,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AF2NS",725,370,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AF2NE",825,370,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",250,385,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",350,385,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",450,385,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",630,385,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",730,385,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",830,385,0)

	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AV1NOB",245,590,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AV1NOA",345,590,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AV1NE",445,590,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AV2NO",695,590,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","AV2NE",795,590,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",250,605,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",350,605,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",450,605,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",700,605,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",800,605,0)


	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","1",82,352,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","2",25,392,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",50,422,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","3",82,432,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","4",25,472,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","5",80,512,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",110,540,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","6",25,552,0)

	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","1",890,352,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","2",948,392,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",922,422,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","3",890,432,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","4",950,472,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","5",887,512,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","%",863,540,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"libelle","6",950,552,0)
	
	
	/* trappes */
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","1", 853,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","3", 829,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","5", 805,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","7", 781,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","9", 757,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","11",732,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","13",708,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","15",684,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","17",660,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","19",636,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","21",612,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","23",588,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","25",564,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","27",540,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","29",516,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","31",492,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","33",468,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","35",444,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","37",420,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","39",396,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","41",372,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","43",348,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","45",324,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","47",300,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","49",276,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","51",252,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","53",228,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","55",204,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","57",180,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","59",156,487,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","61",132,487,0)
	
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","2" ,841,523,0)	
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","4" ,817,523,0)	
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","6" ,793,523,0)	
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","8" ,769,523,0)	
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","10",743,523,0)	
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","12",720,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","14",696,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","16",672,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","18",648,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","20",624,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","22",600,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","24",576,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","26",552,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","28",528,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","30",504,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","32",480,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","34",456,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","36",432,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","38",408,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","40",384,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","42",360,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","44",336,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","46",312,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","48",288,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","50",264,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","52",240,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","54",216,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","56",192,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","58",168,523,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"trappes","60",144,523,0)	
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"sit","16N          15N        14N          13N         12N         11N         10N           9N",130,558,0)
	DB_CREATE_CTRL@(vm_fenetre_TTU,5,"sit","8N            7N          6N            5N           4N           3N           2N            1N",514,558,0)
}

return

ENDMACRO



MACRO ITMA_TTU_Cde_Desenfumage_Toulon(va_NumTube, va_Sce_Ventilation, va_sens)
/*
* ARGUMENTS EN ENTREE :
* 
*
* ARGUMENTS EN SORTIE : Choix effectué
*
*
* CODE RETOUR         : Status OK ou NOK suivant résultat
*
* CONDITION D'UTILISATION
*   
*
* FONCTION
*   Commande de désenfumage
*
---------------------------------------------------------------------------- */
var vl_cmd
var vl_text
var tl_param
var vl_taille
var vl_retour
var vl_trouve
var i
var vl_action
var tl_commande

	if STRING_INDEX@(vm_nom_tunnel,"S1") <> 0
		tl_commande = 0,0,0,"NE1S","NE2S vers NE1S","NE2S","NE3S vers NE2S","NE3S","NS3SB vers NE3S","NS3SB","NE4S vers NS3SB","NE4S","NE5S vers NE4S","NE5S","NE6SB vers NE5S","NE6SB","NS6S vers NE6SB","NS6S","NE7S vers NS6S","NE7S","NE8S vers NE7S","NE8S","NE8SB vers NE8S","NE8SB","NE9S vers NE8SB","NE9S","NE10S vers NE9S","NE10S","NE11S vers NE10S","NE11S","NS12S vers NE11S","NS12S","NE12S vers NS12S","NE12S","NS12SB vers NE12S","NS12SB","NE13S vers NS12SB","NE13S","NS13S vers NE13S","NS13S","NE14S vers NS13S","NE14S","NE15S vers NE14S","NE15S","NE15SB vers NE15S","NE15SB","NE16S vers NE15SB","NE16S"
	else
		tl_commande = 0,0,0,"16N","15N vers 16N","15N","14N vers 15N","14N","13N vers 14N","13N","12N vers 13N","12N","11N vers 12N","11N","10N vers 11N","10N","9N vers 10N","9N","8N vers 9N","8N","7N vers 8N","7N","6N vers 7N","6N","5N vers 6N","5N","4N vers 5N","4N","3N vers 4N","3N","2N vers 3N","2N","1N vers 2N","1N"
		
	vl_action = TRUE
	WHILE (vl_action)

	if STRING_INDEX@(vm_nom_tunnel,"S1") <> 0
		vl_cmd = PEND_FOR_NEW_TASK@("ITMA_TTU_Choix_Cde_Desenfumage_Toulon_S1", va_sens, vm_nom_tunnel)
	else
		vl_cmd = PEND_FOR_NEW_TASK@("ITMA_TTU_Choix_Cde_Desenfumage_Toulon_S2", va_sens, vm_nom_tunnel)
		
	if vl_cmd = -1 or vl_cmd = null
	{
		vl_action = FALSE
		GOTO NON_DESENFUMAGE
	}

	/* gestion de la fenetre de demande de confirmation */
	if vl_cmd=COM_SCEN_VENT_AT_TO_1 or vl_cmd=COM_SCEN_VENT_AT_TO_2
	{
		vl_text = "Arrêt désenfumage"
		tl_param[24] = 340	'largeur bouton poussoir
		tl_param[25] = 360	'largeur fenetre
	}
	else
	{
		vl_text = "Incendie localisé " ++ tl_commande[vl_cmd]
		tl_param[24] = 340	'largeur bouton poussoir
		tl_param[25] = 360	'largeur fenetre
	}

	/*A Demande de confirmation */
	tl_param[0] = 1	'nombre de boutons
	tl_param[1] = 0	'position X fenetre
	tl_param[2] = 0	'position y fenetre
	tl_param[3] = vl_text 'titre de la fenetre
	tl_param[4] = "CONFIRMER"	'titre bouton
	tl_param[5] = "BP_CONFIRME"	'nom bouton

	vl_retour = PEND_FOR_NEW_TASK@("ITMA_TTU_confirmation", tl_param)
	if vl_retour = -1 or vl_retour = null
	{
		GOTO NON_DESENFUMAGE
	}

	vl_taille = ARRAY_SIZE@(va_Sce_Ventilation) -1
	vl_trouve = False
	for i = 0 to vl_taille
		if va_Sce_Ventilation[i,0] = vl_cmd
		{
			vm_NumSequence = va_Sce_Ventilation[i,0]
			vl_trouve = True
			break i
		}
	next i

	if vl_trouve = True
	{
		ITMA_TTU_Commande_Seq_Tunnel_ventilation (	
							va_NumTube,
							XDC_FAUX,
							vm_NumSequence)
		vl_action = FALSE
	}
	else
	{
		/*B trace de l'erreur */
		vl_text = "ITMA_TTU_ventilation : numéro de scénario inexistant = "++ vl_cmd
		COM01_Trace(0,vl_text)
	}

	NON_DESENFUMAGE :

	WEND


	RETURN


ENDMACRO


MACRO ITMA_TTU_Choix_Cde_Desenfumage_Toulon_S1(va_sens, va_tunnel)
/*
* ARGUMENTS EN ENTREE :
* 
*
* ARGUMENTS EN SORTIE : Choix effectué
*
*
* CODE RETOUR         : Status OK ou NOK suivant résultat
*
* CONDITION D'UTILISATION
*   
*
* FONCTION
*    Choix de la commande de désenfumage
*
---------------------------------------------------------------------------- */
/*A Déclaration des variables statiques */
var vl_fenetre_active
var vl_titre_fen
var vl_controle_sortie
var vl_text
var tl_color

/*A Traitements en cas d'erreur durant l'initialisation :
*   informer l'operateur, tracer l'erreur et abandonner
* ------------------------------------------------------*/
ON ERROR 
{
	ERROR_BOX@
	COM01_Trace (COM_WARNING, COM03_Message_Erreur (C_MODULE))
	RETURN(COM_NOK)
}

/*A Chargement de la fenetre & assignation des sockets 
*   -------------------------------------------------- */

vm_Nom_Fenetre = "ITMA_TTU_desenfumage_Toulon_S1"

vm_fenetre_TTU = DB_LOAD@(vm_Nom_Fenetre)

vm_messages_acceptes[0] = COM_CANAL_FIN
DB_ACCEPT_POKES@ (vm_fenetre_TTU, vm_messages_acceptes)
 
DB_DISPLAY_ONLY@(vm_fenetre_TTU,True)
DB_DISPLAY@(vm_fenetre_TTU)
DB_DISPLAY_ONLY@(vm_fenetre_TTU,False)

vl_fenetre_active = TRUE
/*A tant que la fenetre est active */
WHILE (vl_fenetre_active)

	
	/* affichage de la liste */
	DB_DISPLAY@(vm_fenetre_TTU)
	vl_titre_fen = DB_GET_TITLE@(vm_fenetre_TTU)
	PROMOTE_DIALOG@(vl_titre_fen)

	/*A capture de l'evenement dans la BD TCA */
	vl_controle_sortie = DB_EXIT_CTRL@(vm_fenetre_TTU)

	/*A si l'evenement n'est pas un poke & verrou=vrai */
	if vl_controle_sortie<>"poke_" and SYSTEM_VAR@(vg_verrou)
		/*A reset de l'evenement */
		{ vl_controle_sortie = NULL }

	/* selon l'evenement */
	CASE OF vl_controle_sortie

	/*A sur reception de poke */
	CASE "poke_"
	
		/*A suivant le canal de reception de poke */
		CASE OF DB_GET_POKE@(vm_fenetre_TTU)

		/*A si poke de fin de canal : fermeture de fenetre */
		CASE COM_CANAL_FIN
			/*A la fenetre n'est plus active */
			vl_fenetre_active = FALSE

			
		ENDCASE

	/*A sur choix arret séquence */
	CASE "BP_arret"
		/* retour choix arret scenario en cours */
		RETURN(COM_SCEN_VENT_AT_TO_1)	

	/*A sur choix scenario1 16S */
	CASE "BP_scenario1"
		/* retour choix scenario1 */
		RETURN(COM_SCEN_VENT_TO_1_1)

	/*A sur choix scenario2 15SB*/
	CASE "BP_scenario2"
		/* retour choix scenario2 */
		RETURN(COM_SCEN_VENT_TO_1_2)

	/*A sur choix scenario3 15S */
	CASE "BP_scenario3"
		/* retour choix scenario3 */
		RETURN(COM_SCEN_VENT_TO_1_3)

	/*A sur choix scenario4 14S */
	CASE "BP_scenario4"
		/* retour choix scenario4 */
		RETURN(COM_SCEN_VENT_TO_1_4)

	/*A sur choix scenario5 13S */
	CASE "BP_scenario5"
		/* retour choix scenario5 */
		RETURN(COM_SCEN_VENT_TO_1_5)

	/*A sur choix scenario6 13S */
	CASE "BP_scenario6"
		/* retour choix scenario6 */
		RETURN(COM_SCEN_VENT_TO_1_6)

	/*A sur choix scenario7 12SB */
	CASE "BP_scenario7"
		/* retour choix scenario7 */
		RETURN(COM_SCEN_VENT_TO_1_7)

	/*A sur choix scenario8 12S */
	CASE "BP_scenario8"
		/* retour choix scenario8 */
		RETURN(COM_SCEN_VENT_TO_1_8)

	/*A sur choix scenario9 12S */
	CASE "BP_scenario9"
		/* retour choix scenario9 */
		RETURN(COM_SCEN_VENT_TO_1_9)

	/*A sur choix scenario10 11S */
	CASE "BP_scenario10"
		/* retour choix scenario10 */
		RETURN(COM_SCEN_VENT_TO_1_10)

	/*A sur choix scenario11 10S */
	CASE "BP_scenario11"
		/* retour choix scenario11 */
		RETURN(COM_SCEN_VENT_TO_1_11)

	/*A sur choix scenario12 9S */
	CASE "BP_scenario12"
		/* retour choix scenario12 */
		RETURN(COM_SCEN_VENT_TO_1_12)

	/*A sur choix scenario13 8SB */
	CASE "BP_scenario13"
		/* retour choix scenario13 */
		RETURN(COM_SCEN_VENT_TO_1_13)

	/*A sur choix scenario14 8S */
	CASE "BP_scenario14"
		/* retour choix scenario14 */
		RETURN(COM_SCEN_VENT_TO_1_14)

	/*A sur choix scenario15 7S */
	CASE "BP_scenario15"
		/* retour choix scenario15 */
		RETURN(COM_SCEN_VENT_TO_1_15)

	/*A sur choix scenario16 6S */
	CASE "BP_scenario16"
		/* retour choix scenario16 */
		RETURN(COM_SCEN_VENT_TO_1_16)

	/*A sur choix scenario17 6SB */
	CASE "BP_scenario17"
		/* retour choix scenario17 */
		RETURN(COM_SCEN_VENT_TO_1_17)

	/*A sur choix scenario18 5S */
	CASE "BP_scenario18"
		/* retour choix scenario18 */
		RETURN(COM_SCEN_VENT_TO_1_18)

	/*A sur choix scenario19 4S */
	CASE "BP_scenario19"
		/* retour choix scenario19 */
		RETURN(COM_SCEN_VENT_TO_1_19)

	/*A sur choix scenario20 3SB */
	CASE "BP_scenario20"
		/* retour choix scenario20 */
		RETURN(COM_SCEN_VENT_TO_1_20)

	/*A sur choix scenario21 3S */
	CASE "BP_scenario21"
		/* retour choix scenario21 */
		RETURN(COM_SCEN_VENT_TO_1_21)

	/*A sur choix scenario22 2S */
	CASE "BP_scenario22"
		/* retour choix scenario22 */
		RETURN(COM_SCEN_VENT_TO_1_22)

	/*A sur choix scenario23 1S */
	CASE "BP_scenario23"
		/* retour choix scenario23 */
		RETURN(COM_SCEN_VENT_TO_1_23)

	/*A sur choix scenario24 16 15 */
	CASE "BP_scenario24"
		/* retour choix scenario24 */
		RETURN(COM_SCEN_VENT_TO_1_24)

	/*A sur choix scenario25 15 15 */
	CASE "BP_scenario25"
		/* retour choix scenario25 */
		RETURN(COM_SCEN_VENT_TO_1_25)

	/*A sur choix scenario26 15 14 */
	CASE "BP_scenario26"
		/* retour choix scenario26 */
		RETURN(COM_SCEN_VENT_TO_1_26)
		
	/*A sur choix scenario27 14 13 */
	CASE "BP_scenario27"
		/* retour choix scenario27 */
		RETURN(COM_SCEN_VENT_TO_1_27)

	/*A sur choix scenario28 13 13 */
	CASE "BP_scenario28"
		/* retour choix scenario28 */
		RETURN(COM_SCEN_VENT_TO_1_28)

	/*A sur choix scenario29 13 12 */
	CASE "BP_scenario29"
		/* retour choix scenario29 */
		RETURN(COM_SCEN_VENT_TO_1_29)

	/*A sur choix scenario30 12 12 */
	CASE "BP_scenario30"
		/* retour choix scenario30 */
		RETURN(COM_SCEN_VENT_TO_1_30)

	/*A sur choix scenario31 12 12 */
	CASE "BP_scenario31"
		/* retour choix scenario31 */
		RETURN(COM_SCEN_VENT_TO_1_31)

	/*A sur choix scenario32 12 11 */
	CASE "BP_scenario32"
		/* retour choix scenario32 */
		RETURN(COM_SCEN_VENT_TO_1_32)

	/*A sur choix scenario33 11 10 */
	CASE "BP_scenario33"
		/* retour choix scenario33 */
		RETURN(COM_SCEN_VENT_TO_1_33)

	/*A sur choix scenario34 10 9 */
	CASE "BP_scenario34"
		/* retour choix scenario34 */
		RETURN(COM_SCEN_VENT_TO_1_34)

	/*A sur choix scenario35 9 8 */
	CASE "BP_scenario35"
		/* retour choix scenario35 */
		RETURN(COM_SCEN_VENT_TO_1_35)

	/*A sur choix scenario36 8 8 */
	CASE "BP_scenario36"
		/* retour choix scenario36 */
		RETURN(COM_SCEN_VENT_TO_1_36)
		
	/*A sur choix scenario37 8 7 */
	CASE "BP_scenario37"
		/* retour choix scenario37 */
		RETURN(COM_SCEN_VENT_TO_1_37)

	/*A sur choix scenario38 7 6 */
	CASE "BP_scenario38"
		/* retour choix scenario38 */
		RETURN(COM_SCEN_VENT_TO_1_38)

	/*A sur choix scenario39 6 6 */
	CASE "BP_scenario39"
		/* retour choix scenario39 */
		RETURN(COM_SCEN_VENT_TO_1_39)

	/*A sur choix scenario40 6 5 */
	CASE "BP_scenario40"
		/* retour choix scenario40 */
		RETURN(COM_SCEN_VENT_TO_1_40)

	/*A sur choix scenario41 5 4 */
	CASE "BP_scenario41"
		/* retour choix scenario41 */
		RETURN(COM_SCEN_VENT_TO_1_41)

	/*A sur choix scenario42 4 3 */
	CASE "BP_scenario42"
		/* retour choix scenario42 */
		RETURN(COM_SCEN_VENT_TO_1_42)

	/*A sur choix scenario43 3 3 */
	CASE "BP_scenario43"
		/* retour choix scenario43 */
		RETURN(COM_SCEN_VENT_TO_1_43)

	/*A sur choix scenario44 3 2 */
	CASE "BP_scenario44"
		/* retour choix scenario44 */
		RETURN(COM_SCEN_VENT_TO_1_44)

	/*A sur choix scenario45 2 1 */
	CASE "BP_scenario45"
		/* retour choix scenario45 */
		RETURN(COM_SCEN_VENT_TO_1_45)
		
	/*A sur action annuler */
	CASE "BP_annuler"
		/*A la fenetre n'est plus active */
		vl_fenetre_active = FALSE
		RETURN(-1)

	ENDCASE

/*A fin tant que */
WEND

DB_CLOSE@()


RETURN

ENDMACRO

MACRO ITMA_TTU_Choix_Cde_Desenfumage_Toulon_S2(va_sens, va_tunnel)
/*
* ARGUMENTS EN ENTREE :
* 
*
* ARGUMENTS EN SORTIE : Choix effectué
*
*
* CODE RETOUR         : Status OK ou NOK suivant résultat
*
* CONDITION D'UTILISATION
*   
*
* FONCTION
*    Choix de la commande de désenfumage
*
---------------------------------------------------------------------------- */
/*A Déclaration des variables statiques */
var vl_fenetre_active
var vl_titre_fen
var vl_controle_sortie
var vl_text
var tl_color

/*A Traitements en cas d'erreur durant l'initialisation :
*   informer l'operateur, tracer l'erreur et abandonner
* ------------------------------------------------------*/
ON ERROR 
{
	ERROR_BOX@
	COM01_Trace (COM_WARNING, COM03_Message_Erreur (C_MODULE))
	RETURN(COM_NOK)
}

/*A Chargement de la fenetre & assignation des sockets 
*   -------------------------------------------------- */

vm_Nom_Fenetre = "ITMA_TTU_desenfumage_Toulon_S2"

vm_fenetre_TTU = DB_LOAD@(vm_Nom_Fenetre)

vm_messages_acceptes[0] = COM_CANAL_FIN
DB_ACCEPT_POKES@ (vm_fenetre_TTU, vm_messages_acceptes)
 
DB_DISPLAY_ONLY@(vm_fenetre_TTU,True)
DB_DISPLAY@(vm_fenetre_TTU)
DB_DISPLAY_ONLY@(vm_fenetre_TTU,False)

vl_fenetre_active = TRUE
/*A tant que la fenetre est active */
WHILE (vl_fenetre_active)

	
	/* affichage de la liste */
	DB_DISPLAY@(vm_fenetre_TTU)
	vl_titre_fen = DB_GET_TITLE@(vm_fenetre_TTU)
	PROMOTE_DIALOG@(vl_titre_fen)

	/*A capture de l'evenement dans la BD TCA */
	vl_controle_sortie = DB_EXIT_CTRL@(vm_fenetre_TTU)

	/*A si l'evenement n'est pas un poke & verrou=vrai */
	if vl_controle_sortie<>"poke_" and SYSTEM_VAR@(vg_verrou)
		/*A reset de l'evenement */
		{ vl_controle_sortie = NULL }

	/* selon l'evenement */
	CASE OF vl_controle_sortie

	/*A sur reception de poke */
	CASE "poke_"
	
		/*A suivant le canal de reception de poke */
		CASE OF DB_GET_POKE@(vm_fenetre_TTU)

		/*A si poke de fin de canal : fermeture de fenetre */
		CASE COM_CANAL_FIN
			/*A la fenetre n'est plus active */
			vl_fenetre_active = FALSE
			
		ENDCASE

	/*A sur choix arret séquence */
	CASE "BP_arret"
		/* retour choix arret scenario en cours */
		RETURN(COM_SCEN_VENT_AT_TO_2)	

	/*A sur choix scenario1 16*/
	CASE "BP_scenario1"
		/* retour choix scenario1 */
		RETURN(COM_SCEN_VENT_TO_2_1)

	/*A sur choix scenario2 1615*/
	CASE "BP_scenario2"
		/* retour choix scenario2 */
		RETURN(COM_SCEN_VENT_TO_2_2)

	/*A sur choix scenario3 15*/
	CASE "BP_scenario3"
		/* retour choix scenario3 */
		RETURN(COM_SCEN_VENT_TO_2_3)

	/*A sur choix scenario4 1514*/
	CASE "BP_scenario4"
		/* retour choix scenario4 */
		RETURN(COM_SCEN_VENT_TO_2_4)

	/*A sur choix scenario5 14*/
	CASE "BP_scenario5"
		/* retour choix scenario5 */
		RETURN(COM_SCEN_VENT_TO_2_5)

	/*A sur choix scenario6 */
	CASE "BP_scenario6"
		/* retour choix scenario6 */
		RETURN(COM_SCEN_VENT_TO_2_6)

	/*A sur choix scenario7 13*/
	CASE "BP_scenario7"
		/* retour choix scenario7 */
		RETURN(COM_SCEN_VENT_TO_2_7)

	/*A sur choix scenario8 */
	CASE "BP_scenario8"
		/* retour choix scenario8 */
		RETURN(COM_SCEN_VENT_TO_2_8)

	/*A sur choix scenario9 12*/
	CASE "BP_scenario9"
		/* retour choix scenario9 */
		RETURN(COM_SCEN_VENT_TO_2_9)

	/*A sur choix scenario10 */
	CASE "BP_scenario10"
		/* retour choix scenario10 */
		RETURN(COM_SCEN_VENT_TO_2_10)

	/*A sur choix scenario11 11*/
	CASE "BP_scenario11"
		/* retour choix scenario11 */
		RETURN(COM_SCEN_VENT_TO_2_11)

	/*A sur choix scenario12 */
	CASE "BP_scenario12"
		/* retour choix scenario12 */
		RETURN(COM_SCEN_VENT_TO_2_12)

	/*A sur choix scenario13 10*/
	CASE "BP_scenario13"
		/* retour choix scenario13 */
		RETURN(COM_SCEN_VENT_TO_2_13)

	/*A sur choix scenario14 */
	CASE "BP_scenario14"
		/* retour choix scenario14 */
		RETURN(COM_SCEN_VENT_TO_2_14)

	/*A sur choix scenario15 9*/
	CASE "BP_scenario15"
		/* retour choix scenario15 */
		RETURN(COM_SCEN_VENT_TO_2_15)

	/*A sur choix scenario16 */
	CASE "BP_scenario16"
		/* retour choix scenario16 */
		RETURN(COM_SCEN_VENT_TO_2_16)

	/*A sur choix scenario17 8*/
	CASE "BP_scenario17"
		/* retour choix scenario17 */
		RETURN(COM_SCEN_VENT_TO_2_17)

	/*A sur choix scenario18 */
	CASE "BP_scenario18"
		/* retour choix scenario18 */
		RETURN(COM_SCEN_VENT_TO_2_18)

	/*A sur choix scenario19 7*/
	CASE "BP_scenario19"
		/* retour choix scenario19 */
		RETURN(COM_SCEN_VENT_TO_2_19)

	/*A sur choix scenario20 */
	CASE "BP_scenario20"
		/* retour choix scenario20 */
		RETURN(COM_SCEN_VENT_TO_2_20)

	/*A sur choix scenario21 6*/
	CASE "BP_scenario21"
		/* retour choix scenario21 */
		RETURN(COM_SCEN_VENT_TO_2_21)

	/*A sur choix scenario22 */
	CASE "BP_scenario22"
		/* retour choix scenario22 */
		RETURN(COM_SCEN_VENT_TO_2_22)

	/*A sur choix scenario23 5*/
	CASE "BP_scenario23"
		/* retour choix scenario23 */
		RETURN(COM_SCEN_VENT_TO_2_23)

	/*A sur choix scenario24 */
	CASE "BP_scenario24"
		/* retour choix scenario24 */
		RETURN(COM_SCEN_VENT_TO_2_24)

	/*A sur choix scenario25 4*/
	CASE "BP_scenario25"
		/* retour choix scenario25 */
		RETURN(COM_SCEN_VENT_TO_2_25)

	/*A sur choix scenario26 */
	CASE "BP_scenario26"
		/* retour choix scenario26 */
		RETURN(COM_SCEN_VENT_TO_2_26)
		
	/*A sur choix scenario27 3*/
	CASE "BP_scenario27"
		/* retour choix scenario27 */
		RETURN(COM_SCEN_VENT_TO_2_27)

	/*A sur choix scenario28 */
	CASE "BP_scenario28"
		/* retour choix scenario28 */
		RETURN(COM_SCEN_VENT_TO_2_28)

	/*A sur choix scenario29 2*/
	CASE "BP_scenario29"
		/* retour choix scenario29 */
		RETURN(COM_SCEN_VENT_TO_2_29)

	/*A sur choix scenario30 */
	CASE "BP_scenario30"
		/* retour choix scenario30 */
		RETURN(COM_SCEN_VENT_TO_2_30)

	/*A sur choix scenario31 1*/
	CASE "BP_scenario31"
		/* retour choix scenario31 */
		RETURN(COM_SCEN_VENT_TO_2_31)
		
	/*A sur action annuler */
	CASE "BP_annuler"
		/*A la fenetre n'est plus active */
		vl_fenetre_active = FALSE
		RETURN(-1)

	ENDCASE

/*A fin tant que */
WEND

DB_CLOSE@()


RETURN

ENDMACRO

