/*E*/
/* Fichier : $Id: ITMA_TPMVA_pilotage_PMVA_PA.am,v 1.11 2020/11/03 17:45:55 pc2dpdy Exp $      Release : $Revision: 1.11 $       Date : $Date: 2020/11/03 17:45:55 $
*-------------------------------------------------------------------------------
* GTIE *  PROJET MIGRAZUR
-------------------------------------------------------------------------------
* SOUS-SYSTEME  GESIHM
-------------------------------------------------------------------------------
* MODULE MTPM * FICHIER ITMA_TPM_pilotage_PMV_PA.am
-------------------------------------------------------------------------------
* DESCRIPTION DU MODULE :
*
* Le module permet : 
* - soit de commander l'affichage sur 1, 2 ou 3 PMV 
* - soit de consulter l'utilisation d'un PMV
* - soit de.consulter l'action realisee sur un PMV dans une fiche main courante
*
*   Cf. DCG 2.4.58
*
-------------------------------------------------------------------------------
* HISTORIQUE :
*  JMG	14/11/05	creation
*  PNI	21/02/06	On consid√®re qu'il s'agit d'une extinction quand ordre > 200 (et non seulement =255) pour gerer lorsqu'il y a plusieurs eqt √  eteindre DEM630 V1.2
* JMG   31/10/07        : ajout site de gestion  1.3
* JMG   29/09/09        : SECTO DEM 887
* JMG	24/02/12	: linux
* MG	17/08/12		: dtp PMVA (DEM/1014 PMA)	
* JPL	14/03/13	: Prise en compte mise au neutre programme (DEM 1061)  1.7
* PNI	03/03/15	: Suppression de la mise en majuscule des messages DEM1106 1.8
* JPL	07/02/17	: Formatage destinations et temps de parcours; support TdP sur 2 lignes (DEM 1215)  1.9
* JPL	23/03/17	: Changement du terme Secteur en Region (DEM 1173)  1.10
* LCL   22/04/20        : MOVIS Ajout site local pilotage DEM-SAE93
---------------------------------------------------------------------------- */


/*A Description des constantes generales
 * ------------------------------------*/
DEFINE	C_MODULE			"MPMA"	' Nom du module
DEFINE	TAILLE_REMARQUE 	100		' taille de la remarque en caract√®res
DEFINE	REP_CONFIG		"../fichiers/"
DEFINE	C_EXTINCTION		200

/*A Description des modules √  inclures
 * ----------------------------------
 */
INCLUDE	"dbase_.am"
INCLUDE	"../inc/ITMA_COM.h"
INCLUDE	"../inc/ITMA_TDO.h"
INCLUDE	"../inc/ITMA_TAR.h"
INCLUDE	"../inc/ITMA_PMV_format.h"
INCLUDE	"../inc/ITMA_TPM_pilotage_PMV.h"
INCLUDE	"../../XDMICG/inc/xdc_ax.h"
INCLUDE	"../../XDMICG/inc/xzic_ax.h"


/*A Description des procedures sotckees √  appeler
 * ---------------------------------------------*/
INCLUDE	"../inc/xzac01sp.h"
INCLUDE	"../inc/xzac61sp.h"
INCLUDE	"../inc/xzac82sp.h"
INCLUDE	"../inc/xzac840sp.h"
INCLUDE	"../inc/xzac682sp.h"
INCLUDE 	"../inc/xzac84sp.h"
INCLUDE "../inc/xzac611sp.h"
INCLUDE	"../inc/xzat01sp.h"
INCLUDE	"../inc/xzat05sp.h"
INCLUDE	"../inc/xzap12sp.h"
INCLUDE	"../inc/xzap30sp.h"
INCLUDE "../inc/xzao427sp.h"


/*A Description des variables globales
 * ----------------------------------*/
var     	vm_fenetre			' item de la fenetre du module
var     	vm_objet_selecte		' L'objet courant de la fenetre
var     	vm_la_fenetre_est_active	' flag d'activation de la fenetre


var		vm_titre_table_proposition	' titre du tableau des propositions.
var 		vm_table_proposition		' libelles du tableau des proposition
var 		vm_pix_table_proposition	' liste des picto 20*20 du tableau proposition
var		vm_liste_elements		' liste des diferents elements
var		vm_liste_PMV			' liste des differents PMV
var		vm_alternat			' tampon alternat pmv
var		vm_PMV_Actif			' numero du PMV actif (1,2 ou 3)
var		vm_Text_Actif			' type du text modifie (message ou alternat)
var		vm_picto				' la liste des pictos (petit,grand,symbole)
var		vm_District			' le nom du district
var		vm_NomSite			' Nom du site en cours
var		vm_NumAction			' Le n¬∞ d'action retourne par la base
var		vm_NomOperateur
var		vm_validation_nouv_message 	' flag de validation d'une modif de message 
var		vm_mode_formation		' Mode Formation
var		vm_abt_PMVA			' flag d'abonnement au PMV
var 		format Config_PMV	vm_Config_PMV
var		tm_liste_causes
var		vm_RetourPA		 	' code retourne √  l'appelant
var 		vm_Destination			' Destinations tdp
var		vm_arret			' type d'affichage en mode automatique
var		vm_auto				' flag de mode automatique

FORMAT TMC_actionFiche
	numero_fiche,
	cle_fiche,
	numero_action,
	cle_action,
	libelle_fiche,
	heure_action,
	etat_action


/*A Description des tableaux
 * ------------------------*/
var format type_PMVA vm_PMV
var format type_PMVA vm_Lect_PMV
var format type_PMVA vm_etat_PMV


/*X*/
/* ----------------------------------------------------------------------------
* 	DESCRIPTION DES DIFFERENTS MACROS LIEES AU MODULE 'ITMA_TPM_pilotage_PMV_PA.am' :
*  ----------------------------------------------------------------------------
*
*	ITMA_TPM_pilotage_PMV_PA (va_appelant,va_1,va_2,va_3) 
*		description :	Commande l'affichage sur PMV via IHM
*
*	ITMA_TPM_BL_PMV_click_PA
*		description :	Capture le click de la liste des PMV
*					MAJ de la liste des pictogrammes
* 	ITMA_TPM_BL_elements_click_PA
*		description :	Capture le click de la liste des elements
*					MAJ des lignes 1,2 et 3
*
* 	ITMA_TPM_Tabuler_ligne_PA (old,new,taille)
*		description :	Centre un message sur une zone de 'n' caract√®re
*
* 	ITMA_TPM_MAJ_picto_PA 
*		description :	Lecture du PMV selectionnes
*					MAJ de la liste des picto. autorises
*
*	ITMA_TPM_Liste_Pictos_Click_PA
*		descritpion :	Capture du click dans la liste des pictogrammes
*
*	ITMA_TPM_Modif_message_PA
*		description :	Modifications du message et MAJ de la BL
*
*	ITMA_TPM_Appel_Modif_message_PA 
*		description :	Affichage d'un BE pour modification du message
*
*	ITMA_TPM_Lecture_PMV_PA (va_type)
*		descritpion :	Lecture des PMV disponibles
*					via 'XZAT05_Utilisation_PMV'
*
*
*	ITMA_TPM_MAJ_PMV_PA ( va_numero )
*		description :	MAJ des donnees nouvelle sur l'IHM
*					depuis la table PMV
*
*	ITMA_TPM_MAJ_PMV_actuel_PA ( va_numero )
*		description :	MAJ du PMV actuel
*					depuis la table PMV
*
*	ITMA_TPM_Reset_PMV_PA ( va_numero )
*		description :	Reset du PMV 'nouveau' sur l'IHM
*
*	ITMA_TPM_Commande_PMV_PA ( va_numero,va_arret )
*		description :	Commande du nouveau PMV
*
*	ITMA_TPM_Animation_Picto_PA ( va_numero,va_numpic )
*		description :	Petite Animation sur le Picto
*
*	ITMA_TPM_Lire_Prop_PMV_PA ( va_numero,NumPA,Ordre )
*		description :	Lecture de la proposition d'affichage du PMV
*
*	ITMA_TPM_Liste_Eqt_Dispo_PA ( va_numero,va_District,va_Dispo )
*		description :	Lecture des PMV en disponibilites
*
*	ITMA_TPM_Executer_PMV_PA ( va_numero )
*		description :	Execution des commandes PMV
*
*	ITMA_TPM_TEST_table_picto_PA ( va_numero )
*		description :	Test des pictogrammes autorises pour un picto
*
*
*  ----------------------------------------------------------------------------
*/


/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :	Commande l'affichage sur PMV (3 au plus)
*
*  ----------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TPMVA_pilotage_PMVA_PA (va_appelant,va_1,va_2,va_3,va_4,va_5,va_6,va_7)

/*
* ARGUMENTS EN ENTREE :
*  va_appelant		: Nom de la macro Applix ayant invoque la presente.
*  va_1 √  va_6		: N¬∞ d'ordre + N¬∞ PA  ou  N¬∞ Equipement
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Indefini
*
* CONDITION D'UTILISATION
*   Selection de Piloter -> PMV dans MTPA : Plan d'action
*   Selection de Piloter -> PMV dans MTMT : menu textuel
*  Selection d'un PMV sur synotique ( clic droit) -> ISYN_SOP
*
* FONCTION
*   Lit en base de donnees puis affiche la liste des alarmes en cours en
*   mettant en evidence les changements par rapport a la derniere consultation.
*   Permet a l'operateur de choisir des alarmes dans la liste affichee puis
*   d'en effectuer l'acquittement, avec mise a jour de la base de donnees.
*
---------------------------------------------------------------------------- */


VAR FORMAT 	TMC_actionFiche	vl_ficheAction

var		i,j,k				' index de loop
var		vl_mess
var		vl_1,vl_2,vl_3			' variables locales
var		vl_liste_font			' liste des fonts disponibles sous Applix
var		vl_objet				' objet en cours de modification
var		vl_taille				' taille d'une chaine de caract√®res
var		vl_tampon				' table temporaire
var		vl_size				' taille de la table liste_PMV
var		vl_lib_fmc			' tableau du libelle fmc
var		vl_fmc				' libelle fmc √  construire
var		vl_fmc1				' 1ere partie du libelle fmc
var		vl_fmc2				' 2eme partie du libelle fmc
var		vl_erreur				' flag d'erreur
var		vl_numero
var		tl_titres,tl_data,tl_retour
var		vl_numeroLien
var		vl_ligne
var		vl_rang
var		vl_lecture
var		vl_message
var		vl_trouve
var 		vl_num_eqt
var		vl_cle 
var		vl_evt 
var		vl_tplecture			' text tampon de lecture d'une liste
var		vl_tptext				' zone de text tampon
var		vl_messages_acceptes	' les messages acceptes en "_poke"
var		vl_coderet
var		ll_lignes_dest_tdp
var		vl_Destination
var		vl_NumDest
VAR FORMAT SQL_Procedure_Params@ vl_parametres
VAR FORMAT SQL_Procedure_Result@ vl_resultats
var		vl_Dest_tdp


vl_liste_font = LIST_FONT_FAMILIES@()
vm_District = SYSTEM_VAR@("vg_site")

vm_abt_PMVA = FALSE
vm_NomSite = SYSTEM_VAR@("vg_nom_site")

vm_NomOperateur = SYSTEM_VAR@(vg_operateur)
vm_NomOperateur = SUBSTRING@(vm_NomOperateur, 1, 25)
vm_Config_PMV 	= SYSTEM_VAR@(vg_type_PMVA)
vm_validation_nouv_message = XDC_FAUX
vm_RetourPA = COM_QUITTE, COM_QUITTE, COM_QUITTE
vl_NumDest[0] 		= "" + 0
vl_Destination[0] 	= "" 

/*!!! */
/*!!! SET_SYSTEM_VAR@(vg_formation,COM_FORMATION_PASSIF) */
/*!!! */

vm_mode_formation = (SYSTEM_VAR@(vg_formation) <> NULL)

INSTALL_FILE@(XDC_PATHEXE ++ "/ITMA_TPMVA_Lecture_Etat_PMVA.elo")


/*A reset des  PMV 
* -----------------*/
ITMA_TPMVA_Reset_etat_PMVA
ITMA_TPMVA_Reset_Lect_PMVA

/*A Definition du traitement a realiser en cas d'erreur
* -----------------------------------------------------*/

ON ERROR {
    ERROR_BOX@
    COM01_Trace (COM_WARNING, COM03_Message_Erreur (C_MODULE))
    RETURN
}


vl_tptext = "------------------------------------------------------------"
COM01_Trace(0,vl_tptext)
vl_tptext = "   User : " ++ vm_NomOperateur
vl_tptext = "Start ITMA_TPM_pilotage_PMV_PA " ++ vl_tptext
COM01_Trace(0,vl_tptext)

vl_tptext = "va_appelant : " ++ va_appelant
COM01_Trace(0,vl_tptext)

if NOT(IS_ARRAY@(va_1))
{vl_tptext = "va_1 : " ++ va_1
COM01_Trace(0,vl_tptext)}

if NOT(IS_ARRAY@(va_2))
{vl_tptext = "va_2 : " ++ va_2
COM01_Trace(0,vl_tptext)}

if NOT(IS_ARRAY@(va_3))
{vl_tptext = "va_3 : " ++ va_3
COM01_Trace(0,vl_tptext)}

if NOT(IS_ARRAY@(va_4))
{vl_tptext = "va_4 : " ++ va_4
COM01_Trace(0,vl_tptext)}

if NOT(IS_ARRAY@(va_5))
{vl_tptext = "va_5 : " ++ va_5
COM01_Trace(0,vl_tptext)}

if NOT(IS_ARRAY@(va_6))
{vl_tptext = "va_6 : " ++ va_6
COM01_Trace(0,vl_tptext)}

if NOT(IS_ARRAY@(va_7))
{vl_tptext = "va_7 : " ++ va_7
COM01_Trace(0,vl_tptext)}


/* Demande d'execution automatique */
vm_auto=va_7


/*A Charger la fenetre de pilotage PMV 
 * ----------------------*/
if (vm_auto=0)
	vm_fenetre = DB_LOAD@("ITMA_TPMVA_pilotage_PMVA_PA")
else
{	/* fenetre d'attente en cas de tdp */
	vm_fenetre = DB_LOAD@("ITMA_TPMVA_automatic")
}

vl_messages_acceptes[0] = COM_CANAL_FIN
vl_messages_acceptes[1] = COM_CANAL_MTPMVA_ETAT
vl_messages_acceptes[2] = COM_CANAL_MTPMVA_TDP
DB_ACCEPT_POKES@ (vm_fenetre, vl_messages_acceptes)
DB_DISPLAY_ONLY@(vm_fenetre,TRUE)
DB_WINDOW_REMAIN@ (vm_fenetre, TRUE)
DB_XPOS@ (vm_fenetre,0)
if (GET_ENV_VAR@("RTARCH")="hp700_hpux")
DB_YPOS@ (vm_fenetre,300)
else
DB_YPOS@ (vm_fenetre,104)
/* si on n'est pas en pilotage auto, alors  maj fenetre...*/
if (vm_auto=0)
{
DB_CTRL_HORIZ_SCROLL@(vm_fenetre,"TA_proposition",FALSE)
DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre,"TA_proposition",TRUE)
DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre,"BO_1_Arret",TRUE)
DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre,"BO_2_Arret",TRUE)
DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre,"BO_3_Arret",TRUE)
DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre,"BA_1_clignotement1_nouveau",TRUE)
DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre,"BA_1_clignotement2_nouveau",TRUE)
DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre,"BA_1_clignotement3_nouveau",TRUE)
DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre,"BA_1_clignotement4_nouveau",TRUE)
DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre,"BA_1_clignotement5_nouveau",TRUE)
DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre,"BA_2_clignotement1_nouveau",TRUE)
DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre,"BA_2_clignotement2_nouveau",TRUE)
DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre,"BA_2_clignotement3_nouveau",TRUE)
DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre,"BA_2_clignotement4_nouveau",TRUE)
DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre,"BA_2_clignotement5_nouveau",TRUE)
DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre,"BA_3_clignotement1_nouveau",TRUE)
DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre,"BA_3_clignotement2_nouveau",TRUE)
DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre,"BA_3_clignotement3_nouveau",TRUE)
DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre,"BA_3_clignotement4_nouveau",TRUE)
DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre,"BA_3_clignotement5_nouveau",TRUE)
DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre,"BA_1_flash_nouveau",TRUE)
DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre,"BA_2_flash_nouveau",TRUE)
DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre,"BA_3_flash_nouveau",TRUE)
DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre,"BL_PMV",TRUE)
DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre,"BL_elements",TRUE)

/*A Reset des listes de messages PMV */
vl_tplecture[0]=""
vl_tplecture[1]=""
vl_tplecture[2]=""
vl_tplecture[3]=""
vl_tplecture[4]=""
DB_CTRL_STRINGS@(vm_fenetre,"BL_1_message_nouveau",vl_tplecture)
DB_CTRL_STRINGS@(vm_fenetre,"BL_2_message_nouveau",vl_tplecture)
DB_CTRL_STRINGS@(vm_fenetre,"BL_3_message_nouveau",vl_tplecture)
DB_CTRL_STRINGS@(vm_fenetre,"BL_1_alternat_nouveau",vl_tplecture)
DB_CTRL_STRINGS@(vm_fenetre,"BL_2_alternat_nouveau",vl_tplecture)
DB_CTRL_STRINGS@(vm_fenetre,"BL_3_alternat_nouveau",vl_tplecture)
DB_CTRL_VALUE@(vm_fenetre,"BL_1_message_nouveau",-1)
DB_CTRL_VALUE@(vm_fenetre,"BL_2_message_nouveau",-1)
DB_CTRL_VALUE@(vm_fenetre,"BL_3_message_nouveau",-1)
DB_CTRL_VALUE@(vm_fenetre,"BL_1_alternat_nouveau",-1)
DB_CTRL_VALUE@(vm_fenetre,"BL_2_alternat_nouveau",-1)
DB_CTRL_VALUE@(vm_fenetre,"BL_3_alternat_nouveau",-1)


/*A Definir les caracteristiques (initiales) des objets graphiques
* --------------------------------------------------------------*/

/* effacer certains elements de la boite de dialogue */
DB_CTRL_DISPLAY@(vm_fenetre,"Lib1Alt",FALSE)
DB_CTRL_DISPLAY@(vm_fenetre,"Lib2Alt",FALSE)
DB_CTRL_DISPLAY@(vm_fenetre,"Lib3Alt",FALSE)
DB_CTRL_DISPLAY@(vm_fenetre,"BL_1_alternat_actuel",FALSE)
DB_CTRL_DISPLAY@(vm_fenetre,"BL_1_alternat_nouveau",FALSE)
DB_CTRL_DISPLAY@(vm_fenetre,"BL_2_alternat_actuel",FALSE)
DB_CTRL_DISPLAY@(vm_fenetre,"BL_2_alternat_nouveau",FALSE)
DB_CTRL_DISPLAY@(vm_fenetre,"BL_3_alternat_actuel",FALSE)
DB_CTRL_DISPLAY@(vm_fenetre,"BL_3_alternat_nouveau",FALSE)
DB_CTRL_DISPLAY@(vm_fenetre,"BP_1_destination",FALSE)
DB_CTRL_DISPLAY@(vm_fenetre,"BP_1_destination_alt",FALSE)
DB_CTRL_DISPLAY@(vm_fenetre,"BP_2_destination",FALSE)
DB_CTRL_DISPLAY@(vm_fenetre,"BP_2_destination_alt",FALSE)
DB_CTRL_DISPLAY@(vm_fenetre,"BP_3_destination",FALSE)
DB_CTRL_DISPLAY@(vm_fenetre,"BP_3_destination_alt",FALSE)


/* afficher sur fond blanc les zones de listes et de tableaux */
DB_CTRL_WORK_COLORS@(vm_fenetre,"BL_1_message_actuel",TRUE)
DB_CTRL_WORK_COLORS@(vm_fenetre,"BL_1_message_nouveau",TRUE)
DB_CTRL_WORK_COLORS@(vm_fenetre,"BL_2_message_actuel",TRUE)
DB_CTRL_WORK_COLORS@(vm_fenetre,"BL_2_message_nouveau",TRUE)
DB_CTRL_WORK_COLORS@(vm_fenetre,"BL_3_message_actuel",TRUE)
DB_CTRL_WORK_COLORS@(vm_fenetre,"BL_3_message_nouveau",TRUE)
DB_CTRL_WORK_COLORS@(vm_fenetre,"BL_1_alternat_actuel",TRUE)
DB_CTRL_WORK_COLORS@(vm_fenetre,"BL_1_alternat_nouveau",TRUE)
DB_CTRL_WORK_COLORS@(vm_fenetre,"BL_2_alternat_actuel",TRUE)
DB_CTRL_WORK_COLORS@(vm_fenetre,"BL_2_alternat_nouveau",TRUE)
DB_CTRL_WORK_COLORS@(vm_fenetre,"BL_3_alternat_actuel",TRUE)
DB_CTRL_WORK_COLORS@(vm_fenetre,"BL_3_alternat_nouveau",TRUE)


/*A Affichage de la fenetre
* -------------------------*/
DB_DISPLAY@(vm_fenetre)

/*A MAJ TA_proposition
* -------------------*/
vm_pix_table_proposition 		= ""
vm_pix_table_proposition[0]		= REP_CONFIG ++ "/pic/pix_panneau",""
vm_table_proposition 			= ""
vm_table_proposition[0,0]		=" "
vm_table_proposition[0,1]		=" "
vm_table_proposition[0,2]		=" "
vm_table_proposition[0,3]		=" "
vm_table_proposition[0,4]		=" "
vm_titre_table_proposition 		= ""
vm_titre_table_proposition[0,0] 	= "Ligne 1"
vm_titre_table_proposition[0,1]	= 135
vm_titre_table_proposition[1,0] 	= "Ligne 2"
vm_titre_table_proposition[1,1]	= 135
vm_titre_table_proposition[2,0] 	= "Ligne 3"
vm_titre_table_proposition[2,1]	= 135
vm_titre_table_proposition[3,0] 	= "Ligne 4"
vm_titre_table_proposition[3,1]	= 135
vm_titre_table_proposition[4,0] 	= "Ligne 5"
vm_titre_table_proposition[4,1]	= 135

DB_TABLE_ALLOW_EDITING@(vm_fenetre,"TA_proposition",True)
DB_TABLE_ALLOW_COLUMN_RESIZING@(vm_fenetre,"TA_proposition",True)
DB_TABLE_SET_MARKER_WIDTH@(vm_fenetre,"TA_proposition",24)
DB_TABLE_SET_DATA@(	vm_fenetre,
				"TA_proposition",
				vm_table_proposition,
				vm_titre_table_proposition)
DB_TABLE_MARKER_PIXMAPS@(vm_fenetre,"TA_proposition",0,vm_pix_table_proposition)  		

vm_liste_elements = READ_ASCII_FILE@(REP_CONFIG ++ "pmv/ConfigListeElementsPMVA.cfg")

DB_CTRL_STRINGS@(vm_fenetre, "BL_elements", vm_liste_elements)
DB_CTRL_VALUE@(vm_fenetre, "BL_elements", -1)
DB_CTRL_PICK_DEFAULT@(vm_fenetre, "BL_elements", TRUE)

/*A Modif. de la police des fenetres de messages et d'alternats
* -----------------------------------------------------------*/
DB_CTRL_MONOSPACE@(vm_fenetre,"BL_1_message_actuel",TRUE)
DB_CTRL_MONOSPACE@(vm_fenetre,"BL_2_message_actuel",TRUE)
DB_CTRL_MONOSPACE@(vm_fenetre,"BL_3_message_actuel",TRUE)
DB_CTRL_MONOSPACE@(vm_fenetre,"BL_1_alternat_actuel",TRUE)
DB_CTRL_MONOSPACE@(vm_fenetre,"BL_2_alternat_actuel",TRUE)
DB_CTRL_MONOSPACE@(vm_fenetre,"BL_3_alternat_actuel",TRUE)
DB_CTRL_MONOSPACE@(vm_fenetre,"BL_1_message_nouveau",TRUE)
DB_CTRL_MONOSPACE@(vm_fenetre,"BL_2_message_nouveau",TRUE)
DB_CTRL_MONOSPACE@(vm_fenetre,"BL_3_message_nouveau",TRUE)
DB_CTRL_MONOSPACE@(vm_fenetre,"BL_1_alternat_nouveau",TRUE)
DB_CTRL_MONOSPACE@(vm_fenetre,"BL_2_alternat_nouveau",TRUE)
DB_CTRL_MONOSPACE@(vm_fenetre,"BL_3_alternat_nouveau",TRUE)
}
else

DB_DISPLAY_ONLY@(vm_fenetre,FALSE)


/*A Lire l'ÔøΩtat actuel des PMV 
* --------------------------*/
if IS_ARRAY@(va_6)
{	vl_cle = va_6[1]
	vl_evt = va_6[0]
	
	/*A Construction du libelle FMC */
	ITMA_COM_Lire_Evenement ( vl_evt, vl_cle, vl_lib_fmc, C_MODULE)
	vl_fmc = COM11_Libelle_FMC(vl_lib_fmc)
	vl_fmc1=SUBSTRING@(vl_fmc,1,46)
	vl_fmc2=TRIM@(SUBSTRING@(vl_fmc,46,20))	
}
else
{
	info_message@("Impossible de trouver le libelle FMC...")
	vl_cle = 0
	vl_evt = 0	
	vl_fmc = "Pas de lien F.M.C"
	vl_cle = 11
	vl_evt = va_5+0
	ITMA_COM_Lire_Evenement ( vl_evt, vl_cle, vl_lib_fmc, C_MODULE)
	vl_fmc = COM11_Libelle_FMC(vl_lib_fmc)
	vl_fmc1=SUBSTRING@(vl_fmc,1,46)
	vl_fmc2=TRIM@(SUBSTRING@(vl_fmc,46,20))	
}


/* si on n'est pas en pilotage auto, alors  maj fenetre...*/
if (vm_auto=0)
{
DB_CTRL_STRINGS@(vm_fenetre, "BL_PMV", vm_liste_PMV)
DB_CTRL_DISPLAY@(vm_fenetre,"BL_PMV",TRUE)
DB_CTRL_VALUE@(vm_fenetre, "BL_PMV", -1) 

} 
vm_liste_PMV = ITMA_TPMVA_Liste_Eqt_Dispo_PA(XDC_EQT_PMVA,vm_District)


if va_1 <> 0
{

	/*A lecture de la proposition du PA */
	vl_erreur = ITMA_TPMVA_Lire_Prop_PMVA_PA(1,va_4,va_1)

	vm_Lect_PMV[1].fmc_liee=vl_fmc
	if vm_Lect_PMV[1].NumEqt > 0 
	{	
		vm_Lect_PMV[1].Numero_Evt 	= vl_evt
		vm_Lect_PMV[1].Cle_Evt 		= vl_cle
		vm_Lect_PMV[1].Identifiant 	= 
				vm_Config_PMV[vm_Lect_PMV[1].NumEqt].Identifiant
	}
	
	vm_PMV[1] = vm_Lect_PMV[1]

	/* si on n'est pas en pilotaeg auto,  maj fenetre... */
	if (vm_auto=0)
	{
	/*A MAJ du PMV propose */
	ITMA_TPMVA_MAJ_PMVA_PA(1)

	DB_CTRL_TITLE@(vm_fenetre,"LI_1_fmc_liee_nouveau",vl_fmc1)
	DB_CTRL_TITLE@(vm_fenetre,"LI_1_date_fmc_nouveau",vl_fmc2)

	/*A Lecture de l'etat actuel */
	vl_erreur = ITMA_TPMVA_Lecture_PMVA_PA(1)

	/*A MAJ de l'etat actuel */
	if vl_erreur<>COM_NOK {ITMA_TPMVA_MAJ_PMVA_actuel_PA(1)}

	/*A affichage du panneau de commande */
	vm_PMV_Actif = 1
	ITMA_TPMVA_select_PMVA_PA
	DB_CTRL_GRAYED@(vm_fenetre,"BP_executer",FALSE)
	DB_CTRL_GRAYED@(vm_fenetre,"BP_refuser",FALSE)
	DB_CTRL_GRAYED@(vm_fenetre,"BP_1_explication",FALSE)
	DB_CTRL_GRAYED@(vm_fenetre,"BP_1_refuser",FALSE)
	DB_CTRL_GRAYED@(vm_fenetre,"BP_1_executer",FALSE)
	}
	else
	{
	DB_CTRL_TITLE@(vm_fenetre,"LI_LibPMV",vm_PMV[1].identifiant)
	DB_CTRL_TITLE@(vm_fenetre,"LI_LibFMC",vl_fmc1)
	}
}

vl_erreur = 0


if va_2 <> 0 
{
	
	vl_erreur = ITMA_TPMVA_Lire_Prop_PMVA_PA(2,va_4,va_2)

	if vm_Lect_PMV[2].NumEqt > 0 
	{	
		vm_Lect_PMV[2].Numero_Evt 	= vl_evt
		vm_Lect_PMV[2].Cle_Evt 		= vl_cle
		vm_Lect_PMV[2].Identifiant = 
				vm_Config_PMV[vm_Lect_PMV[2].NumEqt].Identifiant
	}
	
	vm_PMV[2] = vm_Lect_PMV[2]

	
	/* si on n'est pas en pilotaeg auto,  maj fenetre... */
	if (vm_auto=0)
	{
	ITMA_TPMVA_MAJ_PMVA_PA(2)

	DB_CTRL_TITLE@(vm_fenetre,"LI_2_fmc_liee_nouveau",vl_fmc1)
	DB_CTRL_TITLE@(vm_fenetre,"LI_2_date_fmc_nouveau",vl_fmc2)

	
	vl_erreur = ITMA_TPMVA_Lecture_PMVA_PA(2)

	
	if vl_erreur<>COM_NOK {ITMA_TPMVA_MAJ_PMVA_actuel_PA(2)}

	
	vm_PMV_Actif = 2
	ITMA_TPMVA_select_PMVA_PA
	DB_CTRL_GRAYED@(vm_fenetre,"BP_2_explication",FALSE)
	DB_CTRL_GRAYED@(vm_fenetre,"BP_2_refuser",FALSE)
	DB_CTRL_GRAYED@(vm_fenetre,"BP_2_executer",FALSE)
	}
}



vl_erreur=0
if va_3 <> 0
{

	vl_erreur = ITMA_TPMVA_Lire_Prop_PMVA_PA(3,va_4,va_3)

	if vm_Lect_PMV[3].NumEqt > 0 
	{	
		vm_Lect_PMV[3].Numero_Evt 	= vl_evt
		vm_Lect_PMV[3].Cle_Evt 		= vl_cle
		vm_Lect_PMV[3].Identifiant = 
				vm_Config_PMV[vm_Lect_PMV[3].NumEqt].Identifiant
	}
	
	vm_PMV[3] = vm_Lect_PMV[3]

	
	/* si on n'est pas en pilotaeg auto,  maj fenetre... */
	if (vm_auto=0)
	{
	ITMA_TPMVA_MAJ_PMVA_PA(3)


	DB_CTRL_TITLE@(vm_fenetre,"LI_3_fmc_liee_nouveau",vl_fmc1)
	DB_CTRL_TITLE@(vm_fenetre,"LI_3_date_fmc_nouveau",vl_fmc2)


	vl_erreur = ITMA_TPMVA_Lecture_PMVA_PA(3)

	
	if vl_erreur <>COM_NOK {ITMA_TPMVA_MAJ_PMVA_actuel_PA(3)}

	
	vm_PMV_Actif = 3
	ITMA_TPMVA_select_PMVA_PA
  	DB_CTRL_GRAYED@(vm_fenetre,"BP_3_explication",FALSE)
	DB_CTRL_GRAYED@(vm_fenetre,"BP_3_refuser",FALSE)
	DB_CTRL_GRAYED@(vm_fenetre,"BP_3_executer",FALSE)
	}
}

/* si on n'est pas en pilotaeg auto,  maj fenetre... */
if (vm_auto=0)
{

/*A MAJ des libelles fmc liees pour chaques PMV
* -------------------------------------------*/
for i = 1 to 3

	vl_fmc1=SUBSTRING@(vm_PMV[i].fmc_liee,1,46)
	vl_fmc2=TRIM@(SUBSTRING@(vm_PMV[i].fmc_liee,46,20))

	vl_objet = "LI_" ++ i ++ "_fmc_liee_actuelle"
	DB_CTRL_TITLE@(vm_fenetre,vl_objet,vl_fmc1)

	vl_objet = "LI_" ++ i ++ "_date_fmc_actuel"
	DB_CTRL_TITLE@(vm_fenetre,vl_objet,vl_fmc2)
next i
}

/*A flag de capture des evenements dans la fenetre
* ------------------------------------------------*/
DB_DISPLAY_ONLY@(vm_fenetre,FALSE)

vl_tptext = "Status : selection PMV 1"
DB_CTRL_TITLE@(vm_fenetre,"LI_status",vl_tptext)

vm_PMV_Actif = 1
/* Si on n'est pas en pilotage auto, alors maj fenetre */
if (vm_auto=0)
	ITMA_TPMVA_select_PMVA_PA


/*A Gestion des evenements lies √  la fiche 'Pilotage des PMV'
* --------------------------------------------------------*/
vm_la_fenetre_est_active = TRUE

/* si on est en pilotage auto, alors ... */
if (vm_auto=1)
{	
	/* si on n'affcihe pas du tdp alors on quitte */
	if (vm_arret<>CM_AFF_TDP) {
		ITMA_TPMVA_EXECUTER_PMVA_PA(1)
		vm_la_fenetre_est_active=FALSE
	}
}

WHILE (vm_la_fenetre_est_active)

	DB_DISPLAY@ (vm_fenetre)
	
    	vm_objet_selecte = DB_EXIT_CTRL@ (vm_fenetre)
    	IF SYSTEM_VAR@ (vg_verrou) vm_objet_selecte = NULL

	CASE OF vm_objet_selecte

	/*A SI action sur bouton QUITTER */
	CASE "BP_quitter"
	CASE "BP_Arreter"

		/*B Trace de l'arret */
		vl_tptext = "   User : " ++ vm_NomOperateur
		vl_tptext = "Stop ITMA_TPM_pilotage_PMV_PA " ++ vl_tptext
		COM01_Trace(0,vl_tptext)
		vm_Lect_PMV[1].Message1 = ""
		vm_Lect_PMV[1].Message2 = ""
		vm_Lect_PMV[1].Message3 = ""
		vm_Lect_PMV[1].Message4 = ""
		vm_Lect_PMV[1].Message5 = ""

		vm_Lect_PMV[1].Dest1_proche = 0
 		vm_Lect_PMV[1].Dest1_loin = 0
		vm_Lect_PMV[1].Dest2_proche = 0
 		vm_Lect_PMV[1].Dest2_loin = 0


		vm_Lect_PMV[1].Numero_Evt 	= vl_evt
		vm_Lect_PMV[1].Cle_Evt 		= vl_cle
		vm_arret=CM_AFF_NEUTRE
		ITMA_TPMVA_EXECUTER_PMVA_PA(1)
		vm_la_fenetre_est_active =FALSE
		RETURN(vm_RetourPA)

	/*A SI action sur bouton choix PMV  */
	CASE "BP_1_choisir_PMV"
	CASE "BP_2_choisir_PMV"
	CASE "BP_3_choisir_PMV"

		/*A lecture en base des Eqt dispo */
		vm_liste_PMV = ITMA_TPMVA_Liste_Eqt_Dispo_PA(XDC_EQT_PMVA,vm_District)

		/*A MAJ de la ligne de status */
		vl_tptext = "Status : PMVA "++vm_PMV_Actif++" selectionne"
 		DB_CTRL_TITLE@(vm_fenetre,"LI_status",vl_tptext)
	
		DB_CTRL_STRINGS@(vm_fenetre,"BL_PMV",vm_liste_PMV)
		DB_CTRL_GRAYED@(vm_fenetre,"BP_"++vm_PMV_Actif++"_explication",TRUE)
		DB_CTRL_GRAYED@(vm_fenetre,"BP_"++vm_PMV_Actif++"_refuser",TRUE)
		DB_CTRL_GRAYED@(vm_fenetre,"BP_refuser",TRUE)
		DB_CTRL_DISPLAY@(vm_fenetre,"BL_PMV",TRUE)
		DB_CTRL_DISPLAY@(vm_fenetre,"Liste_PMV",TRUE)

 	/*B appui sur le bouton lier fmc*/
	CASE "BP_lier_fmc"
	CASE "BP_lier_fmc_1"
	CASE "BP_lier_fmc_2"
	CASE "BP_lier_fmc_3"

		vl_tptext = "Status : appel lien FMC"
 		DB_CTRL_TITLE@(vm_fenetre,"LI_status",vl_tptext)

		DB_CTRL_GRAYED@(vm_fenetre,"BP_lier_fmc",TRUE)
		vl_numeroLien=vm_objet_selecte

		/*B on lance la tache de recherche d'evt cause*/
		tl_data=PEND_FOR_NEW_TASK@("ITMA_COM_Liste_Causes",
							"ITMA_TPM_pilotage_PMV_PA")

		tm_liste_causes=tl_data[0]
		/*B affiche la liste des evts a traiter*/
		DB_CTRL_DISPLAY@(vm_fenetre,"TA_Evenements",TRUE)
		DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre,"TA_Evenements",TRUE)
		DB_TABLE_ALLOW_COLUMN_RESIZING@(vm_fenetre,"TA_Evenements",True)
		DB_TABLE_SET_MARKER_WIDTH@(vm_fenetre, "TA_Evenements", 25)
		tl_titres[0] = COM_CAUSE_NUMERO,COM_CAUSE_LONG_NUMERO
		tl_titres[1] = COM_CAUSE_CLE,COM_CAUSE_LONG_CLE
		tl_titres[2] = COM_CAUSE_TYPE,COM_CAUSE_LONG_TYPE
		tl_titres[3] = COM_CAUSE_DATE,COM_CAUSE_LONG_DATE
		tl_titres[4] = COM_CAUSE_LOCALISATION,COM_CAUSE_LONG_LOCALISATION
		DB_TABLE_SET_DATA@(vm_fenetre,"TA_Evenements",tl_data[1],tl_titres)
		DB_TABLE_MARKER_PIXMAPS@(vm_fenetre, "TA_Evenements", 0, tl_data[2])

	/*B selection d'une proposition*/	
  	CASE "TA_proposition"

		if vm_PMV_Actif<1 or vm_PMV_Actif>3
		{
			vl_tptext = "Status : Selectionner d'abord un PMVA !!!"
 			DB_CTRL_TITLE@(vm_fenetre,"LI_status",vl_tptext)
		}
		else
		{
			DB_CTRL_GRAYED@(vm_fenetre,"BP_message",False)
			DB_CTRL_GRAYED@(vm_fenetre,"BP_alternat",False)
			vl_tptext = "Status : Selection d'une proposition"
 			DB_CTRL_TITLE@(vm_fenetre,"LI_status",vl_tptext)
			vl_ligne = ""
			vl_ligne[0] = vm_table_proposition[vl_rang,0]
			vl_ligne[1] = vm_table_proposition[vl_rang,1]
			vl_ligne[2] = vm_table_proposition[vl_rang,2]
			vl_ligne[3] = vm_table_proposition[vl_rang,3]
			vl_ligne[4] = vm_table_proposition[vl_rang,4]
		}

	/*B selection d'un message*/	
  	CASE "BP_message"

	
		vl_lecture = DB_TABLE_GET_SELECTIONS@(vm_fenetre,"TA_proposition")
		vl_rang = vl_lecture[0]
		vl_lecture= DB_TABLE_GET_DATA@(vm_fenetre,"TA_proposition")
		ITMA_TPMVA_Tabuler_ligne_PA(vl_lecture[vl_rang,0],vl_tptext,15)
		vm_Lect_PMV[vm_PMV_Actif].Message1	= vl_tptext
		ITMA_TPMVA_Tabuler_ligne_PA(vl_lecture[vl_rang,1],vl_tptext,15)
		vm_Lect_PMV[vm_PMV_Actif].Message2	= vl_tptext
		ITMA_TPMVA_Tabuler_ligne_PA(vl_lecture[vl_rang,2],vl_tptext,15)
		vm_Lect_PMV[vm_PMV_Actif].Message3	= vl_tptext
		ITMA_TPMVA_Tabuler_ligne_PA(vl_lecture[vl_rang,3],vl_tptext,15)
		vm_Lect_PMV[vm_PMV_Actif].Message4	= vl_tptext
		ITMA_TPMVA_Tabuler_ligne_PA(vl_lecture[vl_rang,4],vl_tptext,15)
		vm_Lect_PMV[vm_PMV_Actif].Message5	= vl_tptext

		if DB_CTRL_GET_VALUE@(vm_fenetre,"BA_cligno1")=True
		{ 
			vm_Lect_PMV[vm_PMV_Actif].Clignotement1 = XDC_PMV_CLIGNORAPIDE 
		}
		else 
		{ 
			vm_Lect_PMV[vm_PMV_Actif].Clignotement1 = XDC_PMV_PASCLIGNO 
		}

		if DB_CTRL_GET_VALUE@(vm_fenetre,"BA_cligno2")=True
		{ 
			vm_Lect_PMV[vm_PMV_Actif].Clignotement2 = XDC_PMV_CLIGNORAPIDE 
		}
		else 
		{ 
			vm_Lect_PMV[vm_PMV_Actif].Clignotement2 = XDC_PMV_PASCLIGNO 
		}

		if DB_CTRL_GET_VALUE@(vm_fenetre,"BA_cligno3")=True
		{ 
			vm_Lect_PMV[vm_PMV_Actif].Clignotement3 = XDC_PMV_CLIGNORAPIDE 
		}
		else 
		{ 
			vm_Lect_PMV[vm_PMV_Actif].Clignotement3 = XDC_PMV_PASCLIGNO 
		}
		if DB_CTRL_GET_VALUE@(vm_fenetre,"BA_cligno4")=True
		{ 
			vm_Lect_PMV[vm_PMV_Actif].Clignotement4 = XDC_PMV_CLIGNORAPIDE 
		}
		else 
		{ 
			vm_Lect_PMV[vm_PMV_Actif].Clignotement4 = XDC_PMV_PASCLIGNO 
		}
		if DB_CTRL_GET_VALUE@(vm_fenetre,"BA_cligno5")=True
		{ 
			vm_Lect_PMV[vm_PMV_Actif].Clignotement5 = XDC_PMV_CLIGNORAPIDE 
		}
		else 
		{ 
			vm_Lect_PMV[vm_PMV_Actif].Clignotement5 = XDC_PMV_PASCLIGNO 
		}


		vm_Lect_PMV[vm_PMV_Actif].TypeAffichage = CM_AFF_TEXTE 
		ITMA_TPMVA_MAJ_PMVA_PA(vm_PMV_Actif)

		DB_CTRL_GRAYED@(vm_fenetre,"BP_"++vm_PMV_Actif++"_executer",False)
		DB_CTRL_GRAYED@(vm_fenetre,"BP_executer",False)
		DB_CTRL_GRAYED@(vm_fenetre,"BP_message",True)
		DB_CTRL_GRAYED@(vm_fenetre,"BP_alternat",True)

		vl_tptext = "Status : MAJ du message du PMVA n¬∞"++vm_PMV_Actif
 		DB_CTRL_TITLE@(vm_fenetre,"LI_status",vl_tptext)

		DB_TABLE_SET_SELECTIONS@(vm_fenetre,"TA_proposition",NULL)


	/*B selection d'un alternat*/	
  	CASE "BP_alternat"

		vl_lecture = DB_TABLE_GET_SELECTIONS@(vm_fenetre,"TA_proposition")
		vl_rang = vl_lecture[0]
		vl_lecture= DB_TABLE_GET_DATA@(vm_fenetre,"TA_proposition")
		ITMA_TPMVA_Tabuler_ligne_PA(vl_lecture[vl_rang,0],vl_tptext,15)
		vm_Lect_PMV[vm_PMV_Actif].Alternat1	= vl_tptext
		ITMA_TPMVA_Tabuler_ligne_PA(vl_lecture[vl_rang,1],vl_tptext,15)
		vm_Lect_PMV[vm_PMV_Actif].Alternat2	= vl_tptext
		ITMA_TPMVA_Tabuler_ligne_PA(vl_lecture[vl_rang,2],vl_tptext,15)
		vm_Lect_PMV[vm_PMV_Actif].Alternat3	= vl_tptext
		ITMA_TPMVA_Tabuler_ligne_PA(vl_lecture[vl_rang,3],vl_tptext,15)
		vm_Lect_PMV[vm_PMV_Actif].Alternat4	= vl_tptext
		ITMA_TPMVA_Tabuler_ligne_PA(vl_lecture[vl_rang,4],vl_tptext,15)
		vm_Lect_PMV[vm_PMV_Actif].Alternat5	= vl_tptext

		if vm_Lect_PMV[vm_PMV_Actif].TypeAffichage <> CM_AFF_TDP
		{	vm_Lect_PMV[vm_PMV_Actif].TypeAffichage = CM_AFF_TEXTE }
/*		vm_Lect_PMV[vm_PMV_Actif].AltDestination = 0 */

		ITMA_TPMVA_MAJ_PMVA_PA(vm_PMV_Actif)

		DB_CTRL_GRAYED@(vm_fenetre,"BP_"++vm_PMV_Actif++"_executer",False)
		DB_CTRL_GRAYED@(vm_fenetre,"BP_executer",False)
		DB_CTRL_GRAYED@(vm_fenetre,"BP_alternat",True)
		DB_CTRL_GRAYED@(vm_fenetre,"BP_message",True)

		vl_tptext = "Status : MAJ de l'alternat du PMVA n¬∞"++vm_PMV_Actif
 		DB_CTRL_TITLE@(vm_fenetre,"LI_status",vl_tptext)
 
		DB_TABLE_SET_SELECTIONS@(vm_fenetre,"TA_proposition",NULL)


	/*B selection d'un element dans la liste des fiches a traiter*/	
  	CASE "TA_Evenements"
		vl_tptext = "Status : selection evenement"
 		DB_CTRL_TITLE@(vm_fenetre,"LI_status",vl_tptext)

		vl_tptext = " --> Lien FMC Manuel"
		COM01_Trace(0,vl_tptext)
	
		tl_retour=ITMA_COM_Validite_Cause("ITMA_TPM_pilotage_PMV_PA",
								vm_fenetre,tm_liste_causes)
		vm_Lect_PMV[vm_PMV_Actif].Numero_Evt = tl_retour[0][0]
		vm_Lect_PMV[vm_PMV_Actif].Cle_Evt = tl_retour[0][1]
		vl_fmc = tl_retour[1]
		vl_fmc1=SUBSTRING@(vl_fmc,1,46)
		vl_fmc2=TRIM@(SUBSTRING@(vl_fmc,46,20))
		DB_CTRL_DISPLAY@(vm_fenetre,"TA_Evenements",FALSE)

		CASE OF (vl_numeroLien)

			/*A SI action sur boton lier FMC du PMV 1 a 3 */
			CASE "BP_lier_fmc_1"
			CASE "BP_lier_fmc_2"
			CASE "BP_lier_fmc_3"
				DB_CTRL_TITLE@(vm_fenetre,
						"LI_"++vm_PMV_Actif++"_fmc_liee_nouveau",vl_fmc1)
				DB_CTRL_TITLE@(vm_fenetre,
						"LI_"++vm_PMV_Actif++"_date_fmc_nouveau",vl_fmc2)

			/*A SI action sur bouton lier FMC des 3 PMV  */
			CASE "BP_lier_fmc"
				DB_CTRL_TITLE@(vm_fenetre,"LI_1_fmc_liee_nouveau",vl_fmc1)
				DB_CTRL_TITLE@(vm_fenetre,"LI_1_date_fmc_nouveau",vl_fmc2)
				DB_CTRL_TITLE@(vm_fenetre,"LI_2_fmc_liee_nouveau",vl_fmc1)
				DB_CTRL_TITLE@(vm_fenetre,"LI_2_date_fmc_nouveau",vl_fmc2)
				DB_CTRL_TITLE@(vm_fenetre,"LI_3_fmc_liee_nouveau",vl_fmc1)
				DB_CTRL_TITLE@(vm_fenetre,"LI_3_date_fmc_nouveau",vl_fmc2)
		ENDCASE


	/*A SI action sur bouton executer pour les 3 PMV */
	CASE "BP_executer"
		vl_1 = vm_Lect_PMV[1].NumEqt
		vl_2 = vm_Lect_PMV[2].NumEqt
		vl_3 = vm_Lect_PMV[3].NumEqt

		if ( vl_1<>0 or  vl_2<>0 or  vl_3<>0 ) and ( vm_validation_nouv_message = XDC_FAUX )
		{
			if vl_1 <> 0
			{
				vl_coderet = ITMA_TPMVA_EXECUTER_PMVA_PA(1)
				if vl_coderet = COM_VALIDE
				{
			        	vm_RetourPA[0] = vl_coderet
				}
                }
			
			if vl_2 <> 0
			{
				vl_coderet = ITMA_TPMVA_EXECUTER_PMVA_PA(2)
				if vl_coderet = COM_VALIDE
				{
			        	vm_RetourPA[1] = vl_coderet
				}
                }
			
			if vl_3 <> 0
			{
				vl_coderet = ITMA_TPMVA_EXECUTER_PMVA_PA(3)
				if vl_coderet = COM_VALIDE
				{
			        	vm_RetourPA[2] = vl_coderet
				}
                }
  		}
		else
		{
		 	if vm_validation_nouv_message = XDC_VRAI
			{
				info_message@("Execution impossible : Valider ou Annuler la modification du message...")	
			}
			else 
			{
				info_message@("Execution impossible : Zone Identifications non renseignee...")
			}
 		}


	/*A SI action sur bouton executer pour le 1er PMV */
	CASE "BP_1_executer"
		vl_1 = vm_Lect_PMV[1].NumEqt

		if vl_1<>0  and vm_validation_nouv_message = XDC_FAUX
		{
			vl_coderet = ITMA_TPMVA_EXECUTER_PMVA_PA(1)
			if vl_coderet = COM_VALIDE
			{
				vm_RetourPA[0] = vl_coderet
			}
		}
		else
		{
		 	if vm_validation_nouv_message = XDC_VRAI
			{
				info_message@("Execution impossible : Valider ou Annuler la modification du message...")	
			}
			else 
			{
				info_message@("Execution impossible : Zone Identification 1 non renseignee...")
			}
 		}


	/*A SI action sur bouton executer pour le 2eme PMV */
	CASE "BP_2_executer"
		vl_2 = vm_Lect_PMV[2].NumEqt

		if vl_2<>0 and vm_validation_nouv_message = XDC_FAUX 
		{
			vl_coderet = ITMA_TPMVA_EXECUTER_PMVA_PA(2)
			if vl_coderet = COM_VALIDE
			{
				vm_RetourPA[1] = vl_coderet
			}
		}
		else
		{
		 	if vm_validation_nouv_message = XDC_VRAI
			{
				info_message@("Execution impossible : Valider ou Annuler la modification du message...")	
			}
			else 
			{
				info_message@("Execution impossible : Zone Identification 2 non renseignee...")
			}
 		}


	/*A SI action sur bouton executer pour le 3eme PMV */
	CASE "BP_3_executer"
		vl_3 = vm_Lect_PMV[3].NumEqt

		if vl_3<>0 and vm_validation_nouv_message = XDC_FAUX 
		{

			vl_coderet = ITMA_TPMVA_EXECUTER_PMVA_PA(3)
			if vl_coderet = COM_VALIDE
			{
				vm_RetourPA[2] = vl_coderet
			}
		}
		else
		{
		 	if vm_validation_nouv_message = XDC_VRAI
			{
				info_message@("Execution impossible : Valider ou Annuler la modification du message...")	
			}
			else 
			{
				info_message@("Execution impossible : Zone Identification 3 non renseignee...")
			}
 		}


	/*A SI action sur bouton refuser le plan d'action pour les 3 PMV */
	CASE "BP_refuser"

		vl_tptext = "Status : Refus plan d'action"
 		DB_CTRL_TITLE@(vm_fenetre,"LI_status",vl_tptext)

		DB_CTRL_GRAYED@(vm_fenetre,"BP_1_refuser",TRUE)
		DB_CTRL_GRAYED@(vm_fenetre,"BP_2_refuser",TRUE)
		DB_CTRL_GRAYED@(vm_fenetre,"BP_3_refuser",TRUE)
		DB_CTRL_GRAYED@(vm_fenetre,"BP_1_explication",TRUE)
		DB_CTRL_GRAYED@(vm_fenetre,"BP_2_explication",TRUE)
		DB_CTRL_GRAYED@(vm_fenetre,"BP_3_explication",TRUE)
		vm_RetourPA = COM_REFUSE, COM_REFUSE, COM_REFUSE

	/*A SI action sur bouton refuser le plan d'action pour le PMV */
	CASE "BP_1_refuser"
	CASE "BP_2_refuser"
	CASE "BP_3_refuser"

		vl_tptext = "Status : Refus plan d'action"
 		DB_CTRL_TITLE@(vm_fenetre,"LI_status",vl_tptext)

		DB_CTRL_GRAYED@(vm_fenetre,"BP_executer",TRUE)
		DB_CTRL_GRAYED@(vm_fenetre,"BP_"++vm_PMV_Actif++"_executer",TRUE)
		DB_CTRL_GRAYED@(vm_fenetre,"BP_refuser",TRUE)
		DB_CTRL_GRAYED@(vm_fenetre,"BP_"++vm_PMV_Actif++"_explication",TRUE)
		DB_CTRL_GRAYED@(vm_fenetre,"BP_"++vm_PMV_Actif++"_refuser",TRUE)
		vm_RetourPA[vm_PMV_Actif-1] = COM_REFUSE


	/*A SI action sur bouton SELECTION DU 1er PMV */
	CASE "BP_1_PMV"

		vl_tptext = "Status : selection PMV 1"
 		DB_CTRL_TITLE@(vm_fenetre,"LI_status",vl_tptext)
		vm_PMV_Actif = 1
		ITMA_TPMVA_select_PMVA_PA

	/*A SI action sur bouton SELECTION DU 2eme PMV */
	CASE "BP_2_PMV"

		vl_tptext = "Status : selection PMV 2"
 		DB_CTRL_TITLE@(vm_fenetre,"LI_status",vl_tptext)
		vm_PMV_Actif = 2
		ITMA_TPMVA_select_PMVA_PA

	/*A SI action sur bouton SELECTION DU 3eme PMV */
	CASE "BP_3_PMV"

		vl_tptext = "Status : selection PMV 3"
 		DB_CTRL_TITLE@(vm_fenetre,"LI_status",vl_tptext)
		vm_PMV_Actif = 3
		ITMA_TPMVA_select_PMVA_PA

	/*A SI action sur liste  des PMV */
	CASE "BL_PMV"

		vl_tptext = "Status : "
 		DB_CTRL_TITLE@(vm_fenetre,"LI_status",vl_tptext)
		vl_erreur = ITMA_TPMVA_BL_PMVA_click_PA()

		if vl_erreur<>COM_NOK
		{
			/*A si nouveau n¬∞ Eqt pour vm_PMV_Actif : lecture base */
			vl_erreur = ITMA_TPMVA_Lecture_PMVA_PA(vm_PMV_Actif)
		
		}

		if vl_erreur<>COM_NOK
		{
 			DB_CTRL_TITLE@(vm_fenetre,
				"LI_"++vm_PMV_Actif++"_fmc_liee_nouveau","")
			DB_CTRL_TITLE@(vm_fenetre,
				"LI_"++vm_PMV_Actif++"_date_fmc_nouveau","")
			
			/*A MAJ du PMV actuel */
			ITMA_TPMVA_MAJ_PMVA_actuel_PA(vm_PMV_Actif)
		}
		/* Si choix aff TDP */
		if 	vm_Lect_PMV[vm_PMV_Actif].TypeAffichage = CM_AFF_TDP
		{
			ITMA_TPMVA_Liste_Destination_PMVA ( vm_Lect_PMV[vm_PMV_Actif].NumEqt,
                                                        vl_NumDest, vm_Destination )
                                if ( vl_NumDest[0] + 0 <> 0 )
				{
					ITMA_TPMVA_Lignes_Destinations (vm_Destination, ll_lignes_dest_tdp)
					vm_Lect_PMV[vm_PMV_Actif].Message1 = UPPERCASE@(ll_lignes_dest_tdp[0])
					vm_Lect_PMV[vm_PMV_Actif].Message2 = UPPERCASE@(ll_lignes_dest_tdp[1])
					vm_Lect_PMV[vm_PMV_Actif].Message3 = UPPERCASE@(ll_lignes_dest_tdp[2])
					vm_Lect_PMV[vm_PMV_Actif].Message4 = UPPERCASE@(ll_lignes_dest_tdp[3])
					vm_Lect_PMV[vm_PMV_Actif].Message5 = UPPERCASE@(ll_lignes_dest_tdp[4])
                                       vm_Lect_PMV[vm_PMV_Actif].Dest1_proche        = vl_NumDest[0] + 0
                                        vm_Lect_PMV[vm_PMV_Actif].Dest1_loin  = vl_NumDest[1] + 0
                                        vm_Lect_PMV[vm_PMV_Actif].Dest2_proche        = vl_NumDest[2] + 0
                                        vm_Lect_PMV[vm_PMV_Actif].Dest2_loin  = vl_NumDest[3] + 0
                                        vm_Lect_PMV[vm_PMV_Actif].Alternat1   = ""
                                        vm_Lect_PMV[vm_PMV_Actif].Alternat2   = ""
                                        vm_Lect_PMV[vm_PMV_Actif].Alternat3   = ""
                                        vm_Lect_PMV[vm_PMV_Actif].Alternat4   = ""
                                        vm_Lect_PMV[vm_PMV_Actif].Alternat5   = ""
                                       ITMA_TPMVA_Demande_Calcul_TDP_PMVA ( vm_Lect_PMV[vm_PMV_Actif].NumEqt,
                                                vm_Lect_PMV[vm_PMV_Actif].Dest1_proche, 
						vm_Lect_PMV[vm_PMV_Actif].Dest1_loin, 
						vm_Lect_PMV[vm_PMV_Actif].Dest2_proche, 
						vm_Lect_PMV[vm_PMV_Actif].Dest2_loin,vm_Lect_PMV[vm_PMV_Actif].SiteGestion )
					ITMA_TPMVA_MAJ_PMVA_PA(vm_PMV_Actif)
                                }
                                else
                                {
                                	info_message@("Pas d'affichage Temps de parcours possible pour ce PMVA")
					ITMA_TPMVA_Reset_PMVA_PA(vm_PMV_Actif,CM_AFF_NEUTRE)
                                }

		
		}
			
	/*A SI action sur liste  des types de messages */
	CASE "BL_elements"

		vl_tptext = "Status : "
 		DB_CTRL_TITLE@(vm_fenetre,"LI_status",vl_tptext)
	
		vl_erreur = ITMA_TPMVA_BL_elements_click_PA()	

	/*A SI action bouton mise au neutre PMV */
	CASE "BO_1_Arret"
	CASE "BO_2_Arret"
	CASE "BO_3_Arret"

		vl_tptext = "Status : "
 		DB_CTRL_TITLE@(vm_fenetre,"LI_status",vl_tptext)
		
		vm_Lect_PMV[vm_PMV_Actif].TypeAffichage = 
				DB_CTRL_GET_VALUE@(vm_fenetre, "BO_"++vm_PMV_Actif++"_Arret")	
 		if 	vm_Lect_PMV[vm_PMV_Actif].TypeAffichage >= CM_AFF_TEXTE and 		
			vm_Lect_PMV[vm_PMV_Actif].TypeAffichage < CM_AFF_TDP
		{	
			ITMA_TPMVA_Reset_PMVA_PA(vm_PMV_Actif,
						vm_Lect_PMV[vm_PMV_Actif].TypeAffichage)
  		 	DB_CTRL_GRAYED@(vm_fenetre,"BP_"++vm_PMV_Actif++"_executer",FALSE)
  		 	DB_CTRL_GRAYED@(vm_fenetre,"BP_executer",FALSE)
		}

		/* Si choix aff TDP */
		if 	vm_Lect_PMV[vm_PMV_Actif].TypeAffichage = CM_AFF_TDP
		{
			ITMA_TPMVA_Liste_Destination_PMVA ( vm_Lect_PMV[vm_PMV_Actif].NumEqt,
                                                        vl_NumDest, vm_Destination )
                                if ( vl_NumDest[0] + 0 <> 0 )
				{
					ITMA_TPMVA_Lignes_Destinations (vm_Destination, ll_lignes_dest_tdp)
					vm_Lect_PMV[vm_PMV_Actif].Message1 = UPPERCASE@(ll_lignes_dest_tdp[0])
					vm_Lect_PMV[vm_PMV_Actif].Message2 = UPPERCASE@(ll_lignes_dest_tdp[1])
					vm_Lect_PMV[vm_PMV_Actif].Message3 = UPPERCASE@(ll_lignes_dest_tdp[2])
					vm_Lect_PMV[vm_PMV_Actif].Message4 = UPPERCASE@(ll_lignes_dest_tdp[3])
					vm_Lect_PMV[vm_PMV_Actif].Message5 = UPPERCASE@(ll_lignes_dest_tdp[4])

                                       vm_Lect_PMV[vm_PMV_Actif].Dest1_proche        = vl_NumDest[0] + 0
                                        vm_Lect_PMV[vm_PMV_Actif].Dest1_loin  = vl_NumDest[1] + 0
                                        vm_Lect_PMV[vm_PMV_Actif].Dest2_proche        = vl_NumDest[2] + 0
                                        vm_Lect_PMV[vm_PMV_Actif].Dest2_loin  = vl_NumDest[3] + 0
                                        vm_Lect_PMV[vm_PMV_Actif].Alternat1   = ""
                                        vm_Lect_PMV[vm_PMV_Actif].Alternat2   = ""
                                        vm_Lect_PMV[vm_PMV_Actif].Alternat3   = ""
                                        vm_Lect_PMV[vm_PMV_Actif].Alternat4   = ""
                                        vm_Lect_PMV[vm_PMV_Actif].Alternat5   = ""
                                       ITMA_TPMVA_Demande_Calcul_TDP_PMVA ( vm_Lect_PMV[vm_PMV_Actif].NumEqt,
     vm_Lect_PMV[vm_PMV_Actif].Dest1_proche, 
	vm_Lect_PMV[vm_PMV_Actif].Dest1_loin, 
	vm_Lect_PMV[vm_PMV_Actif].Dest2_proche, 
						vm_Lect_PMV[vm_PMV_Actif].Dest2_loin,vm_Lect_PMV[vm_PMV_Actif].SiteGestion )
		

					ITMA_TPMVA_MAJ_PMVA_PA(vm_PMV_Actif)
                                }
			else
			{
				info_message@("Pas de temps de parcours pour ce PMV ")
				ITMA_TPMVA_Reset_PMVA_PA(vm_PMV_Actif,CM_AFF_NEUTRE)
			}
		}

 	/*B appui sur le bouton destination */
	CASE "BP_1_destination"
	CASE "BP_2_destination"
	CASE "BP_3_destination"
		vl_Destination = Pend_For_New_Task@("ITMA_TPM_Choix_Destination",
				vm_PMV[vm_PMV_Actif].NumEqt,10,560)
		vm_Destination[0] = vl_Destination[1]
		vm_Lect_PMV[vm_PMV_Actif].Message2      = ""
		'vm_Lect_PMV[vm_PMV_Actif].Destination	= vl_Destination[0] + 0

		vm_Lect_PMV[vm_PMV_Actif].Dest1_proche	= vl_Destination[0] + 
		ITMA_TPM_Demande_Calcul_TDP_PMVA ( vm_Lect_PMV[vm_PMV_Actif].NumEqt, 
				vm_Lect_PMV[vm_PMV_Actif].Dest1_proche, 
				vm_Lect_PMV[vm_PMV_Actif].Dest1_loin,
				 vm_Lect_PMV[vm_PMV_Actif].Dest2_proche, 
				vm_Lect_PMV[vm_PMV_Actif].Dest2_loin)

		/*ITMA_TPM_Tabuler_ligne_PA("A    MN",vl_tptext,15)
		vm_Lect_PMV[vm_PMV_Actif].Message3	= vl_tptext*/
		vm_Lect_PMV[vm_PMV_Actif].Message3      = ""
		ITMA_TPMVA_MAJ_PMVA_PA(vm_PMV_Actif)

		
 	/*B appui sur le bouton destination alternat */
	CASE "BP_1_destination_alt"
	CASE "BP_2_destination_alt"
	CASE "BP_3_destination_alt"
		vl_Destination = Pend_For_New_Task@("ITMA_TPM_Choix_Destination",
				vm_PMV[vm_PMV_Actif].NumEqt,10,560)
		ITMA_TPM_Tabuler_ligne_PA(vl_Destination[1],vl_tptext,15)
		vm_Lect_PMV[vm_PMV_Actif].Alternat2		= UPPERCASE@(vl_tptext)
		vm_Lect_PMV[vm_PMV_Actif].Dest1_loin	= vl_Destination[0] + 0

	ITMA_TPM_Demande_Calcul_TDP_PMVA ( vm_Lect_PMV[vm_PMV_Actif].NumEqt, 
				vm_Lect_PMV[vm_PMV_Actif].Dest1_proche, 
				vm_Lect_PMV[vm_PMV_Actif].Dest1_loin)

		ITMA_TPMVA_Tabuler_ligne_PA("A    MN",vl_tptext,15)
		vm_Lect_PMV[vm_PMV_Actif].Alternat3 = vl_tptext
		ITMA_TPMVA_MAJ_PMVA_PA(vm_PMV_Actif)
		
	/*A SI action sur bascule de clignotement Picto ou PMV */
	CASE "BA_1_clignotement1_nouveau"
	CASE "BA_1_clignotement2_nouveau"
	CASE "BA_1_clignotement3_nouveau"
	CASE "BA_2_clignotement1_nouveau"
 	CASE "BA_2_clignotement2_nouveau"
	CASE "BA_2_clignotement3_nouveau"
 	CASE "BA_3_clignotement1_nouveau"
 	CASE "BA_3_clignotement2_nouveau"
	CASE "BA_3_clignotement3_nouveau"
		
		ITMA_TPMVA_LectCligno_PMVA_PA
		if vm_Lect_PMV[vm_PMV_Actif].TypeAffichage <> CM_AFF_TDP
		{	vm_Lect_PMV[vm_PMV_Actif].TypeAffichage = CM_AFF_TEXTE }


  	/*A SI clic sur nouveau message  du  PMV actif */
	CASE "BL_1_message_nouveau"
 	CASE "BL_2_message_nouveau"
 	CASE "BL_3_message_nouveau"

		if vm_Lect_PMV[vm_PMV_Actif].TypeAffichage <> CM_AFF_TDP
		{ 
			vm_Text_Actif = "_message"
			ITMA_TPMVA_Appel_Modif_message_PA	
		} 


   	/*A SI clic sur nouvel alternat du PMV actif */
	CASE "BL_1_alternat_nouveau"
 	CASE "BL_2_alternat_nouveau"
 	CASE "BL_3_alternat_nouveau"

		if vm_Lect_PMV[vm_PMV_Actif].TypeAffichage <> CM_AFF_TDP
		{ 
			vm_Text_Actif = "_alternat"
			ITMA_TPMVA_Appel_Modif_message_PA
		} 	

  	/*A SI clic sur valider message du PMV */
 	CASE "BP_1_valider_nouveau"
 	CASE "BP_2_valider_nouveau"
 	CASE "BP_3_valider_nouveau"
		ITMA_TPMVA_Modif_message_PA


  	/*A SI clic sur annuler modif message  du 1er PMV */
	CASE "BP_1_annuler_nouveau"
  	CASE "BP_2_annuler_nouveau"
 	CASE "BP_3_annuler_nouveau"

		vl_tptext = "Status : Annulation Modif."
 		DB_CTRL_TITLE@(vm_fenetre,"LI_status",vl_tptext)

		ITMA_TPMVA_MAJ_PMVA_PA(vm_PMV_Actif)
		vm_validation_nouv_message = XDC_FAUX
	
	
  	/*A SI clic sur bouton explication du PMV */
 	CASE "BP_1_explication"
	CASE "BP_2_explication"
	CASE "BP_3_explication"

		vl_tptext = "Status : demande d'explication"
 		DB_CTRL_TITLE@(vm_fenetre,"LI_status",vl_tptext)

		/* appel de MTEX avec passage en argument de l'explication */
		vl_erreur = PEND_FOR_NEW_TASK@("ITMA_TEX_Explication_Propo",
					 "ITMA_TPM_pilotage_PMV_PA",
					 vm_Lect_PMV[vm_PMV_Actif].Explication)


    	CASE "poke_"

     	CASE OF  DB_GET_POKE@ (vm_fenetre)

  		/*A SI reception message de FIN */
    		CASE COM_CANAL_FIN
    			vm_la_fenetre_est_active = FALSE

   		/*A SI reception etat PMV */
      	CASE COM_CANAL_MTPMVA_ETAT

			/*A capture du message */
			vl_message = DB_GET_POKE_DATA@(vm_fenetre)
			/*A decomposition du message re√ßu en tableau */
			vl_mess = ARRAY_FROM_STRING@(vl_message[0],",")

			/* indicateur etat recu = 1*/
			vl_num_eqt = vl_mess[0]+0
			vm_etat_PMV[vl_num_eqt].NumeroAction		=1	

			ITMA_TPMVA_Tabuler_ligne_PA(vl_mess[1],vl_tptext,15)
			vm_etat_PMV[vl_num_eqt].Message1= vl_tptext 
			ITMA_TPMVA_Tabuler_ligne_PA(vl_mess[5],vl_tptext,15)
			vm_etat_PMV[vl_num_eqt].Message2= vl_tptext 
			ITMA_TPMVA_Tabuler_ligne_PA(vl_mess[9],vl_tptext,15)
			vm_etat_PMV[vl_num_eqt].Message3= vl_tptext 
			ITMA_TPMVA_Tabuler_ligne_PA(vl_mess[13],vl_tptext,15)
			vm_etat_PMV[vl_num_eqt].Message4= vl_tptext
			ITMA_TPMVA_Tabuler_ligne_PA(vl_mess[17],vl_tptext,15)
			vm_etat_PMV[vl_num_eqt].Message5= vl_tptext

			ITMA_TPMVA_Tabuler_ligne_PA(vl_mess[4],vl_tptext,15)
			vm_etat_PMV[vl_num_eqt].Alternat1= vl_tptext 
			ITMA_TPMVA_Tabuler_ligne_PA(vl_mess[8],vl_tptext,15)
			vm_etat_PMV[vl_num_eqt].Alternat2= vl_tptext 
			ITMA_TPMVA_Tabuler_ligne_PA(vl_mess[12],vl_tptext,15)
			vm_etat_PMV[vl_num_eqt].Alternat3= vl_tptext 
			ITMA_TPMVA_Tabuler_ligne_PA(vl_mess[16],vl_tptext,15)
			vm_etat_PMV[vl_num_eqt].Alternat4= vl_tptext
			ITMA_TPMVA_Tabuler_ligne_PA(vl_mess[20],vl_tptext,15)
			vm_etat_PMV[vl_num_eqt].Alternat5= vl_tptext

			vm_etat_PMV[vl_num_eqt].clignotement1 = vl_mess[3] 
			vm_etat_PMV[vl_num_eqt].clignotement2 = vl_mess[7] 
			vm_etat_PMV[vl_num_eqt].clignotement3 = vl_mess[11] 
			vm_etat_PMV[vl_num_eqt].clignotement4 = vl_mess[15]
			vm_etat_PMV[vl_num_eqt].clignotement5 = vl_mess[19]
			vm_etat_PMV[vl_num_eqt].Flash = vl_mess[21]
 
			/*A si PMV en cours de consultation : MAJ IHM */
			for j = 1 to 3
				if vm_PMV[j].NumEqt = vl_num_eqt 
				{ 	
				 	vm_PMV[j].Message1 	= vm_etat_PMV[vl_num_eqt].Message1
  					vm_PMV[j].Message2 	= vm_etat_PMV[vl_num_eqt].Message2
				 	vm_PMV[j].Message3 	= vm_etat_PMV[vl_num_eqt].Message3
				 	vm_PMV[j].Message4 	= vm_etat_PMV[vl_num_eqt].Message4
				 	vm_PMV[j].Message5 	= vm_etat_PMV[vl_num_eqt].Message5
				 	vm_PMV[j].Alternat1 = vm_etat_PMV[vl_num_eqt].Alternat1
				 	vm_PMV[j].Alternat2 = vm_etat_PMV[vl_num_eqt].Alternat2
				 	vm_PMV[j].Alternat3 = vm_etat_PMV[vl_num_eqt].Alternat3
				 	vm_PMV[j].Alternat4 = vm_etat_PMV[vl_num_eqt].Alternat4
				 	vm_PMV[j].Alternat5 = vm_etat_PMV[vl_num_eqt].Alternat5
				 	vm_PMV[j].Clignotement1	= 
									vm_etat_PMV[vl_num_eqt].Clignotement1	
	 				vm_PMV[j].Clignotement2 = 
									vm_etat_PMV[vl_num_eqt].Clignotement2	
	 				vm_PMV[j].Clignotement3 = 
									vm_etat_PMV[vl_num_eqt].Clignotement3	
	 				vm_PMV[j].Clignotement4 = 
									vm_etat_PMV[vl_num_eqt].Clignotement4	
	 				vm_PMV[j].Clignotement5 = 
									vm_etat_PMV[vl_num_eqt].Clignotement5	
	 				vm_PMV[j].Flash	= vm_etat_PMV[vl_num_eqt].Flash

					ITMA_TPMVA_MAJ_PMVA_actuel_PA(j) 
				}
	
			next j

   		/*A SI reception calcul TDP */
      	CASE COM_CANAL_MTPMVA_TDP
			/*A capture du message */
			vl_message = DB_GET_POKE_DATA@(vm_fenetre)
			/*A decomposition du message re√ßu en tableau */
			vl_mess = null
			vl_mess = ARRAY_FROM_STRING@(vl_message[0],",")
			vl_num_eqt = vl_mess[0]+0
			vl_mess = ARRAY_DELETE@(vl_mess, 0)
			vl_evt=vm_Lect_PMV[vm_PMV_Actif].Numero_Evt
			vl_cle=vm_Lect_PMV[vm_PMV_Actif].Cle_Evt

			for j = 1 to 3
				if (vm_Lect_PMV[j].NumEqt = vl_num_eqt) 
				{
					vl_tptext = " --> Recu TDP PMVA : Dest1_p(" ++
						vm_Lect_PMV[vm_PMV_Actif].Dest1_proche++")="++ 
						vl_mess[0]++" Dest1_l("++
						vm_Lect_PMV[vm_PMV_Actif].Dest1_loin++")="++
						vl_mess[1]++" Dest2_p("++vm_Lect_PMV[vm_PMV_Actif].Dest2_proche++")="++
						vl_mess[2]++" Dest2_l("++
						vm_Lect_PMV[vm_PMV_Actif].Dest2_loin++")="++vl_mess[3]

					COM01_Trace(0,vl_tptext)
					
					if ((vl_mess[0] <> "") or (vl_mess[1] <> "") or (vl_mess[2] <> "") or (vl_mess[3] <> ""))
					{
						ITMA_TPMVA_Messages_TDP (vm_Destination, vl_mess, ll_lignes_dest_tdp)
						vm_Lect_PMV[j].Message1 = ll_lignes_dest_tdp[0]
						vm_Lect_PMV[j].Message2 = ll_lignes_dest_tdp[1]
						vm_Lect_PMV[j].Message3 = ll_lignes_dest_tdp[2]
						vm_Lect_PMV[j].Message4 = ll_lignes_dest_tdp[3]
						vm_Lect_PMV[j].Message5 = ll_lignes_dest_tdp[4]

						if (vm_auto=0)
							ITMA_TPMVA_MAJ_PMVA_PA(j)
						else
							{ /* sinon executer */
							ITMA_TPMVA_EXECUTER_PMVA_PA(j)
							vm_la_fenetre_est_active =FALSE
							}
					}
					/* S'il n'y a aucune TDP valides, alors on passe en neutre */
					else
					{
						vm_Lect_PMV[j].Message1 = ""
						vm_Lect_PMV[j].Message2 = ""
						vm_Lect_PMV[j].Message3 = ""
						vm_Lect_PMV[j].Message4 = ""
						vm_Lect_PMV[j].Message5 = ""

						vm_Lect_PMV[j].Dest1_proche = 0
 						vm_Lect_PMV[j].Dest1_loin = 0
						vm_Lect_PMV[j].Dest2_proche = 0
 						vm_Lect_PMV[j].Dest2_loin = 0

						/* si on n'est pas en pilotage auto, on averti l'operateur */
						if (vm_auto=0)
						{
							info_message@("Pas d'affichage Temps de parcours possible (zone HS)")
							ITMA_TPMVA_Reset_PMVA_PA(j,CM_AFF_NEUTRE)
							vm_Lect_PMV[j].Numero_Evt 	= vl_evt
							vm_Lect_PMV[j].Cle_Evt 		= vl_cle
						}
						else  /* sinon on execute l'affichage au neutre */
						{
							vm_Lect_PMV[j].Numero_Evt 	= vl_evt
							vm_Lect_PMV[j].Cle_Evt 		= vl_cle
							vm_arret=CM_AFF_NEUTRE
							ITMA_TPMVA_EXECUTER_PMVA_PA(j)
							vm_la_fenetre_est_active =FALSE
						}

					}
				}
	
			next j
			
   		ENDCASE

	ENDCASE

	if (vm_auto=0)	
	DB_CTRL_VALUE@(vm_fenetre,"BO_"++vm_PMV_Actif++"_Arret",
					vm_Lect_PMV[vm_PMV_Actif].TypeAffichage)
/*PNI	if vm_Lect_PMV[vm_PMV_Actif].TypeAffichage = CM_AFF_TDP and 			
	   vm_validation_nouv_message = XDC_FAUX
	{ 	
		DB_CTRL_DISPLAY@(vm_fenetre,"BP_"++vm_PMV_Actif++"_destination",TRUE)
	}
	else
	{ 	
		DB_CTRL_DISPLAY@(vm_fenetre,"BP_"++vm_PMV_Actif++"_destination",FALSE)
	}

	if vm_Lect_PMV[vm_PMV_Actif].TypeAffichage = CM_AFF_TDP and 			
	   vm_validation_nouv_message = XDC_FAUX and
	   DB_CTRL_GET_DISPLAY@(vm_fenetre,"BL_"++vm_PMV_Actif++"_alternat_nouveau") = TRUE
	{ 	
		DB_CTRL_DISPLAY@(vm_fenetre,"BP_"++vm_PMV_Actif++"_destination_alt",TRUE) 
	}
	else
	{ 	
 		DB_CTRL_DISPLAY@(vm_fenetre,"BP_"++vm_PMV_Actif++"_destination_alt",FALSE) 
	}
*/
WEND

vl_tptext = "   User : " ++ vm_NomOperateur
vl_tptext = "Stop ITMA_TPM_pilotage_PMV_PA " ++ vl_tptext
COM01_Trace(0,vl_tptext)

RETURN(COM_QUITTE)

ENDMACRO

/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :	Executer
*  ----------------------------------------------------------------------------
*/
MACRO ITMA_TPMVA_EXECUTER_PMVA_PA(va_numero)
/*
* ARGUMENTS EN ENTREE :
*   	va_numero        	: numero du PMV ;
*
*
* ARGUMENTS EN SORTIE : 
*
*
* CODE RETOUR         : auncun
*
* CONDITION D'UTILISATION
*   ITMA_TPM_pilotage_PMV_PA
*
*
---------------------------------------------------------------------------- */
var 	vl_retour
var	vl_erreur
var	vl_objet
var	vl_tptext
var	vl_fmc1
var	vl_fmc2
var 	vl_arret

vl_retour = NULL

/* on est en pilotage auto, alors envoi de commande de pilotage ou de fin de pilotage */
if (vm_auto=1)
{
	vl_tptext = " --> PA Evt auto= " ++ vm_Lect_PMV[va_numero].Numero_Evt ++ " Cle = " ++ vm_Lect_PMV[va_numero].Cle_Evt ++ " PMV ("++va_numero++") dest:"++vm_Lect_PMV[va_numero].Dest1_proche++"altdest:"++vm_Lect_PMV[va_numero].Dest1_loin
	COM01_Trace(0,vl_tptext)

	vl_arret=vm_arret
	if ((vl_arret = CM_AFF_TEXTE) or (vl_arret = CM_AFF_TDP))
	{
		vl_erreur = ITMA_TPMVA_Commande_PMVA_PA(va_numero,vl_arret)
	}
	else
	{
		vl_erreur = ITMA_TPMVA_Commande_Fin_PMVA_PA(va_numero)
	}
}
else
{
     DB_CTRL_GRAYED@(vm_fenetre,"BP_executer",TRUE)
     DB_CTRL_GRAYED@(vm_fenetre,"BP_refuser",TRUE)
     vl_objet = "BP_"++va_numero++"_refuser"
     DB_CTRL_GRAYED@(vm_fenetre,vl_objet,TRUE)
     vl_objet = "BO_"++va_numero++"_Arret"
	vl_arret = DB_CTRL_GET_VALUE@(vm_fenetre,vl_objet)



vl_tptext = " --> PA Evt = " ++ vm_Lect_PMV[va_numero].Numero_Evt ++ " Cle = " ++ vm_Lect_PMV[va_numero].Cle_Evt ++ " PMV ("++va_numero++") dest:"++vm_Lect_PMV[va_numero].Dest1_proche++"altdest:"++vm_Lect_PMV[va_numero].Dest1_loin
COM01_Trace(0,vl_tptext)
vl_tptext = " --> Texte=" ++ vm_Lect_PMV[va_numero].Message1 ++ "/" ++ vm_Lect_PMV[va_numero].Message2 ++ "/"++vm_Lect_PMV[va_numero].Message3
COM01_Trace(0,vl_tptext)
	
if (vm_Lect_PMV[va_numero].Numero_Evt<>NULL and
	vm_Lect_PMV[va_numero].Cle_Evt<>NULL)
{
	vl_retour = COM_VALIDE
	if ((vl_arret = CM_AFF_TEXTE) or (vl_arret = CM_AFF_TDP))
	{
			if NOT vm_mode_formation
			{
				vl_erreur = ITMA_TPMVA_Commande_PMVA_PA(va_numero,vl_arret)
			}
	
		if vl_erreur = COM_NOK
		{
			info_message@("Commande PMVA " ++ va_numero ++ " impossible")
		}
	}
	else
	{
		if((vl_arret > CM_AFF_TEXTE) and (vl_arret < CM_AFF_TDP))
		{
			if NOT vm_mode_formation
			{
			 	  vl_erreur = ITMA_TPMVA_Commande_Fin_PMVA_PA(va_numero)
			}
			vm_Lect_PMV[va_numero].fmc_liee = ""
		}
			
		if (vl_arret < CM_AFF_TEXTE) or (vl_arret > CM_AFF_TDP)
		{
			info_message@("Commande PMV " ++ va_numero ++ " impossible")
		}
	}
	vm_Lect_PMV[va_numero].Numero_Evt=0
 	vm_Lect_PMV[va_numero].Cle_Evt=0
	if NOT vm_abt_PMVA
	{
 		vl_erreur = ITMA_TPMVA_Abt_Etat_PMVA(vm_NomSite)
		if (vl_erreur <> COM_NOK) { vm_abt_PMVA = TRUE }
	}
}
else
{
	info_message@("Vous devez lier cette action √  une FMC")
			
	vl_objet = "BP_lier_fmc_"++va_numero
	DB_CTRL_GRAYED@(vm_fenetre,vl_objet,FALSE)

	vl_objet = "BP_"++va_numero++"_executer"
	DB_CTRL_GRAYED@(vm_fenetre,vl_objet,FALSE)
			
	DB_CTRL_GRAYED@(vm_fenetre,"BP_executer",FALSE)
} 		
DB_CTRL_TITLE@(vm_fenetre,
				"LI_"++va_numero++"_fmc_liee_nouveau","Pas de fmc liee")
DB_CTRL_TITLE@(vm_fenetre,
				"LI_"++va_numero++"_date_fmc_nouveau","")

}
RETURN(vl_retour)

ENDMACRO


/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :	Capture le click de la liste des PMV
*
*  ----------------------------------------------------------------------------
*/
MACRO ITMA_TPMVA_BL_PMVA_click_PA
/*
* ARGUMENTS EN ENTREE :
*
*
* ARGUMENTS EN SORTIE : 
*
*
* CODE RETOUR         : COM_OK
*
* CONDITION D'UTILISATION
*   ITMA_TPM_pilotage_PMV_PA
*
*
---------------------------------------------------------------------------- */

	var	vl_pos		' tampon de position de la liste
	var	vl_numero 		
	var	vl_Lect_PMV 		

		
	vl_pos = DB_CTRL_GET_VALUE@(vm_fenetre,"BL_PMV")

	if vl_pos<0 { vl_pos = 0 }

	vl_numero = ARRAY_INDEX@(ARRAY_COLUMN@(vm_Config_PMV,1), vm_liste_PMV[vl_pos])
	if vl_numero >= 0
 	{ 
		vl_Lect_PMV = vm_etat_PMV[vl_numero].NumEqt
	}
	else
	{ 	RETURN(COM_NOK) }


	if vl_Lect_PMV=vm_PMV[1].NumEqt and vm_PMV_Actif <> 1
	{ 	info_message@("PMV d√®ja en edition sur le pave n¬∞1 ...") 
		RETURN(COM_NOK)
	}

	if vl_Lect_PMV=vm_PMV[2].NumEqt and vm_PMV_Actif <> 2

	{ 	info_message@("PMV d√®ja en edition sur le pave n¬∞2 ...") 
		RETURN(COM_NOK)
 	}

	if vl_Lect_PMV=vm_PMV[3].NumEqt  and vm_PMV_Actif <> 3

	{ 	info_message@("PMV d√®ja en edition sur le pave n¬∞3 ...") 
		RETURN(COM_NOK)
	}

	vm_Lect_PMV[vm_PMV_Actif].NumEqt = vl_Lect_PMV
	vm_Lect_PMV[vm_PMV_Actif].Identifiant = vm_liste_PMV[vl_pos]
	vm_PMV[vm_PMV_Actif].NumEqt = vl_Lect_PMV
  
	RETURN(COM_OK)

ENDMACRO



/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :	Capture le click de la liste des elements
*				MAJ des lignes 1,2 et 3
*
* -----------------------------------------------------------------------------
*/
MACRO ITMA_TPMVA_BL_elements_click_PA
/*
* ARGUMENTS EN ENTREE :
*
*
* ARGUMENTS EN SORTIE : 
*
*
* CODE RETOUR         : COM_OK ou COM_NOK
*
* CONDITION D'UTILISATION
*   ITMA_TPM_pilotage_PMV_PA
*
*
---------------------------------------------------------------------------- */
	
	var	vl_pos		' tampon de position de la liste
	var	i,j			' index de loop
	var	vl_ele_table	' tableau de lecture des elements
	var	vl_ele_propo	' tableau de lecture des elements
	var	vl_Fichier2	' nom du fichier de proposition
	var	vl_taille
	var	vl_tpm
	var	vl_tpm2
	var	vl_picto
	var	vl_tptext		' zone de text tampon
	var 	vl_Lect_elements

/*A trace de l'appel de procedure */
vl_tptext =  "--> ITMA_TPM_BL_elements_click_PA"
COM01_Trace(0,vl_tptext)

vl_pos =	DB_CTRL_GET_VALUE@(vm_fenetre,"BL_elements")
	
if vl_pos<0 { vl_pos = 0 }

vl_Lect_elements =	TRIM@(TABS_TO_SPACES@(vm_liste_elements[vl_pos]))
	

vl_Fichier2 = REP_CONFIG ++ "pmv/Config_Element_" ++ vl_Lect_elements ++ "_PMVA.cfg" 

/*A Si fichier de config existant */
if FILE_EXISTS@(vl_Fichier2)
{
	vl_tpm2 = READ_ASCII_FILE@(vl_Fichier2)
	for i = 0 to ARRAY_SIZE@(vl_tpm2)-1
		vl_tpm = array_from_string@(vl_tpm2[i],",")
		for j = 0 to array_size@(vl_tpm)-1
			vl_ele_propo[i,j] = TRIM@(TABS_TO_SPACES@(vl_tpm[j]))
		next j
	next i
	
	vm_pix_table_proposition	= ""
	vm_table_proposition		= ""
	for i = 0 to ARRAY_SIZE@(vl_ele_propo)-1
		for j = 0 to ARRAY_SIZE@(vm_picto)-1
			if trim@(vl_ele_propo[i,0]) = trim@(vm_picto[j,2])
			{ 	vl_picto=vm_picto[j,0] 
			}
		next j
		vm_table_proposition[i,0]	= vl_ele_propo[i,1]
		vm_table_proposition[i,1]	= vl_ele_propo[i,2]
		vm_table_proposition[i,2]	= vl_ele_propo[i,3]
		vm_table_proposition[i,3]	= vl_ele_propo[i,4]
		vm_table_proposition[i,4]	= vl_ele_propo[i,5]
	next i

	DB_TABLE_SET_NEW_TOP_ROW@(vm_fenetre,"TA_proposition",0)
	DB_TABLE_SET_MARKER_WIDTH@(vm_fenetre,"TA_proposition",24)
	DB_TABLE_SET_DATA@( vm_fenetre,
					"TA_proposition",
					vm_table_proposition,
					vm_titre_table_proposition)
	DB_TABLE_MARKER_PIXMAPS@(vm_fenetre,
						"TA_proposition",
						0,
						vm_pix_table_proposition)  		

}


ENDMACRO



/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :	Centre un message sur une zone de 'n' caract√®re
*
*  ----------------------------------------------------------------------------
*/

MACRO ITMA_TPMVA_Tabuler_ligne_PA(va_old,va_new,va_taille)

/*
* ARGUMENTS EN ENTREE :
*   	va_old        	: Chaine en entree ;
*	va_taille		: taille de la chaine de sortie
*
*
* ARGUMENTS EN SORTIE : 
*   va_new     		: Chaine en sortie.
*
*
* CODE RETOUR         : auncun
*
* CONDITION D'UTILISATION
*   ITMA_TPM_pilotage_PMV_PA
*
*
---------------------------------------------------------------------------- */

	var	vl_long		' longeur du message
	var 	x			' variable static
	var 	i			' index de loop
	var		vl_tptext					' zone de text tampon

	vl_long = (len@(trim@(va_old)))
	x = int@((va_taille-vl_long)/2)
	va_new = ""
	for i = 1 to x
		va_new = va_new ++ " "
	next i
	vl_tptext = va_new ++ trim@(va_old) ++ "               "
	va_new = SUBSTRING@(vl_tptext,1,va_taille)
ENDMACRO


/*hilmarcher*/
/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :       'Centre' un message sur une zone de 15 caract√®res
*
*  ----------------------------------------------------------------------------
*/

MACRO ITMA_TPMVA_Tabuler_ligne_bis(va_dest,va_tdp,va_new)

/*
* ARGUMENTS EN ENTREE :
*       va_dest          : Chaine libelle de la destination en entree ;
*       va_tdp           : Chaine tdp en entree sous la forme "xmn";
*
*
* ARGUMENTS EN SORTIE :
*   va_new              : Chaine en sortie sous la forme "dtp   xmn"
*			  Exemple: "LA BOCCA     5mn".
*
*
* CODE RETOUR         : aucun
*
* CONDITION D'UTILISATION
*	ITMA_TPM_pilotage_PMV_PA
*
*
---------------------------------------------------------------------------- */

        var     vl_long1,vl_long2       ' longueur du message destination et tdp
        var     x                       ' variable static
        var     i                       ' index de loop
        var     vl_space                ' longueur de l espace entre dest et tdp
        var     vl_tptext               ' zone de text tampon

        vl_long1 = (len@(trim@(va_dest)))
        vl_long2 = (len@(trim@(va_tdp)))
        x = int@((15-(vl_long1 + vl_long2)))
        vl_space = ""
        for i = 1 to x
                vl_space = vl_space ++ " "
        next i
        vl_tptext = trim@(va_dest) ++ vl_space ++ trim@(va_tdp)
        va_new = SUBSTRING@(vl_tptext,1,15)
ENDMACRO



/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :	Modifications du message et MAJ de la BL
*
*  ----------------------------------------------------------------------------
*/
MACRO ITMA_TPMVA_Modif_message_PA
/*
* ARGUMENTS EN ENTREE :
*
*
* ARGUMENTS EN SORTIE : 
*
*
* CODE RETOUR         : COM_OK ou COM_NOK
*
* CONDITION D'UTILISATION
*   ITMA_TPM_pilotage_PMV_PA
*
*
---------------------------------------------------------------------------- */
	
var	vl_objet		' object en cours de modification
var	vl_tplecture	' text tampon de lecture d'une liste
var	vl_tptext		' zone de text tampon

/*A mise a jour du flag de modification d'un message */
vm_validation_nouv_message = XDC_FAUX

if vm_PMV_Actif>0
{	
	vl_objet = "BS_" ++ vm_PMV_Actif ++  "_modif1"
	vl_tplecture[0] = DB_CTRL_GET_VALUE@(vm_fenetre,vl_objet)
/*	vl_tplecture[0] = UPPERCASE@(SUBSTRING@(TRIM@(vl_tplecture[0]),1,15))*/
	vl_tplecture[0] = SUBSTRING@(TRIM@(vl_tplecture[0]),1,15)
	ITMA_TPMVA_Tabuler_ligne_PA(vl_tplecture[0],vl_tptext,15)
	vl_tplecture[0] = vl_tptext
	
	vl_objet = "BS_" ++ vm_PMV_Actif ++  "_modif2"
	vl_tplecture[1] = DB_CTRL_GET_VALUE@(vm_fenetre,vl_objet)
/*	vl_tplecture[1] = UPPERCASE@(SUBSTRING@(TRIM@(vl_tplecture[1]),1,15))*/
	vl_tplecture[1] = SUBSTRING@(TRIM@(vl_tplecture[1]),1,15)
	ITMA_TPMVA_Tabuler_ligne_PA(vl_tplecture[1],vl_tptext,15)
	vl_tplecture[1] = vl_tptext
	
	vl_objet = "BS_" ++ vm_PMV_Actif ++  "_modif3"
	vl_tplecture[2] = DB_CTRL_GET_VALUE@(vm_fenetre,vl_objet)
/*	vl_tplecture[2] = UPPERCASE@(SUBSTRING@(TRIM@(vl_tplecture[2]),1,15))*/
	vl_tplecture[2] = SUBSTRING@(TRIM@(vl_tplecture[2]),1,15)
	ITMA_TPMVA_Tabuler_ligne_PA(vl_tplecture[2],vl_tptext,15)
	vl_tplecture[2] = vl_tptext
	
	vl_objet = "BS_" ++ vm_PMV_Actif ++  "_modif4"
	vl_tplecture[3] = DB_CTRL_GET_VALUE@(vm_fenetre,vl_objet)
/*	vl_tplecture[3] = UPPERCASE@(SUBSTRING@(TRIM@(vl_tplecture[3]),1,15))*/
	vl_tplecture[3] = SUBSTRING@(TRIM@(vl_tplecture[3]),1,15)
	ITMA_TPMVA_Tabuler_ligne_PA(vl_tplecture[3],vl_tptext,15)
	vl_tplecture[3] = vl_tptext
	
	vl_objet = "BS_" ++ vm_PMV_Actif ++  "_modif5"
	vl_tplecture[4] = DB_CTRL_GET_VALUE@(vm_fenetre,vl_objet)
/*	vl_tplecture[4] = UPPERCASE@(SUBSTRING@(TRIM@(vl_tplecture[4]),1,15))*/
	vl_tplecture[4] = SUBSTRING@(TRIM@(vl_tplecture[4]),1,15)
	ITMA_TPMVA_Tabuler_ligne_PA(vl_tplecture[4],vl_tptext,15)
	vl_tplecture[4] = vl_tptext
	if ( vm_Text_Actif = "_message" )
	{	
		vm_Lect_PMV[vm_PMV_Actif].Message1	= vl_tplecture[0]
		vm_Lect_PMV[vm_PMV_Actif].Message2	= vl_tplecture[1]
		vm_Lect_PMV[vm_PMV_Actif].Message3	= vl_tplecture[2]
		vm_Lect_PMV[vm_PMV_Actif].Message4	= vl_tplecture[3]
		vm_Lect_PMV[vm_PMV_Actif].Message5	= vl_tplecture[4]
	}
	else
	{	
		vm_Lect_PMV[vm_PMV_Actif].Alternat1	= vl_tplecture[0]
		vm_Lect_PMV[vm_PMV_Actif].Alternat2	= vl_tplecture[1]
		vm_Lect_PMV[vm_PMV_Actif].Alternat3	= vl_tplecture[2]
		vm_Lect_PMV[vm_PMV_Actif].Alternat4	= vl_tplecture[3]
		vm_Lect_PMV[vm_PMV_Actif].Alternat5	= vl_tplecture[4]
	}


	/*A Degriser les boutons de MAJ de message semi-automatique */
	DB_CTRL_DISPLAY@(vm_fenetre,"BP_message",True)	
	DB_CTRL_DISPLAY@(vm_fenetre,"BP_alternat",True)	

	ITMA_TPMVA_MAJ_PMVA_PA(vm_PMV_Actif)

	RETURN(COM_OK)
}
else	RETURN(COM_NOK)
ENDMACRO



/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :	Affichage d'un BE pour modification du message
*
*  ----------------------------------------------------------------------------
*/
MACRO ITMA_TPMVA_Appel_Modif_message_PA
/*
* ARGUMENTS EN ENTREE :
*
*
* ARGUMENTS EN SORTIE : 
*
*
* CODE RETOUR         : COM_OK ou COM_NOK
*
* CONDITION D'UTILISATION
*   ITMA_TPM_pilotage_PMV_PA
*
*
---------------------------------------------------------------------------- */

var 	vl_objet			' object en cours de modification
var	vl_tplecture		' text tampon de lecture d'une liste
	

vl_objet = "BL_" ++ vm_PMV_Actif ++ vm_Text_Actif ++ "_nouveau"
vl_tplecture = DB_CTRL_GET_STRINGS@(vm_fenetre,vl_objet)

vl_objet = "BL_" ++ vm_PMV_Actif ++ "_message_nouveau"
DB_CTRL_DISPLAY@(vm_fenetre,vl_objet,FALSE)
	
vl_objet = "BL_" ++ vm_PMV_Actif ++ "_alternat_nouveau"
DB_CTRL_DISPLAY@(vm_fenetre,vl_objet,FALSE)
	
vl_objet = "BS_" ++ vm_PMV_Actif ++ "_modif1"
DB_CTRL_VALUE@(vm_fenetre,vl_objet,TRIM@(vl_tplecture[0]))
DB_CTRL_DISPLAY@(vm_fenetre,vl_objet,TRUE)	

vl_objet = "BS_" ++ vm_PMV_Actif ++ "_modif2"
DB_CTRL_VALUE@(vm_fenetre,vl_objet,TRIM@(vl_tplecture[1]))
DB_CTRL_DISPLAY@(vm_fenetre,vl_objet,TRUE)	
if (vm_Lect_PMV[vm_PMV_Actif].TypeAffichage = CM_AFF_TDP) and
(vm_Text_Actif = "_message" or vm_Lect_PMV[vm_PMV_Actif].Dest1_loin > 0 )
{	DB_CTRL_GRAYED@(vm_fenetre,vl_objet,TRUE) }
else
{	DB_CTRL_GRAYED@(vm_fenetre,vl_objet,FALSE) }

vl_objet = "BS_" ++ vm_PMV_Actif ++ "_modif3"
DB_CTRL_VALUE@(vm_fenetre,vl_objet,TRIM@(vl_tplecture[2]))
DB_CTRL_DISPLAY@(vm_fenetre,vl_objet,TRUE)	
if (vm_Lect_PMV[vm_PMV_Actif].TypeAffichage = CM_AFF_TDP) and
(vm_Text_Actif = "_message" or vm_Lect_PMV[vm_PMV_Actif].Dest1_loin > 0 )
{	DB_CTRL_GRAYED@(vm_fenetre,vl_objet,TRUE) }
else
{	DB_CTRL_GRAYED@(vm_fenetre,vl_objet,FALSE) }

vl_objet = "BS_" ++ vm_PMV_Actif ++ "_modif4"
DB_CTRL_VALUE@(vm_fenetre,vl_objet,TRIM@(vl_tplecture[3]))
DB_CTRL_DISPLAY@(vm_fenetre,vl_objet,TRUE)	
if (vm_Lect_PMV[vm_PMV_Actif].TypeAffichage = CM_AFF_TDP) and
(vm_Text_Actif = "_message" or vm_Lect_PMV[vm_PMV_Actif].Dest1_loin > 0 )
{	DB_CTRL_GRAYED@(vm_fenetre,vl_objet,TRUE) }
else
{	DB_CTRL_GRAYED@(vm_fenetre,vl_objet,FALSE) }

vl_objet = "BS_" ++ vm_PMV_Actif ++ "_modif5"
DB_CTRL_VALUE@(vm_fenetre,vl_objet,TRIM@(vl_tplecture[4]))
DB_CTRL_DISPLAY@(vm_fenetre,vl_objet,TRUE)	
if (vm_Lect_PMV[vm_PMV_Actif].TypeAffichage = CM_AFF_TDP) and
(vm_Text_Actif = "_message" or vm_Lect_PMV[vm_PMV_Actif].Dest1_loin > 0 )
{	DB_CTRL_GRAYED@(vm_fenetre,vl_objet,TRUE) }
else
{	DB_CTRL_GRAYED@(vm_fenetre,vl_objet,FALSE) }

vl_objet = "BP_" ++ vm_PMV_Actif ++ "_valider_nouveau"
DB_CTRL_DISPLAY@(vm_fenetre,vl_objet,TRUE)	

vl_objet = "BP_" ++ vm_PMV_Actif ++ "_annuler_nouveau"
DB_CTRL_DISPLAY@(vm_fenetre,vl_objet,TRUE)

/*A griser les boutons de MAJ de message semi-automatique */
DB_CTRL_DISPLAY@(vm_fenetre,"BP_message",False)	
DB_CTRL_DISPLAY@(vm_fenetre,"BP_alternat",False)	

/*A mise a jour du flag de modification d'un message */
vm_validation_nouv_message = XDC_VRAI

RETURN(COM_OK)
					
ENDMACRO

 

/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :	Lecture des PMV disponibles
*
*  ----------------------------------------------------------------------------
*/

MACRO ITMA_TPMVA_Lecture_PMVA_PA(va_type)

/*
* ARGUMENTS EN ENTREE 	:
*   va_type        	: N¬∞ du PMV traite ;
*
*
* ARGUMENTS EN SORTIE	: 
*	va_liste_PMV	: Liste des PMV disponibles
*
*
* CODE RETOUR		: COM_OK en cas d'execution correcte, COM_NOK sinon.
*
*
* CONDITION D'UTILISATION
*   ITMA_TPM_pilotage_PMV_PA
*
*
* FONCTION
*   MAJ de la liste des PMV disponibles dans la fiche de pilotage des PMV.
*
---------------------------------------------------------------------------- */


	VAR	vl_etat_null		' flag d'etat_PMV NULL
	VAR	vl_etat_num		' n¬∞ de l'etat_PMV correspondant
	VAR	i				' index de boucle
	var	vl_tptext			' zone de text tampon
	VAR	vl_erreur
	var format type_PMVA vl_PMV

	/*A si mauvais n¬∞ de PMV √  traiter : sortir */
	if va_type>4 or va_type<1 
	{
		vl_tptext = "ITMA_TPM_Lecture_PMV_PA("++va_type++") refusee"
		COM01_Trace(0,vl_tptext)
		RETURN(COM_NOK)
	}

	/*A trace de l'appel de procedure */
	vl_tptext =  "--> XZAT050_Utilisation_PMVA ("++ va_type++","++vm_PMV[va_type].NumEqt++")"
	COM01_Trace(0,vl_tptext)


	/*A si n¬∞ Eqt du PMV nul : sortir */
	if ( vm_PMV[va_type].NumEqt=NULL or TRIM@(vm_PMV[va_type].NumEqt)="" )
	{
		vl_tptext = "ITMA_TPM_Lecture_PMV_PA("++va_type++") refusee:"++vm_PMV[va_type].NumEqt
		COM01_Trace(0,vl_tptext)
		RETURN(COM_NOK)
	}
	
	vl_etat_num = vm_PMV[va_type].NumEqt+0
	if	vm_etat_PMV[vl_etat_num].NumeroAction+0 > 0	
	{ vl_etat_null = False }
	else
	{ vl_etat_null = True }

	vl_PMV = vm_PMV[va_type]

	vl_erreur = ITMA_TPMVA_Lecture_Etat_PMVA ( vm_mode_formation, vl_PMV,
									 vl_etat_null, C_MODULE )

	/*A MAJ de la table PMV avec les arguments de sorties */
	vm_PMV[va_type].DispoPMV 			= vl_PMV.DispoPMV

	/*A si pas etat_PMV null : MAJ avec l'etat terrain  */
	if ( NOT vl_etat_null ) 
	{
	 	vm_PMV[va_type].Message1 		= vm_etat_PMV[vl_etat_num].Message1
  		vm_PMV[va_type].Message2 		= vm_etat_PMV[vl_etat_num].Message2
	 	vm_PMV[va_type].Message3 		= vm_etat_PMV[vl_etat_num].Message3
	 	vm_PMV[va_type].Message4 		= vm_etat_PMV[vl_etat_num].Message4
	 	vm_PMV[va_type].Message5 		= vm_etat_PMV[vl_etat_num].Message5
	 	vm_PMV[va_type].Alternat1 		= vm_etat_PMV[vl_etat_num].Alternat1
	 	vm_PMV[va_type].Alternat2 		= vm_etat_PMV[vl_etat_num].Alternat2
	 	vm_PMV[va_type].Alternat3 		= vm_etat_PMV[vl_etat_num].Alternat3
	 	vm_PMV[va_type].Alternat4 		= vm_etat_PMV[vl_etat_num].Alternat4
	 	vm_PMV[va_type].Alternat5 		= vm_etat_PMV[vl_etat_num].Alternat5
	 	vm_PMV[va_type].Clignotement1		= 
								vm_etat_PMV[vl_etat_num].Clignotement1	
	 	vm_PMV[va_type].Clignotement2		= 
								vm_etat_PMV[vl_etat_num].Clignotement2	
	 	vm_PMV[va_type].Clignotement3		= 
								vm_etat_PMV[vl_etat_num].Clignotement3	
	 	vm_PMV[va_type].Clignotement4		= 
								vm_etat_PMV[vl_etat_num].Clignotement4	
	 	vm_PMV[va_type].Clignotement5		= 
								vm_etat_PMV[vl_etat_num].Clignotement5	
	 	vm_PMV[va_type].Flash			= vm_etat_PMV[vl_etat_num].Flash
	}
	else
	{
	 	vm_PMV[va_type].Message1 		= vl_PMV.Message1
  		vm_PMV[va_type].Message2 		= vl_PMV.Message2
	 	vm_PMV[va_type].Message3 		= vl_PMV.Message3
	 	vm_PMV[va_type].Message4 		= vl_PMV.Message4
	 	vm_PMV[va_type].Message5 		= vl_PMV.Message5
	 	vm_PMV[va_type].Alternat1 		= vl_PMV.Alternat1
	 	vm_PMV[va_type].Alternat2 		= vl_PMV.Alternat2
	 	vm_PMV[va_type].Alternat3 		= vl_PMV.Alternat3
	 	vm_PMV[va_type].Alternat4 		= vl_PMV.Alternat4
	 	vm_PMV[va_type].Alternat5 		= vl_PMV.Alternat5
	 	vm_PMV[va_type].Clignotement1		= vl_PMV.Clignotement1	
	 	vm_PMV[va_type].Clignotement2		= vl_PMV.Clignotement2	
	 	vm_PMV[va_type].Clignotement3		= vl_PMV.Clignotement3	
	 	vm_PMV[va_type].Clignotement4		= vl_PMV.Clignotement4	
	 	vm_PMV[va_type].Clignotement5		= vl_PMV.Clignotement5	
	 	vm_PMV[va_type].Flash			= vl_PMV.Flash
	}

	/*A MAJ avec base du n¬∞ Evt + Cle & NumAction */
	vm_PMV[va_type].Priorite			= vl_PMV.Priorite
	vm_PMV[va_type].DistanceEvt		= vl_PMV.DistanceEvt	
	vm_PMV[va_type].NumeroAction		= vl_PMV.NumeroAction	
	vm_PMV[va_type].fmc_liee 		= vl_PMV.fmc_liee 
	vm_PMV[va_type].Identifiant 		= vm_etat_PMV[vl_etat_num].Identifiant 


RETURN (vl_erreur)

ENDMACRO



/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :	Selection d'un PMV de 1 a 3
*
*  ----------------------------------------------------------------------------
*/

MACRO ITMA_TPMVA_select_PMVA_PA

/*
* ARGUMENTS EN ENTREE 	: aucun 
*
*
* ARGUMENTS EN SORTIE	: aucun
*
*
* CODE RETOUR		: COM_OK en cas d'execution correcte, COM_NOK sinon.
*
*
* CONDITION D'UTILISATION
*   ITMA_TPM_pilotage_PMV_PA
*
*
* FONCTION
*   Effacement du tableau de selection du PMV.
*
---------------------------------------------------------------------------- */
var	i
var	vl_affichage


	for i = 1 to 3
		if ( vm_PMV_Actif = i )
		{
			DB_CTRL_GRAYED@(vm_fenetre,"BP_lier_fmc_"++i,FALSE)
			DB_CTRL_GRAYED@(vm_fenetre,"BO_"++i++"_Arret",FALSE)
			DB_CTRL_DISPLAY@(vm_fenetre,"TA_"++i,TRUE)
			DB_CTRL_DISPLAY@(vm_fenetre,"TableauBP"++i,TRUE)
			DB_CTRL_DISPLAY@(vm_fenetre,"BP_"++i++"_explication",TRUE)
			DB_CTRL_DISPLAY@(vm_fenetre,"BP_"++i++"_refuser",TRUE)
			DB_CTRL_DISPLAY@(vm_fenetre,"BP_"++i++"_executer",TRUE)
			DB_CTRL_DISPLAY@(vm_fenetre,"BP_"++i++"_choisir_PMV",TRUE)
			DB_CTRL_GRAYED@(vm_fenetre,"BP_"++i++"_destination",FALSE)
			DB_CTRL_GRAYED@(vm_fenetre,"BP_"++i++"_destination_alt",FALSE)
			DB_CTRL_GRAYED@(vm_fenetre,"BA_"++i++"_clignotement1_nouveau",FALSE)
			DB_CTRL_GRAYED@(vm_fenetre,"BA_"++i++"_clignotement2_nouveau",FALSE)
			DB_CTRL_GRAYED@(vm_fenetre,"BA_"++i++"_clignotement3_nouveau",FALSE)
			DB_CTRL_GRAYED@(vm_fenetre,"BA_"++i++"_clignotement4_nouveau",FALSE)
			DB_CTRL_GRAYED@(vm_fenetre,"BA_"++i++"_clignotement5_nouveau",FALSE)
			DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre,
								"BL_"++i++"_message_nouveau",TRUE)
			DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre,
								"BL_"++i++"_alternat_nouveau",TRUE)
		}
		else
		{
			DB_CTRL_GRAYED@(vm_fenetre,"BP_lier_fmc_"++i,TRUE)
			DB_CTRL_GRAYED@(vm_fenetre,"BO_"++i++"_Arret",TRUE)
			DB_CTRL_DISPLAY@(vm_fenetre,"TA_"++i,FALSE)
			DB_CTRL_DISPLAY@(vm_fenetre,"TableauBP"++i,FALSE)
			DB_CTRL_DISPLAY@(vm_fenetre,"BP_"++i++"_explication",FALSE)
			DB_CTRL_DISPLAY@(vm_fenetre,"BP_"++i++"_refuser",FALSE)
			DB_CTRL_DISPLAY@(vm_fenetre,"BP_"++i++"_executer",FALSE)
			DB_CTRL_DISPLAY@(vm_fenetre,"BP_"++i++"_choisir_PMV",FALSE)
			DB_CTRL_GRAYED@(vm_fenetre,"BP_"++i++"_destination",TRUE)
			DB_CTRL_GRAYED@(vm_fenetre,"BP_"++i++"_destination_alt",TRUE)
			DB_CTRL_GRAYED@(vm_fenetre,"BA_"++i++"_clignotement1_nouveau",TRUE)
			DB_CTRL_GRAYED@(vm_fenetre,"BA_"++i++"_clignotement2_nouveau",TRUE)
			DB_CTRL_GRAYED@(vm_fenetre,"BA_"++i++"_clignotement3_nouveau",TRUE)
			DB_CTRL_GRAYED@(vm_fenetre,"BA_"++i++"_clignotement4_nouveau",TRUE)
			DB_CTRL_GRAYED@(vm_fenetre,"BA_"++i++"_clignotement5_nouveau",TRUE)
			DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre,
								"BL_"++i++"_message_nouveau",FALSE)
			DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre,
								"BL_"++i++"_alternat_nouveau",FALSE)
		}
	next i


	if NOT(IS_ARRAY@(vm_liste_PMV)) 
	{
		vm_liste_PMV = ITMA_TPMVA_Liste_Eqt_Dispo_PA(XDC_EQT_PMVA,vm_District)
	}

	vl_affichage = TRUE
	DB_CTRL_STRINGS@(vm_fenetre,"BL_PMV",vm_liste_PMV)

	DB_CTRL_DISPLAY@(vm_fenetre,"BL_PMV",vl_affichage)
	DB_CTRL_DISPLAY@(vm_fenetre,"Liste_PMV",vl_affichage)

	DB_CTRL_VALUE@(vm_fenetre,"BO_"++vm_PMV_Actif++"_Arret",
					vm_Lect_PMV[vm_PMV_Actif].TypeAffichage)
/*PNI	if vm_Lect_PMV[vm_PMV_Actif].TypeAffichage = CM_AFF_TDP and 			
	   vm_validation_nouv_message = XDC_FAUX
	{ 	
		DB_CTRL_DISPLAY@(vm_fenetre,"BP_"++vm_PMV_Actif++"_destination",TRUE)
	}
	else
	{ 	
		DB_CTRL_DISPLAY@(vm_fenetre,"BP_"++vm_PMV_Actif++"_destination",FALSE)
	}

	if vm_Lect_PMV[vm_PMV_Actif].TypeAffichage = CM_AFF_TDP and 			
	   vm_validation_nouv_message = XDC_FAUX and
	   DB_CTRL_GET_DISPLAY@(vm_fenetre,"BL_"++vm_PMV_Actif++"_alternat_nouveau") = TRUE
	{ 	
		DB_CTRL_DISPLAY@(vm_fenetre,"BP_"++vm_PMV_Actif++"_destination_alt",TRUE) 
	}
	else
	{ 	
 		DB_CTRL_DISPLAY@(vm_fenetre,"BP_"++vm_PMV_Actif++"_destination_alt",FALSE) 
	}
*/

RETURN(COM_OK)

ENDMACRO




/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :	MAJ de l'IHM avec la table PMV
*
*  ----------------------------------------------------------------------------
*/

MACRO ITMA_TPMVA_MAJ_PMVA_PA(va_numero)

/*
* ARGUMENTS EN ENTREE : 
*		va_numero		:	le numero du PMV traite
*
*
* ARGUMENTS EN SORTIE : aucun
*
*
* CODE RETOUR		: COM_OK en cas d'execution correcte, COM_NOK sinon.
*
*
* CONDITION D'UTILISATION
*   ITMA_TPM_pilotage_PMV_PA
*
*
* FONCTION
*   MAJ de l'IHM par rapport √  la table PMV.
*
---------------------------------------------------------------------------- */

	var		vl_objet		' l'objet en cours de modif.
	var		i			' index de loop
	var		vl_taille		' taille du text
	var		vl_fmc1		' libelle fmc 1
	var		vl_fmc2		' libelle fmc 2
	var		vl_tplecture	' text tampon de lecture d'une liste
	var		vl_tptext		' zone de text tampon
	var		vl_tpaffichage	' flag de la bascule d'affichage

	if va_numero>4 or va_numero<1
	{
		vl_tptext = "MAJ_PMV("++va_numero++") refusee"
		COM01_Trace(0,vl_tptext)
		RETURN(COM_NOK)
	}

	/*A trace de l'appel de procedure */
	vl_tptext =  "--> ITMA_TPM_MAJ_PMV_PA"++vm_Lect_PMV[va_numero].TypeAffichage
	COM01_Trace(0,vl_tptext)

	DB_CTRL_DISPLAY@(vm_fenetre,"BP_" ++ va_numero ++ "_valider_nouveau",FALSE)	
	DB_CTRL_DISPLAY@(vm_fenetre,"BP_" ++ va_numero ++ "_annuler_nouveau",FALSE)	
	DB_CTRL_DISPLAY@(vm_fenetre,"BS_" ++ va_numero ++ "_modif1",FALSE)	
	DB_CTRL_DISPLAY@(vm_fenetre,"BS_" ++ va_numero ++ "_modif2",FALSE)	
	DB_CTRL_DISPLAY@(vm_fenetre,"BS_" ++ va_numero ++ "_modif3",FALSE)	
	DB_CTRL_DISPLAY@(vm_fenetre,"BL_" ++ va_numero ++ "_message_nouveau",TRUE)
	/*A Degriser les boutons de MAJ de message semi-automatique */
	DB_CTRL_DISPLAY@(vm_fenetre,"BP_message",True)	
	DB_CTRL_DISPLAY@(vm_fenetre,"BP_alternat",True)	

/*	if ( vm_Lect_PMV[va_numero].TypeAffichage <> CM_AFF_TDP )
	{ 
		vm_Lect_PMV[va_numero].Dest1_proche 	 = 0
 		vm_Lect_PMV[va_numero].Dest1_loin	   	 = 0

		vm_Lect_PMV[va_numero].Dest2_proche 	 = 0
 		vm_Lect_PMV[va_numero].Dest2_loin	   	 = 0
	}
*/

	vl_tpaffichage = CM_AFF_NEUTRE

	vl_fmc1=SUBSTRING@(vm_Lect_PMV[va_numero].fmc_liee,1,46)
	vl_fmc2=TRIM@(SUBSTRING@(vm_Lect_PMV[va_numero].fmc_liee,46,20))

	vl_objet = "LI_" ++ va_numero ++ "_fmc_liee_nouveau"
	DB_CTRL_TITLE@(vm_fenetre,vl_objet,vl_fmc1)

	vl_objet = "LI_" ++ va_numero ++ "_date_fmc_nouveau"
	DB_CTRL_TITLE@(vm_fenetre,vl_objet,vl_fmc2)

	vl_objet = "BL_" ++ va_numero ++ "_message_nouveau"
	vl_tplecture[0] = vm_Lect_PMV[va_numero].Message1 
	vl_tplecture[1] = vm_Lect_PMV[va_numero].Message2
	vl_tplecture[2] = vm_Lect_PMV[va_numero].Message3
	vl_tplecture[3] = vm_Lect_PMV[va_numero].Message4
	vl_tplecture[4] = vm_Lect_PMV[va_numero].Message5
	DB_CTRL_STRINGS@(vm_fenetre,vl_objet,vl_tplecture)
	DB_CTRL_VALUE@(vm_fenetre,vl_objet,-1)
	DB_CTRL_DISPLAY@(vm_fenetre,vl_objet,TRUE)

	vl_tptext = vl_tplecture[0] ++ vl_tplecture[1] ++ vl_tplecture[2] ++ vl_tplecture[3] ++ vl_tplecture[4]

	if TRIM@(vl_tptext) <> "" 
 	  { vl_tpaffichage = CM_AFF_TEXTE }

	vl_objet = "BL_" ++ va_numero ++ "_alternat_nouveau"
	vl_tplecture[0] = vm_Lect_PMV[va_numero].Alternat1 
	vl_tplecture[1] = vm_Lect_PMV[va_numero].Alternat2
	vl_tplecture[2] = vm_Lect_PMV[va_numero].Alternat3
	vl_tplecture[3] = vm_Lect_PMV[va_numero].Alternat4
	vl_tplecture[4] = vm_Lect_PMV[va_numero].Alternat5
	DB_CTRL_STRINGS@(vm_fenetre,vl_objet,vl_tplecture)
	DB_CTRL_VALUE@(vm_fenetre,vl_objet,-1)

	vl_tptext = vl_tplecture[0] ++ vl_tplecture[1] ++ vl_tplecture[2] ++ vl_tplecture[3] ++ vl_tplecture[4]
	if TRIM@(vl_tptext)<>""
	{ 	DB_CTRL_DISPLAY@(vm_fenetre,vl_objet,TRUE)
		vl_tpaffichage = CM_AFF_TEXTE 
	}
	else
 	{ 	DB_CTRL_DISPLAY@(vm_fenetre,vl_objet,False)	}

	vl_objet = "BA_" ++ va_numero ++ "_flash_nouveau"
	DB_CTRL_VALUE@(vm_fenetre,vl_objet,vm_Lect_PMV[va_numero].flash)

	if vm_Lect_PMV[va_numero].Clignotement1 = XDC_PMV_CLIGNORAPIDE or  vm_Lect_PMV[va_numero].Clignotement1 = XDC_PMV_CLIGNOLENT
	{ 
		vl_tplecture = TRUE
		vl_tpaffichage = CM_AFF_TEXTE
	 }
	else 
	{	vl_tplecture = FALSE 
	}

	vl_objet = "BA_" ++ va_numero ++ "_clignotement1_nouveau"
	DB_CTRL_VALUE@(vm_fenetre,vl_objet,vl_tplecture)

	if vm_Lect_PMV[va_numero].Clignotement2 = XDC_PMV_CLIGNORAPIDE or  vm_Lect_PMV[va_numero].Clignotement2 = XDC_PMV_CLIGNOLENT
	{ 
		vl_tplecture = TRUE
		vl_tpaffichage = CM_AFF_TEXTE
	}
	else 
	{ 	vl_tplecture = FALSE 
	}

	vl_objet = "BA_" ++ va_numero ++ "_clignotement2_nouveau"
	DB_CTRL_VALUE@(vm_fenetre,vl_objet,vl_tplecture)

	if vm_Lect_PMV[va_numero].Clignotement3 = XDC_PMV_CLIGNORAPIDE or  vm_Lect_PMV[va_numero].Clignotement3 = XDC_PMV_CLIGNOLENT
	{ 
		vl_tplecture = TRUE
		vl_tpaffichage = CM_AFF_TEXTE
	 }
	else 
	{ 	vl_tplecture = FALSE 
	}
	vl_objet = "BA_" ++ va_numero ++ "_clignotement3_nouveau"
	DB_CTRL_VALUE@(vm_fenetre,vl_objet,vl_tplecture)

	if vm_Lect_PMV[va_numero].Clignotement4 = XDC_PMV_CLIGNORAPIDE or  vm_Lect_PMV[va_numero].Clignotement4 = XDC_PMV_CLIGNOLENT
	{ 
		vl_tplecture = TRUE
		vl_tpaffichage = CM_AFF_TEXTE
	 }
	else 
	{ 	vl_tplecture = FALSE 
	}
	vl_objet = "BA_" ++ va_numero ++ "_clignotement4_nouveau"
	DB_CTRL_VALUE@(vm_fenetre,vl_objet,vl_tplecture)

	if vm_Lect_PMV[va_numero].Clignotement5 = XDC_PMV_CLIGNORAPIDE or  vm_Lect_PMV[va_numero].Clignotement5 = XDC_PMV_CLIGNOLENT
	{ 
		vl_tplecture = TRUE
		vl_tpaffichage = CM_AFF_TEXTE
	 }
	else 
	{ 	vl_tplecture = FALSE 
	}
	vl_objet = "BA_" ++ va_numero ++ "_clignotement5_nouveau"
	DB_CTRL_VALUE@(vm_fenetre,vl_objet,vl_tplecture)

	vl_tptext[0] = vm_Lect_PMV[va_numero].Remarque 

	if ( vm_Lect_PMV[va_numero].TypeAffichage <> CM_AFF_TDP)
	{
	if ( vm_Lect_PMV[va_numero].TypeAffichage = CM_AFF_TDP or 
		vm_Lect_PMV[va_numero].TypeAffichage = CM_AFF_TEXTE ) and
		( vl_tpaffichage = CM_AFF_NEUTRE )
	{	vm_Lect_PMV[va_numero].TypeAffichage = CM_AFF_NEUTRE }
	if ( vm_Lect_PMV[va_numero].TypeAffichage <> CM_AFF_TDP and 
		vm_Lect_PMV[va_numero].TypeAffichage <> CM_AFF_TEXTE  and
		vl_tpaffichage = CM_AFF_TEXTE )
	{	vm_Lect_PMV[va_numero].TypeAffichage = CM_AFF_TEXTE }
	}

	RETURN (COM_OK)
	
ENDMACRO



/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :	MAJ du PMV actuel avec la table PMV
*
*  ----------------------------------------------------------------------------
*/

MACRO ITMA_TPMVA_MAJ_PMVA_actuel_PA(va_numero)

/*
* ARGUMENTS EN ENTREE : 
*		va_numero		:	le numero du PMV traite
*
*
* ARGUMENTS EN SORTIE : aucun
*
*
* CODE RETOUR		: COM_OK en cas d'execution correcte, COM_NOK sinon.
*
*
* CONDITION D'UTILISATION
*   	ITMA_TPM_pilotage_PMV_PA
*
*
* FONCTION
*	MAJ du PMV actuel avec la table PMV.
*
---------------------------------------------------------------------------- */

	var		vl_objet		' l'objet en cours de modif.
	var		i			' index de loop
	var		vl_taille		' taille du text
	var		vl_fmc1		' libelle fmc 1
	var		vl_tplecture	' text tampon de lecture d'une liste
	var		vl_fmc2		' libelle fmc 2
	var		vl_tptext		' zone de text tampon

	if va_numero>4 or va_numero<1 or vm_PMV[va_numero].Identifiant="" 
	{
		vl_tptext = "MAJ_PMV_actuel("++va_numero++") refusee"
		COM01_Trace(0,vl_tptext)
		RETURN(COM_NOK)
	}

	/*A trace de l'appel de procedure */
	vl_tptext =  "-->ITMA_TPM_MAJ_PMV_actuel_PA("++vm_PMV[va_numero].Identifiant++")"
	COM01_Trace(0,vl_tptext)

	vl_objet = "LI_" ++ va_numero ++ "_identification"
	DB_CTRL_TITLE@(vm_fenetre,vl_objet,vm_PMV[va_numero].identifiant)

	vl_fmc1=SUBSTRING@(vm_PMV[va_numero].fmc_liee,1,46)
	vl_fmc2=TRIM@(SUBSTRING@(vm_PMV[va_numero].fmc_liee,46,20))

	vl_objet = "LI_" ++ va_numero ++ "_fmc_liee_actuelle"
	DB_CTRL_TITLE@(vm_fenetre,vl_objet,vl_fmc1)

	vl_objet = "LI_" ++ va_numero ++ "_date_fmc_actuel"
	DB_CTRL_TITLE@(vm_fenetre,vl_objet,vl_fmc2)

	vl_objet = "BL_" ++ va_numero ++ "_message_actuel"
	vl_tplecture[0] = vm_PMV[va_numero].Message1 
	vl_tplecture[1] = vm_PMV[va_numero].Message2
	vl_tplecture[2] = vm_PMV[va_numero].Message3
	vl_tplecture[3] = vm_PMV[va_numero].Message4
	vl_tplecture[4] = vm_PMV[va_numero].Message5
	DB_CTRL_STRINGS@(vm_fenetre,vl_objet,vl_tplecture)
	DB_CTRL_VALUE@(vm_fenetre,vl_objet,-1)

	vl_objet = "BL_" ++ va_numero ++ "_alternat_actuel"
	vl_tplecture[0] = vm_PMV[va_numero].Alternat1 
	vl_tplecture[1] = vm_PMV[va_numero].Alternat2
	vl_tplecture[2] = vm_PMV[va_numero].Alternat3
	vl_tplecture[3] = vm_PMV[va_numero].Alternat4
	vl_tplecture[4] = vm_PMV[va_numero].Alternat5
	DB_CTRL_STRINGS@(vm_fenetre,vl_objet,vl_tplecture)
	DB_CTRL_VALUE@(vm_fenetre,vl_objet,-1)

	vl_tptext = vl_tplecture[0] ++ vl_tplecture[1] ++ vl_tplecture[2] ++ vl_tplecture[3] ++ vl_tplecture[4]
	if TRIM@(vl_tptext)<>""
	{ 	DB_CTRL_DISPLAY@(vm_fenetre,vl_objet,TRUE)
		vl_objet = "Lib" ++ va_numero ++ "Alt"
		DB_CTRL_DISPLAY@(vm_fenetre,vl_objet,TRUE)	
	}
	else
 	{ 	DB_CTRL_DISPLAY@(vm_fenetre,vl_objet,False)	
		vl_objet = "Lib" ++ va_numero ++ "Alt"
		DB_CTRL_DISPLAY@(vm_fenetre,vl_objet,False)	
	}

	if vm_PMV[va_numero].Flash = XDC_PMV_FLASHPRESENT
	{ 
		vl_tplecture = TRUE 
	}
	else 
	{	vl_tplecture = FALSE
	}
	vl_objet = "BA_" ++ va_numero ++ "_flash_actuel"
	DB_CTRL_VALUE@(vm_fenetre,vl_objet,vl_tplecture)

	if vm_PMV[va_numero].Clignotement1 = XDC_PMV_CLIGNORAPIDE or   vm_PMV[va_numero].Clignotement1 = XDC_PMV_CLIGNOLENT
	{ 
		vl_tplecture = TRUE
	}
	else 
	{
		 vl_tplecture = FALSE
	}
	vl_objet = "BA_" ++ va_numero ++ "_clignotement1_actuel"
	DB_CTRL_VALUE@(vm_fenetre,vl_objet,vl_tplecture)

	if vm_PMV[va_numero].Clignotement2 = XDC_PMV_CLIGNORAPIDE  or vm_PMV[va_numero].Clignotement2 = XDC_PMV_CLIGNOLENT
	{ 
		vl_tplecture = TRUE
	}
	else
	{	vl_tplecture = FALSE
	}
	vl_objet = "BA_" ++ va_numero ++ "_clignotement2_actuel"
	DB_CTRL_VALUE@(vm_fenetre,vl_objet,vl_tplecture)

	if vm_PMV[va_numero].Clignotement3 = XDC_PMV_CLIGNORAPIDE or   vm_PMV[va_numero].Clignotement3 = XDC_PMV_CLIGNOLENT
	{ 
		vl_tplecture = TRUE
	}
	else 
	{	vl_tplecture = FALSE
	}
	vl_objet = "BA_" ++ va_numero ++ "_clignotement3_actuel"
	DB_CTRL_VALUE@(vm_fenetre,vl_objet,vl_tplecture)

	if vm_PMV[va_numero].Clignotement4 = XDC_PMV_CLIGNORAPIDE or   vm_PMV[va_numero].Clignotement4 = XDC_PMV_CLIGNOLENT
	{ 
		vl_tplecture = TRUE
	}
	else 
	{	vl_tplecture = FALSE
	}
	vl_objet = "BA_" ++ va_numero ++ "_clignotement4_actuel"
	DB_CTRL_VALUE@(vm_fenetre,vl_objet,vl_tplecture)

	if vm_PMV[va_numero].Clignotement5 = XDC_PMV_CLIGNORAPIDE or   vm_PMV[va_numero].Clignotement5 = XDC_PMV_CLIGNOLENT
	{ 
		vl_tplecture = TRUE
	}
	else 
	{	vl_tplecture = FALSE
	}
	vl_objet = "BA_" ++ va_numero ++ "_clignotement5_actuel"
	DB_CTRL_VALUE@(vm_fenetre,vl_objet,vl_tplecture)

	RETURN (COM_OK)
	
ENDMACRO



/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :	Reset du nouveau PMV sur l'IHM
*
*  ----------------------------------------------------------------------------
*/

FUNCTION ITMA_TPMVA_Reset_PMVA_PA(va_numero,va_etat)

/*
* ARGUMENTS EN ENTREE : 
*		va_numero		:	le numero du PMV traite
*		va_etat		:	mise au neutre/heure/temp/eteint
*
* ARGUMENTS EN SORTIE : aucun
*
*
* CODE RETOUR		: COM_OK en cas d'execution correcte, COM_NOK sinon.
*
*
* CONDITION D'UTILISATION
*   ITMA_TPM_pilotage_PMV_PA
*
*
* FONCTION
*   Reset du PMV 'nouveau' sur l'IHM.
*
---------------------------------------------------------------------------- */

	var		vl_objet		' l'objet en cours de modif.
	var		vl_tptext		' zone de text tampon
	var 		vl_numero

	if va_numero>3 or va_numero<1 or va_etat>4 or va_etat<1 
	{
		vl_tptext = "Reset_PMV("++va_numero++") refusee"
		COM01_Trace(0,vl_tptext)
		RETURN(COM_NOK)
	}
	vl_numero = vm_Lect_PMV[va_numero].NumEqt
	vm_Lect_PMV[va_numero] = vm_Lect_PMV[0]
	vm_Lect_PMV[va_numero].Identifiant = vm_Config_PMV[vl_numero].Identifiant
	vm_Lect_PMV[va_numero].NumEqt 	= vl_numero
	vm_Lect_PMV[va_numero].TypeAffichage = va_etat
	vm_Lect_PMV[va_numero].sitegestion = vm_Config_PMV[vl_numero].sitegestion

	if ( vm_Lect_PMV[va_numero].TypeAffichage <> CM_AFF_TDP )
	{ 
		vm_Lect_PMV[va_numero].Dest1_proche 	 = 0
 		vm_Lect_PMV[va_numero].Dest1_loin	   	 = 0

		vm_Lect_PMV[va_numero].Dest2_proche 	 = 0
 		vm_Lect_PMV[va_numero].Dest2_loin	   	 = 0
	}

	ITMA_TPMVA_MAJ_PMVA_PA (va_numero)

	/*A trace de l'appel de procedure */
	vl_tptext =  "--> ITMA_TPM_Reset_PMV_PA"
	COM01_Trace(0,vl_tptext)

/*	ITMA_TPM_Animation_Picto_PA(va_numero,20) */

	RETURN(COM_OK)

ENDFUNCTION

/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :	lecture etat clignottement PMV sur l'IHM
*
*  ----------------------------------------------------------------------------
*/

MACRO ITMA_TPMVA_LectCligno_PMVA_PA

/*
* ARGUMENTS EN ENTREE : 
*
* ARGUMENTS EN SORTIE : aucun
*
*
* CODE RETOUR		: COM_OK en cas d'execution correcte, COM_NOK sinon.
*
*
* CONDITION D'UTILISATION
*   ITMA_TPM_pilotage_PMV_PA
*
*
* FONCTION
*   .
*
---------------------------------------------------------------------------- */



	if DB_CTRL_VALUE@(vm_fenetre,"BA_"++vm_PMV_Actif ++ "_clignotement1_nouveau")
	{	vm_Lect_PMV[vm_PMV_Actif].Clignotement1 = XDC_PMV_CLIGNOLENT }
	else
	{	vm_Lect_PMV[vm_PMV_Actif].Clignotement1 = XDC_PMV_PASCLIGNO }

	if DB_CTRL_VALUE@(vm_fenetre,"BA_"++vm_PMV_Actif ++ "_clignotement2_nouveau")
	{	vm_Lect_PMV[vm_PMV_Actif].Clignotement2 = XDC_PMV_CLIGNOLENT }
	else
	{	vm_Lect_PMV[vm_PMV_Actif].Clignotement2 = XDC_PMV_PASCLIGNO }

	if DB_CTRL_VALUE@(vm_fenetre,"BA_"++vm_PMV_Actif ++ "_clignotement3_nouveau")
	{	vm_Lect_PMV[vm_PMV_Actif].Clignotement3 = XDC_PMV_CLIGNOLENT }
	else
	{	vm_Lect_PMV[vm_PMV_Actif].Clignotement3 = XDC_PMV_PASCLIGNO }

	if DB_CTRL_VALUE@(vm_fenetre,"BA_"++vm_PMV_Actif ++ "_clignotement4_nouveau")
	{	vm_Lect_PMV[vm_PMV_Actif].Clignotement4 = XDC_PMV_CLIGNOLENT }
	else
	{	vm_Lect_PMV[vm_PMV_Actif].Clignotement4 = XDC_PMV_PASCLIGNO }

	if DB_CTRL_VALUE@(vm_fenetre,"BA_"++vm_PMV_Actif ++ "_clignotement5_nouveau")
	{	vm_Lect_PMV[vm_PMV_Actif].Clignotement5 = XDC_PMV_CLIGNOLENT }
	else
	{	vm_Lect_PMV[vm_PMV_Actif].Clignotement5 = XDC_PMV_PASCLIGNO }


	RETURN(COM_OK)

ENDFUNCTION

/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :	Commande du nouveau PMV
*
*  ----------------------------------------------------------------------------
*/

MACRO ITMA_TPMVA_Commande_PMVA_PA(va_type,va_arret)

/*
* ARGUMENTS EN ENTREE : 
*		va_numero		:	le numero du PMV traite
*		va_arret		:	le type d affichage: texte, neutre, temp, tdp
*
* ARGUMENTS EN SORTIE : aucun
*
*
* CODE RETOUR		: COM_OK en cas d'execution correcte, COM_NOK sinon.
*
*
* CONDITION D'UTILISATION
*   ITMA_TPM_pilotage_PMV_PA
*
*
* FONCTION
*   	Commande du nouveau PMV.
*
---------------------------------------------------------------------------- */
	VAR FORMAT SQL_Procedure_Params@ vl_parametres
	VAR FORMAT SQL_Procedure_Result@ vl_resultats
	
	var		vl_tptext		' zone de text tampon
	var		vl_NumActionEnCours
	var		vl_Type_Neutre_Commande
	var		vl_cr

	/*A test les droits d'acces √  cette fonction */
	if NOT(COM04_Operateur_A_Le_Droit_De(XDC_FAM_EXPLOITATION_DISTRICT)) and
	   NOT(COM04_Operateur_A_Le_Droit_De(XDC_FAM_EXPLOITATION_CI)) and
	   NOT(COM04_Operateur_A_Le_Droit_De(XDC_FAM_EXPLOITATION_PC2))
	{
		ITMA_TPMVA_Acces_interdit_PA("ITMA_TPM_Commande_PMV_PA")
		RETURN(COM_NOK)
	}

	if va_type>3 or va_type<1
	{
		vl_tptext = "Commande_PMV("++va_type++") refusee"
		COM01_Trace(0,vl_tptext)
		RETURN(COM_NOK)
	}

   	if (va_arret <> CM_AFF_TDP)
   	{
		/*A trace de l'appel de procedure */
		vl_tptext =  "--> XZAC82_Commande_PMVA ("++va_type++")"
		COM01_Trace(0,vl_tptext)
   	}
   
	if (va_arret = CM_AFF_TDP) 
   	{
		vl_tptext =  "--> XZAC682_Commande_PMVA_TDP ("++va_type++")"
		COM01_Trace(0,vl_tptext)
   	}

	vm_Lect_PMV[va_type].Horodate = COM09_Date_Courante(TRUE)
	vm_Lect_PMV[va_type].Operateur = SUBSTRING@(vm_NomOperateur, 1, 25)

	if NOT IS_NUMERIC_STRING@(vm_Lect_PMV[va_type].NumEqt)
	{
		vl_tptext = 
			"Commande_PMV("++va_type++") refusee (numero d'equipement invalide)"
		COM01_Trace(0,vl_tptext)
		RETURN(COM_NOK)
	}

	/*
	if SYSTEM_VAR@(vg_site) = XDC_CI and NOT vm_mode_formation
	{
		if NOT ITMA_COM_District_pilotable(
			vm_Config_PMV[vm_Lect_PMV[va_type].NumEqt].sitegestion, 
			XDC_LIB_PMVA, TRUE,
			vm_Config_PMV[vm_Lect_PMV[va_type].NumEqt].Identifiant) 
		{ 
			RETURN(COM_NOK)
 		}
 	}
	*/

	vm_Lect_PMV[va_type].Operateur = SYSTEM_VAR@("vg_numero_poste")
	vm_Lect_PMV[va_type].Flash = XDC_PMV_PASFLASH

	vl_parametres[0].type	= SYB#DATETIME_
	vl_parametres[0].data	= vm_Lect_PMV[va_type].Horodate
	vl_parametres[0].output	= FALSE

	vl_parametres[1].type	= SYB#INT4_
	vl_parametres[1].data	= vm_Lect_PMV[va_type].Numero_Evt
	vl_parametres[1].output	= FALSE

	vl_parametres[2].type	= SYB#INT1_
	vl_parametres[2].data	= vm_Lect_PMV[va_type].Cle_Evt
	vl_parametres[2].output	= FALSE

	vl_parametres[3].type	= SYB#INT2_
	vl_parametres[3].data	= vm_Lect_PMV[va_type].Operateur
	vl_parametres[3].output	= FALSE

	vl_parametres[4].type	= SYB#INT2_
	vl_parametres[4].data	= vm_Lect_PMV[va_type].NumEqt
	vl_parametres[4].output	= FALSE

	vl_parametres[5].type	= SYB#INT4_
	vl_parametres[5].data	= vm_Config_PMV[vm_Lect_PMV[va_type].NumEqt].sitegestion
	vl_parametres[5].output	= FALSE

	vl_parametres[6].type	= SYB#CHAR_
	vl_parametres[6].data	= vm_Lect_PMV[va_type].Message1
	vl_parametres[6].output	= FALSE

	vl_parametres[7].type	= SYB#CHAR_
	vl_parametres[7].data	= vm_Lect_PMV[va_type].Message2
	vl_parametres[7].output	= FALSE

	vl_parametres[8].type	= SYB#CHAR_
	vl_parametres[8].data	= vm_Lect_PMV[va_type].Message3
	vl_parametres[8].output	= FALSE

        vl_parametres[9].type   = SYB#CHAR_
        vl_parametres[9].data   = vm_Lect_PMV[va_type].Message4
        vl_parametres[9].output = FALSE

        vl_parametres[10].type  = SYB#CHAR_
        vl_parametres[10].data  = vm_Lect_PMV[va_type].Message5
        vl_parametres[10].output        = FALSE

        vl_parametres[11].type  = SYB#CHAR_
        vl_parametres[11].data  = vm_Lect_PMV[va_type].Alternat1
        vl_parametres[11].output        = FALSE

        vl_parametres[12].type  = SYB#CHAR_
        vl_parametres[12].data  = vm_Lect_PMV[va_type].Alternat2
        vl_parametres[12].output        = FALSE

        vl_parametres[13].type  = SYB#CHAR_
        vl_parametres[13].data  = vm_Lect_PMV[va_type].Alternat3
        vl_parametres[13].output        = FALSE

        vl_parametres[14].type  = SYB#CHAR_
        vl_parametres[14].data  = vm_Lect_PMV[va_type].Alternat4
        vl_parametres[14].output        = FALSE

        vl_parametres[15].type  = SYB#CHAR_
        vl_parametres[15].data  = vm_Lect_PMV[va_type].Alternat5
        vl_parametres[15].output        = FALSE

        vl_parametres[16].type  = SYB#INT1_
        vl_parametres[16].data  = vm_Lect_PMV[va_type].Clignotement1
        vl_parametres[16].output        = FALSE

        vl_parametres[17].type  = SYB#INT1_
        vl_parametres[17].data  = vm_Lect_PMV[va_type].Clignotement2
        vl_parametres[17].output        = FALSE

        vl_parametres[18].type  = SYB#INT1_
        vl_parametres[18].data  = vm_Lect_PMV[va_type].Clignotement3
        vl_parametres[18].output        = FALSE

        vl_parametres[19].type  = SYB#INT1_
        vl_parametres[19].data  = vm_Lect_PMV[va_type].Clignotement4
        vl_parametres[19].output        = FALSE

        vl_parametres[20].type  = SYB#INT1_
        vl_parametres[20].data  = vm_Lect_PMV[va_type].Clignotement5
        vl_parametres[20].output        = FALSE

        vl_parametres[21].type  = SYB#INT1_

        vl_parametres[21].data  = vm_Lect_PMV[va_type].Flash
        vl_parametres[21].output        = FALSE

        vl_parametres[22].type  = SYB#INT1_
        vl_parametres[22].data  = vm_Lect_PMV[va_type].Priorite
        vl_parametres[22].output        = FALSE

        vl_parametres[23].type  = SYB#INT4_
        vl_parametres[23].data  = vm_Lect_PMV[va_type].DistanceEvt
        vl_parametres[23].output        = FALSE

        vl_parametres[24].type  = SYB#INT1_
        vl_parametres[24].data  = CM_NO_SEUIL                    'Depassement seuil
        vl_parametres[24].output        = FALSE

        vl_parametres[25].type  = SYB#INT4_
        vl_parametres[25].data  = SYSTEM_VAR@(vg_site)
        vl_parametres[25].output        = FALSE

        vl_parametres[26].type  = SYB#INT2_
	   vl_parametres[26].data  = vm_Lect_PMV[va_type].Dest1_proche       
        vl_parametres[26].output        = FALSE

        vl_parametres[27].type  = SYB#INT2_
        vl_parametres[27].data  = vm_Lect_PMV[va_type].Dest1_loin
        vl_parametres[27].output        = FALSE

        vl_parametres[28].type  = SYB#INT2_
        vl_parametres[28].data  = vm_Lect_PMV[va_type].Dest2_proche
        vl_parametres[28].output        = FALSE

        vl_parametres[29].type  = SYB#INT2_
        vl_parametres[29].data  = vm_Lect_PMV[va_type].Dest2_loin
        vl_parametres[29].output        = FALSE

     if (va_arret <> CM_AFF_TDP)
        {
                vl_parametres[30].type  = SYB#INT4_
                vl_parametres[30].data  = 0
                vl_parametres[30].output        = TRUE
	
                IF COM05_SQL_Procedure
	               (XZAC82_Commande_PMVA,vl_parametres,vl_resultats,C_MODULE) <> COM_OK
                {
                        vl_tptext = "Status : "
                        DB_CTRL_TITLE@(vm_fenetre,"LI_status",vl_tptext)
                        RETURN (COM_NOK)
                }
        		vm_Lect_PMV[va_type].NumeroAction = vl_resultats.return_parameters[0]
        }

        if (va_arret =  CM_AFF_TDP)
        {
		IF (vm_auto=0)
		{
			vl_cr = COM05_SQL_Procedure(XZAC682_Commande_PMVA_TDP,vl_parametres,vl_resultats,C_MODULE)
		}
		ELSE
		{
			vl_parametres = COM15_Parametres_Requete ( {
					{ FALSE, SYB#INT2_, vm_Lect_PMV[va_type].NumEqt },
					{ FALSE, SYB#INT1_, vm_Config_PMV[vm_Lect_PMV[va_type].NumEqt].sitegestion },
					{ FALSE, SYB#INT1_, XDC_VRAI },
					{ FALSE, SYB#CHAR_, vm_Lect_PMV[va_type].Message1 },
					{ FALSE, SYB#CHAR_, vm_Lect_PMV[va_type].Message2 },
					{ FALSE, SYB#CHAR_, vm_Lect_PMV[va_type].Message3 },
					{ FALSE, SYB#CHAR_, vm_Lect_PMV[va_type].Message4 },
					{ FALSE, SYB#CHAR_, vm_Lect_PMV[va_type].Message5 },
					{ FALSE, SYB#INT2_, vm_Lect_PMV[va_type].Dest1_proche },
					{ FALSE, SYB#INT2_, vm_Lect_PMV[va_type].Dest1_loin },
					{ FALSE, SYB#INT2_, vm_Lect_PMV[va_type].Dest2_proche },
					{ FALSE, SYB#INT2_, vm_Lect_PMV[va_type].Dest2_loin },
					{ TRUE, SYB#INT4_, NULL },
					{ TRUE, SYB#INT1_, NULL },
					{ FALSE, SYB#INT2_, 0 },
					{ FALSE, SYB#CHAR_, SYSTEM_VAR@(vg_nom_site) }
				} )
			vl_cr = COM05_SQL_Procedure(XZAC840_Mise_Au_Neutre_PMVA,vl_parametres,vl_resultats,C_MODULE)
			vm_Lect_PMV[va_type].NumeroAction = vl_resultats.return_parameters[0]
		}

                IF (vl_cr <> COM_OK)
                {
                        vl_tptext = "Status : "
                        DB_CTRL_TITLE@(vm_fenetre,"LI_status",vl_tptext)
                        RETURN (COM_NOK)
                }
        }
	vl_tptext = "Status : Commande envoyee ..."
 	DB_CTRL_TITLE@(vm_fenetre,"LI_status",vl_tptext)

	RETURN (COM_OK)

ENDMACRO 


/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :	Arret du PMV
*
*  ----------------------------------------------------------------------------
*/

MACRO ITMA_TPMVA_Commande_Fin_PMVA_PA(va_type)

/*
* ARGUMENTS EN ENTREE : 
*		va_numero		:	le numero du PMV traite
*
*
* ARGUMENTS EN SORTIE : aucun
*
*
* CODE RETOUR		: COM_OK en cas d'execution correcte, COM_NOK sinon.
*
*
* CONDITION D'UTILISATION
*   ITMA_TPM_pilotage_PMV_PA
*
*
* FONCTION
*    Arret du PMV.
*
---------------------------------------------------------------------------- */

	VAR FORMAT SQL_Procedure_Params@ vl_parametres
	VAR FORMAT SQL_Procedure_Result@ vl_resultats
	

	VAR		vl_heure
	var		vl_tptext		' zone de text tampon
	var		vl_type_extinct
	var		vl_NumActionEnCours
	var		vl_Type_Neutre_Commande
	var		vl_cr

	/*A test les droits d'acces √  cette fonction */
     if NOT(COM04_Operateur_A_Le_Droit_De(XDC_FAM_EXPLOITATION_DISTRICT)) and
       NOT(COM04_Operateur_A_Le_Droit_De(XDC_FAM_EXPLOITATION_CI)) and
	  NOT(COM04_Operateur_A_Le_Droit_De(XDC_FAM_EXPLOITATION_PC2))
	{
		ITMA_TPMVA_Acces_interdit_PA("ITMA_TPM_arret_PMV_PA")
		RETURN(COM_NOK)
	}

	if va_type>3 or va_type<1
	{
		vl_tptext = "Commande_fin_PMV("++va_type++") refusee"
		COM01_Trace(0,vl_tptext)
		RETURN(COM_NOK)
	}

	/*
	if SYSTEM_VAR@(vg_site) = XDC_CI and NOT vm_mode_formation
	{
		if NOT ITMA_COM_District_pilotable(
			vm_Config_PMV[vm_Lect_PMV[va_type].NumEqt].sitegestion, 
			XDC_LIB_PMV, TRUE,
			vm_Config_PMV[vm_Lect_PMV[va_type].NumEqt].Identifiant) 
		{ 
			RETURN(COM_NOK)
 		}
 	}
	*/

	if (vm_Lect_PMV[va_type].TypeAffichage = 1) vl_type_extinct = XDC_PMV_DEFAUT
	if (vm_Lect_PMV[va_type].TypeAffichage = 2) vl_type_extinct = XDC_PMV_HEURE
	if (vm_Lect_PMV[va_type].TypeAffichage = 3) 
	{
		INFO_MESSAGE@("Affichage temperature interdit")
		COM01_Trace(0,"Affichage temperature refuse")
		RETURN(COM_NOK)
		vl_type_extinct = XDC_PMV_TEMPERATURE
	}
	if (vm_Lect_PMV[va_type].TypeAffichage = 4) vl_type_extinct = XDC_PMV_ETEINDRE
	if (vm_Lect_PMV[va_type].TypeAffichage = 0) vl_type_extinct = XDC_PMV_HEURE


	/*A trace de l'appel de procedure */
	vl_heure = COM09_Date_Courante(TRUE)  
	vl_tptext = "--> XZAC61_Commande_Fin_PMV"
	COM01_Trace(0,vl_tptext)


	vl_parametres[0].type	= SYB#INT4_
	vl_parametres[0].data	= vm_Lect_PMV[va_type].NumEqt
	vl_parametres[0].output	= FALSE

	vl_parametres[1].type	= SYB#INT4_
	vl_parametres[1].data	= vm_Config_PMV[vm_Lect_PMV[va_type].NumEqt].sitegestion
	vl_parametres[1].output	= FALSE

	vl_parametres[2].type	= SYB#DATETIME_
	vl_parametres[2].data	= vl_heure
	vl_parametres[2].output	= FALSE

	vl_parametres[3].type	= SYB#INT2_
	vl_parametres[3].data	= vl_type_extinct
	vl_parametres[3].output	= FALSE

	vl_tptext =  " vl_type_extinct = "++ vl_type_extinct
     COM01_Trace(0,vl_tptext)

	vl_tptext = "Status : Arret demandee ..."
 	DB_CTRL_TITLE@(vm_fenetre,"LI_status",vl_tptext)

	IF (vl_type_extinct = XDC_PMV_DEFAUT)
	{
		vl_parametres = COM15_Parametres_Requete ( {
				{ FALSE, SYB#INT2_, vm_Lect_PMV[va_type].NumEqt },
				{ FALSE, SYB#INT1_, vm_Config_PMV[vm_Lect_PMV[va_type].NumEqt].sitegestion },
				{ FALSE, SYB#INT1_, XDC_VRAI },
				{ FALSE, SYB#CHAR_, XDC_CHAINE_VIDE },
				{ FALSE, SYB#CHAR_, XDC_CHAINE_VIDE },
				{ FALSE, SYB#CHAR_, XDC_CHAINE_VIDE },
				{ FALSE, SYB#CHAR_, XDC_CHAINE_VIDE },
				{ FALSE, SYB#CHAR_, XDC_CHAINE_VIDE },
				{ FALSE, SYB#INT2_, XDC_DTP_AUCUNE },
				{ FALSE, SYB#INT2_, XDC_DTP_AUCUNE },
				{ FALSE, SYB#INT2_, XDC_DTP_AUCUNE },
				{ FALSE, SYB#INT2_, XDC_DTP_AUCUNE },
				{ TRUE, SYB#INT4_, NULL },
				{ TRUE, SYB#INT1_, NULL },
				{ FALSE, SYB#INT2_, 0 },
				{ FALSE, SYB#CHAR_, SYSTEM_VAR@(vg_nom_site) }
			} )
		vl_cr = COM05_SQL_Procedure(XZAC840_Mise_Au_Neutre_PMVA,vl_parametres,vl_resultats,C_MODULE)
		vm_Lect_PMV[va_type].NumeroAction = vl_resultats.return_parameters[0]
	}
	ELSE
	{
		vl_cr = COM05_SQL_Procedure (XZAC84_Commande_Fin_PMVA,vl_parametres,vl_resultats,C_MODULE)
		vm_Lect_PMV[va_type].NumeroAction = 0
	}

	IF (vl_cr <> COM_OK)
	{
		vl_tptext = "Status : erreur arret"
 		DB_CTRL_TITLE@(vm_fenetre,"LI_status",vl_tptext)
		RETURN (COM_NOK)
	}

	vl_tptext = "Status : arret PMV effectue..."
 	DB_CTRL_TITLE@(vm_fenetre,"LI_status",vl_tptext)

	RETURN (COM_OK)

ENDMACRO 



/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :	Lecture de la proposition d'affichage du PMV
*
*  ----------------------------------------------------------------------------
*/

MACRO ITMA_TPMVA_Lire_Prop_PMVA_PA(va_numero,va_NumPA,va_Ordre)

/*
* ARGUMENTS EN ENTREE : 
*		va_numero		:	le numero du PMV traite
*		va_NumPA		:	le numero du Plan d'action
*		va_Ordre		:	le numero d'ordre
*
*
* ARGUMENTS EN SORTIE : 
*		vm_Lect_PMV[va_numero]	:	le tableau contenant les infos pour le PMV
*
*
* CODE RETOUR		: COM_OK en cas d'execution correcte, COM_NOK sinon.
*
*
* CONDITION D'UTILISATION
*   ITMA_TPM_pilotage_PMV_PA
*
*
* FONCTION
*   	Lecture de la proposition d'affichage du PMV.
*
---------------------------------------------------------------------------- */

/*A Description des procedures sotckees √  appeler
 * ---------------------------------------------*/
INCLUDE "../inc/xzao411sp.h"
INCLUDE "../inc/xzac01sp.h"
INCLUDE "../inc/xzac61sp.h"
INCLUDE "../inc/xzat01sp.h"
INCLUDE "../inc/xzat05sp.h"
INCLUDE "../inc/xzap12sp.h"

	VAR	FORMAT SQL_Procedure_Params@ vl_parametres
	VAR	FORMAT SQL_Procedure_Result@ vl_resultats
	VAR	vl_select
	VAR	vl_objet
	VAR	vl_indice	'Indice de parcours des parametres d'entree d'une procedure stockee
	var	vl_tptext	' zone de text tampon
	var 	flag_affichage_tdp  /* si heure comprise entre 06h et 21h alors tdp remplace neutre */
	var 	ll_lignes_dest_tdp
	var	vl_jour,vl_mois,vl_annee,vl_heure,vl_min,vl_sec
	var	vl_NumDest

	flag_affichage_tdp = 0
	if va_numero>3 or va_numero<1
	{
		vl_tptext = "Lire_Prop_PMV("++va_numero++") refusee"
		COM01_Trace(0,vl_tptext)
		RETURN(COM_NOK)
	}

	/*A trace de l'appel de procedure */
	vl_tptext =  "--> XZAP12_Lire_Prop_PMV"
	COM01_Trace(0,vl_tptext)

	IF (va_Ordre=0)
		RETURN (COM_NOK)

	vm_Lect_PMV[va_numero].Horodate = COM09_Date_Courante(TRUE)
	vm_Lect_PMV[va_numero].Operateur = vm_NomOperateur

	vl_indice = 0

	vl_parametres[vl_indice].type	= SYB#INT4_
	vl_parametres[vl_indice].data	= va_NumPA+0
	vl_parametres[vl_indice].output	= FALSE
	
	vl_indice = vl_indice +1

	vl_parametres[vl_indice].type	= SYB#INT2_
	vl_parametres[vl_indice].data	= va_Ordre+0
	vl_parametres[vl_indice].output	= FALSE



	IF COM05_SQL_Procedure 
			("XZAP30",vl_parametres,vl_resultats,C_MODULE) <> COM_OK
    	{RETURN (COM_NOK)}

	vl_select = vl_resultats.select_results[0,0]
	vm_Lect_PMV[va_numero].Remarque	= vl_select[0]
	vm_Lect_PMV[va_numero].NumEqt 	= vl_select[1]+0
	vm_Lect_PMV[va_numero].Explication	= vl_select[2]

	if (va_ordre>=C_EXTINCTION)
		vm_arret=CM_AFF_NEUTRE
	else
		vm_arret=CM_AFF_TEXTE

	ITMA_TPMVA_Tabuler_ligne_PA(SUBSTRING@(vl_select[3],1,15),vl_tptext,15)
	vm_Lect_PMV[va_numero].Message1 	= vl_tptext
	ITMA_TPMVA_Tabuler_ligne_PA(SUBSTRING@(vl_select[4],1,15),vl_tptext,15)
	vm_Lect_PMV[va_numero].Message2 	= vl_tptext
	ITMA_TPMVA_Tabuler_ligne_PA(SUBSTRING@(vl_select[5],1,15),vl_tptext,15)
	vm_Lect_PMV[va_numero].Message3 	= vl_tptext
	ITMA_TPMVA_Tabuler_ligne_PA(SUBSTRING@(vl_select[6],1,15),vl_tptext,15)
	vm_Lect_PMV[va_numero].Message4 	= vl_tptext
	ITMA_TPMVA_Tabuler_ligne_PA(SUBSTRING@(vl_select[7],1,15),vl_tptext,15)
	vm_Lect_PMV[va_numero].Message5 	= vl_tptext
	ITMA_TPMVA_Tabuler_ligne_PA(SUBSTRING@(vl_select[8],1,15),vl_tptext,15)
	vm_Lect_PMV[va_numero].Alternat1 	= vl_tptext
	ITMA_TPMVA_Tabuler_ligne_PA(SUBSTRING@(vl_select[9],1,15),vl_tptext,15)
	vm_Lect_PMV[va_numero].Alternat2 	= vl_tptext
	ITMA_TPMVA_Tabuler_ligne_PA(SUBSTRING@(vl_select[10],1,15),vl_tptext,15)
	vm_Lect_PMV[va_numero].Alternat3 	= vl_tptext
	ITMA_TPMVA_Tabuler_ligne_PA(SUBSTRING@(vl_select[11],1,15),vl_tptext,15)
	vm_Lect_PMV[va_numero].Alternat4 	= vl_tptext
	ITMA_TPMVA_Tabuler_ligne_PA(SUBSTRING@(vl_select[12],1,15),vl_tptext,15)
	vm_Lect_PMV[va_numero].Alternat5 	= vl_tptext
	vm_Lect_PMV[va_numero].flash	= vl_select[13]
	vm_Lect_PMV[va_numero].Priorite	= vl_select[14]
	vm_Lect_PMV[va_numero].DistanceEvt	= vl_select[15]
	vm_Lect_PMV[va_numero].Identifiant	= vm_Config_PMV[vl_select[1]+0].Identifiant
	vm_Lect_PMV[va_numero].SiteGestion	= vm_Config_PMV[vl_select[1]+0].SiteGestion
	vm_Lect_PMV[va_numero].Dest1_proche = vl_select[16]
	vm_Lect_PMV[va_numero].Dest1_loin = vl_select[17]
	vm_Lect_PMV[va_numero].Dest2_proche = vl_select[18]
	vm_Lect_PMV[va_numero].Dest2_loin = vl_select[19]

	/*Condition sur l'heure */
	COM14_Valeurs_Horodate(COM09_Date_Courante(),vl_jour,vl_mois,vl_annee,vl_heure,vl_min,vl_sec)
	if (vl_heure <> NULL)
	{
		if ((vl_heure >= 6) and (vl_heure <= 20))
		{	flag_affichage_tdp = 1 }
	}
	else
	{	
		INFO_MESSAGE@("Date incorrecte, parametre heure mal interprete")
		RETURN (COM_NOK)
	}
	
	/*si condition sur l'heure ok et ordre d'extinction du PMV, on recherche la ZDP */
	if ((flag_affichage_tdp = 1) and (va_Ordre >= C_EXTINCTION))
	{
		vl_objet = "BO_"++va_numero++"_Arret"
		/*si on n est pas en pilotage auto alors maj bouton sinon memorisation ds variable */
		if (vm_auto=0 )
			DB_CTRL_VALUE@(vm_fenetre,vl_objet,CM_AFF_TDP)
		else
			vm_arret=CM_AFF_TDP
		ITMA_TPMVA_Liste_Destination_PMVA ( vm_Lect_PMV[va_numero].NumEqt,
                                                        vl_NumDest, vm_Destination )

		if ( vl_NumDest[0] + 0 <> 0 )
		{
			vm_Lect_PMV[va_numero].TypeAffichage = CM_AFF_TDP

			ITMA_TPMVA_Lignes_Destinations (vm_Destination, ll_lignes_dest_tdp)
			vm_Lect_PMV[va_numero].Message1 = UPPERCASE@(ll_lignes_dest_tdp[0])
			vm_Lect_PMV[va_numero].Message2 = UPPERCASE@(ll_lignes_dest_tdp[1])
			vm_Lect_PMV[va_numero].Message3 = UPPERCASE@(ll_lignes_dest_tdp[2])
			vm_Lect_PMV[va_numero].Message4 = UPPERCASE@(ll_lignes_dest_tdp[3])
			vm_Lect_PMV[va_numero].Message5 = UPPERCASE@(ll_lignes_dest_tdp[4])

			vm_Lect_PMV[va_numero].Dest1_proche        = vl_NumDest[0] + 0
                                        vm_Lect_PMV[va_numero].Dest1_loin  = vl_NumDest[1] + 0
                                        vm_Lect_PMV[va_numero].Dest2_proche        = vl_NumDest[2] + 0
                                        vm_Lect_PMV[va_numero].Dest2_loin  = vl_NumDest[3] + 0

                                        vm_Lect_PMV[va_numero].Alternat1   = ""
                                        vm_Lect_PMV[va_numero].Alternat2   = ""
                                        vm_Lect_PMV[va_numero].Alternat3   = ""
                                        vm_Lect_PMV[va_numero].Alternat4   = ""
                                        vm_Lect_PMV[va_numero].Alternat5   = ""

					ITMA_TPMVA_Demande_Calcul_TDP_PMVA ( vm_Lect_PMV[va_numero].NumEqt,
                                                vm_Lect_PMV[va_numero].Dest1_proche, 
						vm_Lect_PMV[va_numero].Dest1_loin, 
						vm_Lect_PMV[va_numero].Dest2_proche, 
						vm_Lect_PMV[va_numero].Dest2_loin,
						vm_Lect_PMV[va_numero].SiteGestion )

						
		}
		else
		{/*	INFO_MESSAGE@("Le resultat de recherche des destinations tdp est infructueux")*/
			vm_Lect_PMV[va_numero].TypeAffichage = vm_arret 
			
			/*si on n'est pas en pilotage auto alors maj IHM sinon memorisation ds variable */
			if (vm_auto=0 )
				ITMA_TPMVA_Reset_PMVA_PA(va_numero,CM_AFF_NEUTRE)
			else
				vm_arret=CM_AFF_NEUTRE

		}
	}

	RETURN (COM_OK)

ENDMACRO



/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :	Retourne un message √  l'operateur et trace l'acc√®s interdit
*				√  une macro.
*
* ----------------------------------------------------------------------------*/

MACRO ITMA_TPMVA_Acces_interdit_PA(va_NomMacro)

/*-----------------------------------------------------------------------------
* ARGUMENTS EN ENTREE : 
*		va_NomMacro	:	le nom de la macro interdite
*
* ARGUMENTS EN SORTIE : aucun
*
* CODE RETOUR	: COM_OK en cas d'execution correcte, COM_NOK sinon.

* CONDITION D'UTILISATION :
*   appel d'une macro avec les droits d'acc√®s insuffisant.
*
* FONCTION :
*	Retourne un message √  l'operateur et trace l'acc√®s interdit √  une macro
*---------------------------------------------------------------------------- */

	/*A message d'info √  l'operateur */
	var		vl_tptext			' zone de text tampon
	
	vl_tptext = "L'utilisateur " ++vm_NomOperateur ++ " n'a pas les droits suffisants" ++ NUM_TO_STRING@(10) ++ "pour la fonction : " ++ va_NomMacro
	info_message@(vl_tptext)


ENDMACRO



/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :	Lecture des equipements disponibles
*
*  ----------------------------------------------------------------------------
*/

MACRO ITMA_TPMVA_Liste_Eqt_Dispo_PA(va_type,va_District)

/*
* ARGUMENTS EN ENTREE : 
*		va_type		:	le type d'equipement
*		va_District		:	le numero du district
*
*
* ARGUMENTS EN SORTIE : 
*		ListeEqts		: la liste des equipements correspondants
*
*
* CODE RETOUR		: COM_OK en cas d'execution correcte, COM_NOK sinon.
*
*
* CONDITION D'UTILISATION
*   ITMA_TPM_pilotage_PMV_PA
*
*
* FONCTION
*   	Lecture des equipements en disponibilites.
*
---------------------------------------------------------------------------- */
	var	vl_Liste		' liste formattee
	var	i, j	, k		' index de loop
	var	vl_trouve		
	var	vl_taille		' taille de la table de resultat
	var	vl_tptext		' zone de text tampon
	var vl_district
	var format COM_Donnees_Equipements vl_info_equip ' liste des differents PMV retourne par XZAT01

	/*A trace de l'appel de procedure */
	vl_tptext =  "--> XZAT01_Liste_Eqt_Dispo("++va_type++","++va_District++",...)"
	COM01_Trace(0,vl_tptext)


	if va_District = XDC_CI
	{	vl_District	= NULL	}
	else
	{	vl_District	= va_District	}

	ITMA_COM_Lire_Equipements (XDC_EQT_PMVA, vl_District,
				 XDC_EQT_MINEUR, XDC_EQT_MINEUR,
				 XDC_EQT_HS + XDC_EQT_MAJEUR + XDC_EQT_CRITIQUE + XDC_EQT_DESACTIVE + XDC_EQT_INHIBE, 0,vl_info_equip,
			C_MODULE)

	/*A Construction de la liste des equipements */
	k = 0
	if  IS_ARRAY@(vl_info_equip)
	{
	  for i = 0 to ARRAY_SIZE@(vl_info_equip) - 1	
	   if (vm_District <> XDC_CI) OR ((vm_District = XDC_CI) and 
		 (ITMA_COM_District_pilotable(vl_info_equip[i].sitegestion, 
			XDC_LIB_PMVA,FALSE,NULL)) )
		{
		vl_Liste[k] = vm_Config_PMV[vl_info_equip[i].numero].Identifiant
		k = k + 1
		}
	    next i
	}
	else
	{
		vl_Liste[0]		= 	""
		info_message@("Pas de PMVA diponible dans cette rÈgion...")
	}

	RETURN (vl_Liste)

ENDMACRO

/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :	Reset de la table d'etat de l'equipement
*
*  ----------------------------------------------------------------------------
*/

MACRO ITMA_TPMVA_Reset_etat_PMVA

/*
* ARGUMENTS EN ENTREE : aucun
*
*
* ARGUMENTS EN SORTIE : aucun
*
*
* CODE RETOUR		: COM_OK en cas d'execution correcte, COM_NOK sinon.
*
*
* CONDITION D'UTILISATION
*   ITMA_PMV
*
*
* FONCTION
*   Reset de la table d'etat de l'equipement.
*
---------------------------------------------------------------------------- */

	var i 

	for i = 0 to ARRAY_SIZE@(vm_Config_PMV)-1
	   if (vm_Config_PMV[i].sitegestion = vm_District) or ((vm_District = XDC_CI) /*!! and 
		 (ITMA_COM_District_pilotable(vm_Config_PMV[i].sitegestion, 
			XDC_LIB_PMVA,FALSE,NULL)) */ )
	   {
		vm_etat_PMV[i].Horodate 			=	COM09_Date_Courante(TRUE)
		vm_etat_PMV[i].NumEqt 			=	i		
		vm_etat_PMV[i].Operateur 		= 	""			
		vm_etat_PMV[i].Identifiant 		= 	vm_Config_PMV[i].Identifiant			
		vm_etat_PMV[i].DispoPMV 			= 	0			
  	 	vm_etat_PMV[i].Message1			=	""					
  	 	vm_etat_PMV[i].Message2			=	""					
  	 	vm_etat_PMV[i].Message3			=	""					
  	 	vm_etat_PMV[i].Message4			=	""					
  	 	vm_etat_PMV[i].Message5			=	""					
		vm_etat_PMV[i].Alternat1			=	""					
		vm_etat_PMV[i].Alternat2			=	""				
		vm_etat_PMV[i].Alternat3			=	""				
		vm_etat_PMV[i].Alternat4			=	""				
		vm_etat_PMV[i].Alternat5			=	""				
  		vm_etat_PMV[i].Flash			=	XDC_PMV_PASFLASH			
  	 	vm_etat_PMV[i].Clignotement1		=	XDC_PMV_PASCLIGNO	
  		vm_etat_PMV[i].Clignotement2		=	XDC_PMV_PASCLIGNO	
    		vm_etat_PMV[i].Clignotement3		=	XDC_PMV_PASCLIGNO	
    		vm_etat_PMV[i].Clignotement4		=	XDC_PMV_PASCLIGNO	
    		vm_etat_PMV[i].Clignotement5		=	XDC_PMV_PASCLIGNO	
		vm_etat_PMV[i].fmc_liee			=	""			
		vm_etat_PMV[i].Remarque			=	""			
		vm_etat_PMV[i].Explication		=	""			
		vm_etat_PMV[i].Numero_Evt		=	0		
		vm_etat_PMV[i].Cle_Evt			=	0			
		vm_etat_PMV[i].Priorite			=	0			
		vm_etat_PMV[i].DistanceEvt		=	XDC_DISTANCE_INCONNUE		
		vm_etat_PMV[i].NumeroAction		=	0	
  	 	vm_etat_PMV[i].AltDirection		=	""					
		vm_etat_PMV[i].Dest1_proche		=	0					
  	 	vm_etat_PMV[i].Dest1_loin		=	0					
  	 	vm_etat_PMV[i].TypeAffichage		=	CM_AFF_TEXTE					
  	   }
	next i

ENDMACRO


 

/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :	Reset de la table d'etat de l'equipement
*
*  ----------------------------------------------------------------------------
*/

MACRO ITMA_TPMVA_Reset_Lect_PMVA

/*
* ARGUMENTS EN ENTREE : aucun
*
*
* ARGUMENTS EN SORTIE : aucun
*
*
* CODE RETOUR		: COM_OK en cas d'execution correcte, COM_NOK sinon.
*
*
* CONDITION D'UTILISATION
*   ITMA_PMV
*
*
* FONCTION
*   Reset de la table d'etat de l'equipement.
*
---------------------------------------------------------------------------- */

	var i 

	for i = 0 to 3
		vm_Lect_PMV[i].Horodate 			=	COM09_Date_Courante(TRUE)
		vm_Lect_PMV[i].NumEqt 			=	0		
		vm_Lect_PMV[i].Operateur 		= 	""			
		vm_Lect_PMV[i].Identifiant 		= 	""			
		vm_Lect_PMV[i].DispoPMV 			= 	0			
  	 	vm_Lect_PMV[i].Message1			=	""					
  	 	vm_Lect_PMV[i].Message2			=	""					
  	 	vm_Lect_PMV[i].Message3			=	""					
  	 	vm_Lect_PMV[i].Message4			=	""					
  	 	vm_Lect_PMV[i].Message5			=	""					
		vm_Lect_PMV[i].Alternat1			=	""					
		vm_Lect_PMV[i].Alternat2			=	""				
		vm_Lect_PMV[i].Alternat3			=	""				
		vm_Lect_PMV[i].Alternat4			=	""				
		vm_Lect_PMV[i].Alternat5			=	""				
  		vm_Lect_PMV[i].Flash			=	XDC_PMV_PASFLASH			
  	 	vm_Lect_PMV[i].Clignotement1		=	XDC_PMV_PASCLIGNO	
  		vm_Lect_PMV[i].Clignotement2		=	XDC_PMV_PASCLIGNO	
    		vm_Lect_PMV[i].Clignotement3		=	XDC_PMV_PASCLIGNO	
    		vm_Lect_PMV[i].Clignotement4		=	XDC_PMV_PASCLIGNO	
    		vm_Lect_PMV[i].Clignotement5		=	XDC_PMV_PASCLIGNO	
		vm_Lect_PMV[i].fmc_liee			=	""			
		vm_Lect_PMV[i].Remarque			=	""			
		vm_Lect_PMV[i].Explication		=	""			
		vm_Lect_PMV[i].Numero_Evt		=	0		
		vm_Lect_PMV[i].Cle_Evt			=	0			
		vm_Lect_PMV[i].Priorite			=	0			
		vm_Lect_PMV[i].DistanceEvt		=	XDC_DISTANCE_INCONNUE		
		vm_Lect_PMV[i].NumeroAction		=	0	
  	 	vm_Lect_PMV[i].AltDirection		=	""					
		vm_Lect_PMV[i].Dest1_proche		=	0					
  	 	vm_Lect_PMV[i].Dest1_loin		=	0
  	 	vm_etat_PMV[i].TypeAffichage		=	CM_AFF_TEXTE					
	next i

ENDMACRO

/*X*/
/* ------------------------------------------------------------------------------
* SERVICE RENDU :       Envoi une demende de calcul de TDP.
*
* -------------------------------------------------------------------------------*/

MACRO ITMA_TPMVA_Demande_Calcul_TDP ( va_NumPMV, va_NumDest, va_NumAltDest )

/*-------------------------------------------------------------------------------
* ARGUMENTS EN ENTREE :
*               va_NumPMV               :       Numero du PMV
*               va_NumDest      :       Numero de la destination
*               va_NumAltDest   :       Numero de la destination pour alternat
*
* ARGUMENTS EN SORTIE : aucun
*
* CODE RETOUR   : COM_OK en cas d'execution correcte, COM_NOK sinon.
*
* CONDITION D'UTILISATION :
*   ITMA_TPM
*
* FONCTION :
*   Envoi une demende de calcul de TDP.
* ------------------------------------------------------------------------------- */


	INCLUDE "../inc/xzat05sp.h"
	INCLUDE "../inc/xzao411sp.h"


        VAR     vl_cmd


        /*B preparation de la requete pour le coupleur */
        vl_cmd[0]=MTAR_MSG_EXEC

        /*B num de commande pour retour. Non utilise ici */
        vl_cmd[1]=1

        /*B fonction a executer */
        vl_cmd[2]=MTAR_FCT_XZEZ01

        /*B arguments */
        vl_cmd[3]=va_NumPMV++MTAR_CAR_SEPAR++va_NumDest++MTAR_CAR_SEPAR++va_NumAltDest

        /*B envoi de la commande a la tache ITMA_TAR01 */
        DB_SEND_POKE@(COM_CANAL_TAR01,vl_cmd)


/*B code retour OK */
RETURN(COM_OK)

ENDMACRO

