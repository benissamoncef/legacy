/* Fichier :  $Id: ITMA_TTU_HT.am,v 1.9 2009/06/12 10:10:54 gesconf Exp $      Release : $Revision: 1.9 $        Date : $Date: 2009/06/12 10:10:54 $
*/
/*A Description des constantes générales
 * ------------------------------------- */
DEFINE	C_MODULE		"MTTU"	' Nom du module
DEFINE	REP_CONFIG		"../fichiers/"
DEFINE	REP_RENOVE		"../fichiers/renov/"

DEFINE	POSX_BP_INDIVIDUEL	330
DEFINE	POSY_BP_INDIVIDUEL	665


/*A Description des modules à inclures 
* ---------------------------------------*/
INCLUDE	"dbase_.am"
INCLUDE	"../inc/ITMA_COM.h"
INCLUDE	"../inc/ITMA_TDO.h"
INCLUDE	"../inc/ITMA_TAR.h"
INCLUDE	"../../XDMICG/inc/xdc_ax.h"
INCLUDE	"../../XDMICG/inc/xzic_ax.h"
INCLUDE	"../inc/xzac102sp.h"
INCLUDE	"../inc/xzac103sp.h"
INCLUDE	"../inc/xzac634sp.h"


/*A Description des variables globales
 * ----------------------------------- */
var		vm_NomSite				' Nom du site
var		vm_District				' N° du district
var		vm_Eqp_HT		'fichier de config des eqp HT
var		vm_F_bouton		'fichier de config des boutons
var		vm_NumTube		'Numero du tube selectionné
var		vm_NumSequence		'Numero de la sequence selectionné
var		vm_seq_select		'sequence sélectionnée
var		vm_exe_seq_en_cours	'flag d'execution d'une sequence selectionné
var		vm_Sce_HT			'fichier de config des seq HT
var		vm_text			    'text en edition
var     vm_fenetre_TTU		'item de la fenetre du module
var		vm_Titre_Fenetre
var		vm_Nom_Fenetre
var		vm_messages_acceptes

var		vm_NumEvt 			' N° d'evenement
var		vm_CleEvt 			' Clé de l'evenement
var		vm_NumAction			' Numero d'action
var		vl_fmc			' libelle fmc à construire
var		vl_lib_fmc		' libelle fmc à construire

var		tl_data,tl_retour	' param. table evenements
var   	tm_liste_causes
var		tl_titres			' titre evenements

/*E*/
/*
-------------------------------------------------------------------------------
* GTIE *  PROJET MIGRAZUR
-------------------------------------------------------------------------------
* SOUS-SYSTEME  GESIHM
-------------------------------------------------------------------------------
* MODULE MTPM * FICHIER ITMA_TTU_HT.am
-------------------------------------------------------------------------------
* DESCRIPTION DU MODULE :
*
* IHM de Commande des eqp HT.
*
-------------------------------------------------------------------------------
* HISTORIQUE :
*
* A.Bertola 11/05/2007    : IHM supervision NICE en mode dégradé
* A.Bertola 13/11/2008    : correction pour pouvoir animer les lignes de tension
---------------------------------------------------------------------------- */
/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :	Commande des eqp HT
*
*  ----------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TTU_HT()

/*
* ARGUMENTS EN ENTREE :
* 
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Status OK ou NOK suivant résultat
*
* CONDITION D'UTILISATION
*   
*
* FONCTION
*    Pilote l'état des equipement HT
*
---------------------------------------------------------------------------- */
/*A Déclaration des variables statiques */
var vl_fenetre_active
var vl_tunnel
var	vl_color
var	vl_titre_fen
var i, j, vl_index, vl_index2
var	vl_controle_sortie
var vl_sens
var vl_F_tunnel
var vl_sequence
var vl_HT
var tl_color
var tl_param
var vl_Xpos, vl_Ypos
var vl_retour
var vl_meme_sens
VAR vl_trigramme
var vl_ligne
var vl_taille, vl_taille2
var vl_F_tpm
var vl_tab
var vl_panneau
var vl_etat
var vl_message,vl_mess, vl_messageDecoupe
var vl_cmd
var vl_renove
var vl_rang
var vl_icon
var vl_text
var vl_scenario_en_cours
var vl_objet

/*A Traitements en cas d'erreur durant l'initialisation :
*   informer l'operateur, tracer l'erreur et abandonner
* ------------------------------------------------------*/
ON ERROR 
{
	ERROR_BOX@
	COM01_Trace (COM_WARNING, COM03_Message_Erreur (C_MODULE))
	RETURN(COM_NOK)
}
SET_SYSTEM_VAR@("vg_domaine_courant", "ht")

vm_NomSite = SYSTEM_VAR@("vg_nom_site")
vm_District = SYSTEM_VAR@("vg_site")

INSTALL_FILE@("ITMA_TTU_eclairage.elo")

vl_HT = TRUE
while (vl_HT)


/*A Chargement du fichier de config equipement HT */
vm_Eqp_HT = null
vl_F_tpm = READ_ASCII_FILE@(REP_RENOVE ++ "ConfigEqtHT.cfg")
vl_taille = ARRAY_SIZE@(vl_F_tpm) -1
vl_index = 1
for i = 0 to vl_taille
  vl_ligne = ARRAY_FROM_STRING@(vl_F_tpm[i],",")
  vl_tab = ARRAY_SIZE@(vl_ligne)
  if substring@(vl_F_tpm[i],1,1) <> "#" and vl_tab > 1
  {

	vl_taille2 = ARRAY_SIZE@(vl_ligne) -1
	for j = 0 to vl_taille2
	  if STRING_INDEX@(vl_F_tpm[i],  "->") <> 0
	  {
		vm_Eqp_HT[0,j]=TRIM@(TABS_TO_SPACES@(vl_ligne[j]))
	  }
	  else
		vm_Eqp_HT[vl_index,j]=TRIM@(TABS_TO_SPACES@(vl_ligne[j]))
	next j
	vl_index = vl_index + 1
  }
next i

vm_NumTube = SUBSTRING@(vm_Eqp_HT[0,0], 3)

/*B envoi du msg ouverture tunnel a la tache IHM principale */
vl_cmd = "HT"
DB_SEND_POKE@(MTTU_MSG_OUV_FENETRE,vl_cmd)

/*A Chargement de la fenetre & assignation des sockets 
*   -------------------------------------------------- */
vm_Nom_Fenetre = "ITMA_TTU_HT"
vm_fenetre_TTU = DB_LOAD@(vm_Nom_Fenetre)



'-- bouton Lier F.M.C.
DB_CREATE_CTRL@(vm_fenetre_TTU,3,"BP_lier","Lier F.M.C.",200,700,0)
DB_CTRL_BUTTON_TYPE@(vm_fenetre_TTU,"BP_lier",0)
DB_CTRL_HEIGHT@(vm_fenetre_TTU,"BP_lier",22)
DB_CTRL_WIDTH@(vm_fenetre_TTU,"BP_lier",66)
DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"BP_lier",True)

'-- Table des fiches
DB_CREATE_CTRL@(vm_fenetre_TTU,12,"TA_Evenements","",130,370,0)
DB_CTRL_HEIGHT@(vm_fenetre_TTU,"TA_Evenements",220)
DB_CTRL_WIDTH@(vm_fenetre_TTU,"TA_Evenements",739)

'-- Liste des fiches
DB_CREATE_CTRL@(vm_fenetre_TTU,7,"LI_Evenements","",131,390,0)

DB_CREATE_CTRL@(vm_fenetre_TTU,5,"Li_status2","Status :",510,660,0)


vm_messages_acceptes[0] = COM_CANAL_FIN
vm_messages_acceptes[1] = COM_CANAL_MTTU_ALM
vm_messages_acceptes[2] = COM_CANAL_MTTU_EQP_ENE
vm_messages_acceptes[3] = COM_CANAL_MTTU_DOM_ENE

DB_ACCEPT_POKES@ (vm_fenetre_TTU, vm_messages_acceptes)


/*A Positionnement de la fenetre  
*   --------------------------------------*/
DB_XPOS@(vm_fenetre_TTU, 0)
DB_YPOS@(vm_fenetre_TTU, 115)
DB_WIDTH@(vm_fenetre_TTU, 993)
'--DB_HEIGHT@(vm_fenetre_TTU, 715)
 
/*A affichage du titre de la boite 
*   -------------------------------- */
DB_TITLE@(vm_fenetre_TTU,"Vue des sources HT")
vm_Titre_Fenetre = "Vue des sources HT"

'' creation des equipements HT
ITMA_TTU_creation_eqp_HT

/*A Abonnement au differents services */ 
ITMA_TTU_Abt_Etat_Eqp_HT(XDC_DEBUT_ABONNEMENT_EQUEXT)

DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_sequence",True)

DB_CTRL_DISPLAY@(vm_fenetre_TTU,"BP_executer",True)
DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_executer",true)
DB_CTRL_DISPLAY@(vm_fenetre_TTU,"BP_lier",True)
DB_CTRL_DISPLAY@(vm_fenetre_TTU,"LI_Evenements",False)
DB_CTRL_DISPLAY@(vm_fenetre_TTU,"TA_Evenements",False)


/*A Effacer le display 'discordance sequence' */ 
DB_CTRL_DISPLAY@(vm_fenetre_TTU,"BP_defaut",False)


DB_DISPLAY_ONLY@(vm_fenetre_TTU,True)
DB_DISPLAY@(vm_fenetre_TTU)
DB_DISPLAY_ONLY@(vm_fenetre_TTU,False)

vl_fenetre_active = TRUE
/*A tant que la fenetre est active */
WHILE (vl_fenetre_active)

	
	/* affichage de la liste */
	DB_DISPLAY@(vm_fenetre_TTU)
	vl_titre_fen = DB_GET_TITLE@(vm_fenetre_TTU)
	''PROMOTE_DIALOG@(vl_titre_fen)

	/*A capture de l'evenement dans la BD TCA */
	vl_controle_sortie = DB_EXIT_CTRL@(vm_fenetre_TTU)

	/*A si l'evenement n'est pas un poke & verrou=vrai */
	if vl_controle_sortie<>"poke_" and SYSTEM_VAR@(vg_verrou)
		/*A reset de l'evenement */
		{ vl_controle_sortie = NULL }

	/* selon l'evenement */
	CASE OF vl_controle_sortie

	/*A sur action aide */
	CASE "BP_aide"
		COM33_Aide_Renov("ITMA_TTU_HT")

	/*A sur action lier FMC */
	CASE "BP_lier"

        '--vl_text = "Status : appel lien FMC"
 		'--DB_CTRL_TITLE@(vm_fenetre_TTU,"Li_status", vl_text)

		/*B on lance la tache de recherche d'evt cause*/
		tl_data=PEND_FOR_NEW_TASK@("ITMA_COM_Liste_Causes","ITMA_TTU_eclairage")
		tm_liste_causes=tl_data[0]

		/*B affiche la liste des evts a traiter*/
		DB_CTRL_DISPLAY@(vm_fenetre_TTU,"LI_Evenements",TRUE)
		DB_CTRL_DISPLAY@(vm_fenetre_TTU,"TA_Evenements",TRUE)
		DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"TA_Evenements",TRUE)
		DB_TABLE_ALLOW_COLUMN_RESIZING@(vm_fenetre_TTU,"TA_Evenements",True)
		DB_TABLE_SET_MARKER_WIDTH@(vm_fenetre_TTU, "TA_Evenements", 25)
		tl_titres[0] = COM_CAUSE_NUMERO,COM_CAUSE_LONG_NUMERO
		tl_titres[1] = COM_CAUSE_CLE,COM_CAUSE_LONG_CLE
		tl_titres[2] = COM_CAUSE_TYPE,COM_CAUSE_LONG_TYPE
		tl_titres[3] = COM_CAUSE_DATE,COM_CAUSE_LONG_DATE
		tl_titres[4] = COM_CAUSE_LOCALISATION,COM_CAUSE_LONG_LOCALISATION
		DB_TABLE_SET_DATA@(vm_fenetre_TTU,"TA_Evenements",tl_data[1],tl_titres)
		DB_TABLE_MARKER_PIXMAPS@(vm_fenetre_TTU, "TA_Evenements", 0, tl_data[2])

	/*B selection d'un element dans la liste des fiches a traiter*/	
  	CASE "TA_Evenements"
 		
      vl_text = "Status : selection evenement"
      DB_CTRL_TITLE@(vm_fenetre_TTU,"Li_status2", vl_text)

      tl_retour=ITMA_COM_Validite_Cause("ITMA_TTU_eclairage", vm_fenetre_TTU, tm_liste_causes)
      vm_NumEvt = tl_retour[0][0]
      vm_CleEvt = tl_retour[0][1]
      vl_fmc = tl_retour[1]
      vl_text=TRIM@(SUBSTRING@(vl_fmc,1,46))
      vl_fmc=vl_text ++ "  " ++ TRIM@(SUBSTRING@(vl_fmc,60,18))
      
      DB_CTRL_DISPLAY@(vm_fenetre_TTU,"LI_Evenements",FALSE)
      DB_CTRL_DISPLAY@(vm_fenetre_TTU,"TA_Evenements",FALSE)
      DB_CTRL_TITLE@(vm_fenetre_TTU,"Li_status2",vl_fmc)
      
      if vm_NumEvt = 0 or vm_CleEvt = 0 
        DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_executer",True)
      else
        DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_executer",False)


	/*A sur reception de poke */
	CASE "poke_"
	
		/*A suivant le canal de reception de poke */
		CASE OF DB_GET_POKE@(vm_fenetre_TTU)

		/*A si poke de fin de canal : fermeture de fenetre */
		CASE COM_CANAL_FIN
			/*A la fenetre n'est plus active */
			vl_fenetre_active = FALSE
			return

		/*A si poke de reception d'abonnement état eqp HT */
		CASE COM_CANAL_MTTU_EQP_ENE	

		 /*A capture du message */
		 vl_message = DB_GET_POKE_DATA@(vm_fenetre_TTU)
		 vl_messageDecoupe = ARRAY_FROM_STRING@(vl_message[0],"|")
		 vl_taille2 = ARRAY_SIZE@(vl_messageDecoupe)

		 /*A trace de la reception du message */
		 vm_text = COM09_Date_Courante() ++ "   MsgPoke MTTU_EQP_ENE : "
		 for i = 0 to vl_taille2 - 1
			vm_text = vm_text ++ vl_messageDecoupe[i] ++ " / "
		 next i
		 COM01_Trace(0,vm_text)

		 '-- parcours du tableau des messages
		 for i = 0 to vl_taille2 - 1
            
			/*A décomposition des messages en tableau */
			vl_mess = ARRAY_FROM_STRING@(vl_messageDecoupe[i],",")
    
			/*A reset de l'index */
			vl_index2 = -1

			/*A on  boucle sur tout les panneau présent sur l'IHM */
			if ( vl_mess[2] <> 0 )
			{
			  vl_taille = ARRAY_SIZE@(vm_F_bouton)
			  for j = 0 to vl_taille-1
				if ( vm_F_bouton[j,12] = vl_mess[2] and 
							vm_F_bouton[j,4] = vl_mess[3] )
				{						
 					vl_index2 = j
					break j
				}
			  next j
			}      

			/*A MAJ du panneau sur l'IHM (avec gestion defaut) */
			if vl_index2<>-1
			{
			 /* si c'est un equipement de type ligne de presence tension
		 	  on le traite de façon spécial car ils sont dejà existants 
			  dans l'IHM */
			  vl_objet = vm_Eqp_HT[vl_index2,14]
		 COM01_Trace(0,"vl_objet = " ++ vl_objet)
		 COM01_Trace(0,"vl_mess[3] = " ++ vl_mess[3])

			  if STRING_INDEX@(vl_objet,  "tension") <> 0
				ITMA_TTU_MAJ_ligne_tension_HT(vl_index2,vl_mess[4],"_etat")
			  else
				ITMA_TTU_MAJ_ID_eqp_HT(vl_index2,vl_mess)
			}
      
		 next i


		/*A si poke de reception état domaine energie HT */
		CASE COM_CANAL_MTTU_DOM_ENE	

			/*A capture du message */
			vl_message = DB_GET_POKE_DATA@(vm_fenetre_TTU)

			/*A trace de la reception du message */
			vm_text = COM09_Date_Courante() ++ "   MsgPoke MTTU_DOM_ENE : "
			vm_text =  vm_text ++ vl_message[0]
			COM01_Trace(0,vm_text)

			/* Recuperation du numero du scenario en cours */
			vl_scenario_en_cours = vl_message[3]
			
			/* Affichage du scenario en cours ou fin scenario */
			ITMA_TTU_maj_scenario_HT(vl_scenario_en_cours)
			
		ENDCASE

	/*A sur action BP_actuel */
	CASE "BP_actuel"
		info_message@("Zone correspondant à l'état actuel des panneaux ...")

	/*A sur action BP_nouveau */
	CASE "BP_nouveau"
		info_message@("Zone de commande des panneaux ...")

	/*A sur action quitter */
	CASE "BP_quitter"

		/*A la fenetre n'est plus active */
		vl_fenetre_active = FALSE
		vl_HT = FALSE
	ENDCASE

/*A fin tant que */
WEND

DB_CLOSE@()

/*B Fermer des abonnements */
ITMA_TTU_Abt_Etat_Eqp_HT(XDC_FERMER_ABONNEMENT_EQUEXT)
'--ITMA_TTU_Abt_Etat_Seq_HT(XDC_FERMER_ABONNEMENT_EQUEXT)
'--DELAY@(1)

/*A fin tant que */
WEND

RETURN


ENDMACRO


/* ----------------------------------------------------------------------------
* SERVICE RENDU : creation generique des equipements	
*
*  ----------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TTU_creation_eqp_HT()
var vl_taille
var i, j
var vl_num_eqp
var vl_type_eqp
var vl_numero
var vl_icon
var vl_xpos, vl_ypos, vl_xpos2, vl_ypos2
var vl_nom_tunnel
var vl_long
var vl_haut
var vl_color
var vl_titre,vl_titre2,vl_titre3,vl_titre4

/* creer les BP sequence, defaut et Exécuter */
DB_CREATE_CTRL@(vm_fenetre_TTU,3,"BP_executer","Executer",553,699,0)
DB_CTRL_BUTTON_TYPE@(vm_fenetre_TTU,"BP_executer",0)
DB_CTRL_HEIGHT@(vm_fenetre_TTU,"BP_executer",22)
DB_CTRL_WIDTH@(vm_fenetre_TTU,"BP_executer",70)
DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"BP_executer",True)

DB_CREATE_CTRL@(vm_fenetre_TTU,3,"BP_sequence","Appel scénario",643,699,0)
DB_CTRL_BUTTON_TYPE@(vm_fenetre_TTU,"BP_sequence",0)
DB_CTRL_HEIGHT@(vm_fenetre_TTU,"BP_sequence",22)
DB_CTRL_WIDTH@(vm_fenetre_TTU,"BP_sequence",116)
DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"BP_sequence",True)

DB_CREATE_CTRL@(vm_fenetre_TTU,3,"BP_defaut","pix_defaut",400,699,0)
DB_CTRL_BUTTON_TYPE@(vm_fenetre_TTU,"BP_defaut",4)
DB_CTRL_HEIGHT@(vm_fenetre_TTU,"BP_defaut",31)
DB_CTRL_WIDTH@(vm_fenetre_TTU,"BP_defaut",106)
DB_CTRL_RETURN_ON_CHANGE@(vm_fenetre_TTU,"BP_defaut",True)

/*A Créer et positionner les panneaux */
vl_color[0] = 255
vl_color[1] = 0,0,0
vl_color[0] = 1
vl_color[1] = 255,255,255

/*A Créer et positionner les panneaux */

vm_F_bouton = null
vl_taille = ARRAY_SIZE@(vm_Eqp_HT)-1
for i = 1 to vl_taille
	vl_numero = i
	vl_num_eqp = vm_Eqp_HT[vl_numero,4]
	vl_type_eqp = vm_Eqp_HT[vl_numero,3]
	
	vm_F_bouton[vl_numero,0]	= 0				' le n° du picto associé
	vm_F_bouton[vl_numero,1]	= vm_Eqp_HT[vl_numero,0] 'num eqt
	vm_F_bouton[vl_numero,2]	= vm_Eqp_HT[vl_numero,14] 'picto par defaut
	vm_F_bouton[vl_numero,3]	= vm_Eqp_HT[vl_numero,1]  'type (T ou E)
	vm_F_bouton[vl_numero,4]	= vm_Eqp_HT[vl_numero,4]  'n° eqt en base
	vm_F_bouton[vl_numero,5]	= vm_Eqp_HT[vl_numero,7] 'defaut critique 
										'ou nom objet présence tension
	vm_F_bouton[vl_numero,6]	= vm_Eqp_HT[vl_numero,8] 'defaut majeur
	vm_F_bouton[vl_numero,7]	= vm_Eqp_HT[vl_numero,9] 'defaut mineur
	vm_F_bouton[vl_numero,8]	= vm_Eqp_HT[vl_numero,10] 'hors service
	vm_F_bouton[vl_numero,9]	= vm_Eqp_HT[vl_numero,11] 'pas de defaut
	vm_F_bouton[vl_numero,10] = vm_Eqp_HT[vl_numero,12] 'mode local
	vm_F_bouton[vl_numero,11] = vm_Eqp_HT[vl_numero,13] 'mode distant
    vm_F_bouton[vl_numero,12] = vm_Eqp_HT[vl_numero,3]	'type equipement (SAE)

	vl_icon 	= vm_Eqp_HT[vl_numero,14]  'le picto à afficher par defaut
	vl_long 	= vm_Eqp_HT[vl_numero,15]  'longueur BP pour eqp sans picto
	vl_haut 	= vm_Eqp_HT[vl_numero,16]  'hauteur BP pour eqp sans picto
	vl_xpos 	= vm_Eqp_HT[vl_numero,5]	' la position X
	vl_ypos 	= vm_Eqp_HT[vl_numero,6]	' la position Y

	/* creation des objets cadre et mode local */
	vl_titre3 = "BP_cadre" ++ vl_numero
	DB_CREATE_CTRL@(vm_fenetre_TTU,6,vl_titre3,
			vm_Eqp_HT[vl_numero,11],vl_xpos-3,vl_ypos - 320-3,0)
	DB_CTRL_DISPLAY@(vm_fenetre_TTU,vl_titre3,FALSE)

	'' type de picto 40_40 = équipements HT sinon traits présence tension
	if STRING_INDEX@(vl_icon,"40_40") <> 0
	{
		vl_xpos2 = vl_xpos+50
		vl_ypos2 = vl_ypos - 290
		vl_titre4 = "BP_local" ++ vl_numero
		DB_CREATE_CTRL@(vm_fenetre_TTU,6,vl_titre4,
				vm_Eqp_HT[vl_numero,12],vl_xpos2,vl_ypos2,0)
		DB_CTRL_DISPLAY@(vm_fenetre_TTU,vl_titre4,FALSE)
	
		/* creation des objets BP commande et BP etat */
		'--vl_titre 	= "BP_cmd" ++ vl_numero
		vl_titre2 = "BP_panneau" ++ vl_numero
		/*DB_CREATE_CTRL@(vm_fenetre_TTU,3,vl_titre,vl_icon,vl_xpos,vl_ypos,0)*/
		DB_CREATE_CTRL@(vm_fenetre_TTU,6,vl_titre2,vl_icon,vl_xpos,
											vl_ypos - 320,0)
		DB_CTRL_BUTTON_TYPE@(vm_fenetre_TTU,"BP_panneau"++vl_numero,4)
		'--DB_CTRL_BUTTON_TYPE@(vm_fenetre_TTU,"BP_cmd"++vl_numero,4)
		DB_CTRL_GRAYED@(vm_fenetre_TTU,"BP_panneau"++vl_numero,True)
	
		/*!! Ajout des numeros de panneaux au dessus des cadres */
	  	vl_titre  = "BP_Lib_Pan" ++ vl_numero	' libelle panneau
	  	vl_titre2 = "BP_Lib_Cmd" ++ vl_numero	' libelle cmd panneau
		vl_numero = vl_num_eqp
	
 		DB_CREATE_CTRL@(vm_fenetre_TTU,3,vl_titre,vl_type_eqp ++ "-" ++ vl_numero,vl_xpos+5,
										vl_ypos-336,0)
		DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU,vl_titre,vl_color)
		DB_CTRL_FONT@(vm_fenetre_TTU, vl_titre,"-adobe-courier-bold-r-normal--10-100-75-75-m-65-iso8859-1")
		DB_CTRL_GRAYED@(vm_fenetre_TTU,vl_titre,True)
	
	 	/*DB_CREATE_CTRL@(vm_fenetre_TTU,3,vl_titre2,vl_type_eqp ++ "-" ++ vl_numero,vl_xpos+5,vl_ypos-14,0) 
	 	DB_CTRL_WIDGET_COLOR@(vm_fenetre_TTU,vl_titre2,vl_color)
		DB_CTRL_FONT@(vm_fenetre_TTU, vl_titre2,"-adobe-courier-bold-r-normal--10-100-75-75-m-65-iso8859-1")
		DB_CTRL_GRAYED@(vm_fenetre_TTU,vl_titre2,True)*/

	}
	else
	{
		'' traits présence tension
	  	vl_titre  = "cmd_" ++ vm_F_bouton[vl_numero,5]
		DB_CREATE_CTRL@(vm_fenetre_TTU,6,vl_titre,vl_icon,vl_xpos,vl_ypos,0)
		DB_CTRL_BUTTON_TYPE@(vm_fenetre_TTU,vl_titre,4)

	  	vl_titre  = "panneau_" ++ vm_F_bouton[vl_numero,5]
		DB_CREATE_CTRL@(vm_fenetre_TTU,6,vl_titre,vl_icon,vl_xpos,vl_ypos-320,0)
		DB_CTRL_BUTTON_TYPE@(vm_fenetre_TTU,vl_titre,4)
	}

next i

RETURN

ENDMACRO


/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :	MAJ du panneau dans la vue actuelle
* 
*  ----------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TTU_MAJ_ID_eqp_HT(va_num,va_msg)

/*
* ARGUMENTS EN ENTREE : 
*	va_num	: le N° du panneau à modifier
*	va_msg	: msg recu
*
* ARGUMENTS EN SORTIE : Aucun
*
* CODE RETOUR         : COM_OK
*
* CONDITION D'UTILISATION
*   appel de cette procedure
*
* FONCTION
*    MAJ du panneau dans la vue actuelle
*
---------------------------------------------------------------------------- */

var	vl_picto, vl_picto_etat, vl_picto_mode
var	vl_objet, vl_objet_etat, vl_objet_mode
var	i
var	vl_size
var	vl_taille
var	vl_icon
var	vl_xpos
var	vl_ypos
var	vl_pos
var	vl_etat
var	vl_mode
var	vl_numeqp
var	vl_text
var	vl_libelle

/* utilisation des cst pour les defaut equipement
XDC_NORMAL		0
XDC_EQP_DEF_CRIT	3
XDC_EQP_DEF_MAJEUR	2
XDC_EQP_DEF_MINEUR	1
XDC_EQP_HS		4
vl_mess[2]	type panneau (SAE)
vl_mess[3]	id panneau (SAE)
vl_mess[4]	position panneau
vl_mess[5]	etat defaut du panneau
vl_mess[6]	mode local /distant du panneau
*/

vl_numeqp = va_num

vl_pos = va_msg[4]
vl_etat =  va_msg[5]
vl_mode =  va_msg[6]

vl_xpos = vm_Eqp_HT[vl_numeqp,5]
vl_ypos = vm_Eqp_HT[vl_numeqp,6]

/*A si le bouton existe */
if vm_F_bouton[vl_numeqp,1] = ""
	Return(COM_NOK)

vl_icon 	= vm_Eqp_HT[vl_numeqp,14]  'le picto à afficher par defaut
'' type de picto 40_40 = équipements HT sinon traits présence tension
if STRING_INDEX@(vl_icon,"40_40") = 0
{
	/*A lecture du picto disponible à cette position dans vl_picto */
	vl_picto = vm_Eqp_HT[vl_numeqp,vl_pos+14]

	vl_objet  = "panneau_" ++ vm_F_bouton[vl_numeqp,5]
	vl_xpos = DB_CTRL_GET_XPOS@(vm_fenetre_TTU, vl_objet)
	vl_ypos = DB_CTRL_GET_YPOS@(vm_fenetre_TTU, vl_objet)
	DB_DESTROY_CTRL@(vm_fenetre_TTU,vl_objet)
	DB_CREATE_CTRL@(vm_fenetre_TTU,6,vl_objet,vl_picto,vl_xpos,vl_ypos,0)
	Return(COM_OK)
}


/* mode de l'equipement */
vl_objet_mode = "BP_local" ++ vl_numeqp 
if vl_mode = 0
{
	'mode distant
	DB_CTRL_DISPLAY@(vm_fenetre_TTU,vl_objet_mode,FALSE)
}
else
{
	'mode local
	vl_picto_mode = vm_Eqp_HT[va_num,12]
	DB_CTRL_DISPLAY@(vm_fenetre_TTU,vl_objet_mode,TRUE)
}
/* selon l'état de l'equipement */
CASE OF vl_etat

/*A etat normal */
CASE XDC_EQP_DEF_CRIT
	vl_text = "Equipement "++vm_F_bouton[vl_numeqp,12]++"-"++vm_F_bouton[vl_numeqp,4]++" avec défaut critique !"
	vl_picto_etat = vm_Eqp_HT[va_num,7]
CASE XDC_EQP_DEF_MAJEUR
	vl_text = "Equipement "++vm_F_bouton[vl_numeqp,12]++"-"++vm_F_bouton[vl_numeqp,4]++" avec défaut majeur !"
	vl_picto_etat = vm_Eqp_HT[va_num,8]

CASE XDC_EQP_DEF_MINEUR
	vl_text = "Equipement "++vm_F_bouton[vl_numeqp,12]++"-"++vm_F_bouton[vl_numeqp,4]++" avec défaut mineur !"
	vl_picto_etat = vm_Eqp_HT[va_num,9]

CASE XDC_EQP_HS
	vl_text = "Equipement "++vm_F_bouton[vl_numeqp,12]++"-"++vm_F_bouton[vl_numeqp,4]++" hors service !"
	vl_picto_etat = vm_Eqp_HT[va_num,10]

CASE XDC_NORMAL
	vl_text = "Réception état équipement " ++vm_F_bouton[vl_numeqp,12]++"-"++vm_F_bouton[vl_numeqp,4]
	vl_picto_etat = vm_Eqp_HT[va_num,11]

ENDCASE
DB_CTRL_TITLE@( vm_fenetre_TTU,"Li_status",vl_text)


vl_objet_etat = "BP_cadre" ++ vl_numeqp 
vl_xpos = DB_CTRL_GET_XPOS@(vm_fenetre_TTU, vl_objet_etat)
vl_ypos = DB_CTRL_GET_YPOS@(vm_fenetre_TTU, vl_objet_etat)
DB_DESTROY_CTRL@(vm_fenetre_TTU,vl_objet_etat)
DB_CREATE_CTRL@(vm_fenetre_TTU,6,vl_objet_etat,
					vl_picto_etat,vl_xpos,vl_ypos,0)

/*A construction du nom de l'objet vl_objet */
vl_objet = "BP_panneau" ++ vl_numeqp

/*A lecture du picto disponible à cette position dans vl_picto */
vl_picto = vm_Eqp_HT[vl_numeqp,vl_pos+14]

/*A si le picto existe pour cette position : MAJ du bouton */
if TRIM@(vl_picto) <>  ""
{  
	vl_xpos = DB_CTRL_GET_XPOS@(vm_fenetre_TTU, vl_objet)
	vl_ypos = DB_CTRL_GET_YPOS@(vm_fenetre_TTU, vl_objet)
	DB_DESTROY_CTRL@(vm_fenetre_TTU,vl_objet)
	DB_CREATE_CTRL@(vm_fenetre_TTU,3,vl_objet,vl_picto,vl_xpos,vl_ypos,0)
	DB_CTRL_BUTTON_TYPE@(vm_fenetre_TTU,vl_objet,4)
	DB_CTRL_GRAYED@(vm_fenetre_TTU,vl_objet,True)
}

Return(COM_OK)

ENDMACRO


/*X*/
/* ------------------------------------------------------------------------------
* SERVICE RENDU :	Permet de s'abonner à l'état des eqp.
*
* -------------------------------------------------------------------------------*/

MACRO ITMA_TTU_Abt_Etat_Eqp_HT(va_Abonnement)

/*-------------------------------------------------------------------------------
* ARGUMENTS EN ENTREE : 
*		va_Abonnement	:	Type d'abonnement (debut ou fin)
*
* ARGUMENTS EN SORTIE : aucun
*
* CODE RETOUR	: COM_OK en cas d'execution correcte, COM_NOK sinon.
*
* CONDITION D'UTILISATION :
*   
*
* FONCTION :
*	Permet de s'abonner à l'état des panneaux.
* ------------------------------------------------------------------------------- */

VAR vl_cmd
VAR vl_text
VAR vl_TypeEqt
VAR vl_taille
VAR j
VAR vl_numouvrage

	vl_TypeEqt = XDC_EQT_HT

	/*A trace de l'appel de procedure */
	vm_text = COM09_Date_Courante()
	vm_text =  vm_text ++ " --> XZEA18_Abt_Eqp_HT "
	COM01_Trace(0,vm_text)

	/*B preparation de la requete pour le coupleur */
	vl_cmd[0]=MTAR_MSG_EXEC

	/*B Identifiant de la fonction HT */
	vl_cmd[1]=MTTU_FCT_ENE		

	/*B fonction a executer */
	vl_cmd[2]=MTAR_FCT_XZEA18

	/*B arguments */
	vl_cmd[3]= va_Abonnement ++ MTAR_CAR_SEPAR ++ vm_NomSite   ++ MTAR_CAR_SEPAR ++
			vl_TypeEqt ++ MTAR_CAR_SEPAR ++ vm_NumTube

	/*B envoi de la commande a la tache ITMA_TAR01 */
	DB_SEND_POKE@(COM_CANAL_TAR01,vl_cmd)
	
	/*B trace de l'émission */
	vl_text = COM09_Date_Courante() ++ " - DB_SEND_POKE@(COM_CANAL_TAR01," ++
			vl_cmd[0]++ ","++vl_cmd[1]++","++vl_cmd[2]++","++vl_cmd[3] ++ ")"
	COM01_Trace(0,vl_text)

	/*B code retour OK */
	RETURN(COM_OK)

ENDMACRO



/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :	maj du libellé qui indique le scenario en cours
*
*  ----------------------------------------------------------------------------
*/

MACRO ITMA_TTU_maj_scenario_HT(va_scenario_en_cours)

/*
* ARGUMENTS EN ENTREE : 
*		va_scenario_en_cours :	num scénario
*
*
* ARGUMENTS EN SORTIE : 
*
* CONDITION D'UTILISATION
*
*
---------------------------------------------------------------------------- */
var i
var vl_libelle

if va_scenario_en_cours = 0
{	
	DB_CTRL_TITLE@(vm_fenetre_TTU,"Li_status","Aucun scénario en cours")
	return
}

for i = 0 to ARRAY_SIZE@(vm_Sce_HT)-1 
if  va_scenario_en_cours = vm_Sce_HT[i,0]
{
	vl_libelle = vm_Sce_HT[i,1]
	DB_CTRL_TITLE@(vm_fenetre_TTU,"Li_status2","Scénario en cours : " ++ vl_libelle)
	break i
}
next i


endmacro

/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :	MAJ des eqp presence tension dans la vue actuelle
* 
*  ----------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TTU_MAJ_ligne_tension_HT(va_num,va_pos,va_type)

/*
* ARGUMENTS EN ENTREE : 
*	va_num	: le N° du panneau à modifier
*	va_pos	: position eqp
*
* ARGUMENTS EN SORTIE : Aucun
*
* CODE RETOUR         : COM_OK
*
* CONDITION D'UTILISATION
*   appel de cette procedure
*
* FONCTION
*    MAJ des eqp presence tension dans la vue actuelle
*
---------------------------------------------------------------------------- */

var vl_liaison
var vl_position1, vl_position2, vl_position
var vl_eqp
var vl_picto
var vl_pos
var vl_numeqp
var vl_type

vl_type = va_type
vl_numeqp = va_num
vl_pos = va_pos

if vl_pos <> 1 and vl_pos <> 2
	Return(COM_NOK)

vl_liaison = UPPERCASE@(vm_Eqp_HT[vl_numeqp,14])
vl_position1 = vm_Eqp_HT[vl_numeqp,15]
vl_position2 = vm_Eqp_HT[vl_numeqp,16]

if vl_pos = 1
	vl_position = vl_position1
else
	vl_position = vl_position2
	
if STRING_INDEX@(vl_liaison,  "CA") <> 0{	
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"ca01_1","pix_diag_NS_10_5",vl_type)
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"ca01_2","pix_diag_SN_10_5",vl_type)
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"ca01_3","pix_barre_4_50",vl_type)
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"ca01_4","pix_barre_100_4",vl_type)
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"ca01_5","pix_barre_4_50",vl_type)
}
if STRING_INDEX@(vl_liaison,  "CDS1") <> 0
{	
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"cds01_1","pix_barre_4_100",vl_type)
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"cds01_2","pix_barre_100_4",vl_type)
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"cds01_3","pix_barre_50_4",vl_type)
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"cds01_4","pix_barre_4_50",vl_type)
}

if STRING_INDEX@(vl_liaison,  "CDS2") <> 0
{	
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"cds02_1","pix_barre_4_100",vl_type)
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"cds02_2","pix_barre_50_4",vl_type)
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"cds02_3","pix_barre_100_4",vl_type)
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"cds02_4","pix_barre_4_50",vl_type)
}

if STRING_INDEX@(vl_liaison,  "GEL") <> 0
{	
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"gel01_1","pix_barre_100_4",vl_type)
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"gel01_2","pix_barre_100_4",vl_type)
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"gel01_3","pix_barre_4_50",vl_type)
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"gel01_4","pix_barre_4_50",vl_type)
}

if STRING_INDEX@(vl_liaison,  "CDL") <> 0
{	
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"cdl01_1","pix_diag_SN_10_5",vl_type)
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"cdl01_2","pix_diag_NS_10_5",vl_type)
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"cdl01_3","pix_barre_4_50",vl_type)
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"cdl01_4","pix_barre_100_4",vl_type)
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"cdl01_5","pix_barre_4_50",vl_type)
}

if STRING_INDEX@(vl_liaison, "SYNTHESE_CDA1") <> 0
{	
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"art01_1","pix_barre_4_50",vl_type)
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"art01_2","pix_barre_400_3",vl_type)
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"art01_3","pix_barre_400_3",vl_type)
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"art01_4","pix_barre_4_50",vl_type)
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"art01_5","pix_barre_4_100",vl_type)
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"art01_6","pix_diag_SN_10_5",vl_type)
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"art01_7","pix_diag_NS_10_5",vl_type)
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"art01_8","pix_cadre_14_14",vl_type)
}

if STRING_INDEX@(vl_liaison, "SYNTHESE_CDA2") <> 0
{	
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"art02_1","pix_barre_4_50",vl_type)
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"art02_2","pix_barre_400_3",vl_type)
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"art02_3","pix_barre_400_3",vl_type)
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"art02_4","pix_barre_4_50",vl_type)
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"art02_5","pix_barre_4_100",vl_type)
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"art02_6","pix_diag_NS_10_5",vl_type)
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"art02_7","pix_diag_SN_10_5",vl_type)
	ITMA_TTU_MAJ_ID_tension_HT(vl_position,"art02_8","pix_cadre_14_14",vl_type)
}

Return(COM_OK)

ENDMACRO


/* SERVICE RENDU :	MAJ des eqp presence tension dans la vue actuelle */

MACRO ITMA_TTU_MAJ_ID_tension_HT(va_position,va_id_eqp, va_picto, va_type)

var	vl_xpos
var	vl_ypos
var vl_eqp
var vl_position
var vl_picto

vl_eqp = va_id_eqp ++ va_type
vl_position = va_position

if vl_position = "noir"
	vl_picto = va_picto
else
	vl_picto = va_picto ++ "_" ++ "vert"

vl_xpos = DB_CTRL_GET_XPOS@(vm_fenetre_TTU,vl_eqp)
vl_ypos = DB_CTRL_GET_YPOS@(vm_fenetre_TTU,vl_eqp)

DB_DESTROY_CTRL@(vm_fenetre_TTU,vl_eqp)
DB_CREATE_CTRL@(vm_fenetre_TTU,6,vl_eqp,vl_picto,vl_xpos,vl_ypos,0)

Return(COM_OK)

ENDMACRO


