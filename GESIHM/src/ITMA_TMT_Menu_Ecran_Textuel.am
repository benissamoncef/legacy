/*E*/
/* Fichier : $Id: ITMA_TMT_Menu_Ecran_Textuel.am,v 1.205 2021/10/29 11:59:54 pc2dpdy Exp $        $Revision: 1.205 $        $Date: 2021/10/29 11:59:54 $
-------------------------------------------------------------------------------
* STERIA *  PROJET MIGRAZUR
-------------------------------------------------------------------------------
* SOUS-SYSTEME  GESIHM
-------------------------------------------------------------------------------
* MODULE MTMT * FICHIER ITMA_TMT_Menu_Ecran_Textuel.am
-------------------------------------------------------------------------------
* DESCRIPTION DU MODULE :
* menu principal cote "main courante"
*
*   Cf. DCG 2.4.55
*
-------------------------------------------------------------------------------
* HISTORIQUE :
*
* Guilhou	10 Oct 1994	: Creation                                         V1.1
* Lecrivain	21 Nov 1994	: Arguments ; modif. valeurs table familles        V1.4
* Noel		28 Nov 1994	: Ajout des fonctions d'affichage pmv fourgon, pmv mobile et gare. V1.5
* Noel		12 Dec 1994	: Ajout des fonctions pilotage NAV, TUNNEL et ECHANGEUR.	V1.7
* Lecrivain	12 Dec 1994	: Modif. interface (1er argument : appelant)       V1.8
* Guilhou	15 dec 1994	: prise en compte des familles		V1.9
* Guilhou	20 dec 1994	: ajout liste des evenements			V1.13
* Guilhou	22 dec 1994	: ajout liste des fax				V1.14
* Guilhou	23 dec 1994	: interdire creation tete de bouchon	V1.15
* Guilhou	26 dec 1994	: terminer l'ancien menu sur chgt de poste V1.16
* Guilhou	27 dec 1994	: reposition fenetre choix du type fmc	V1.17
* Guilhou	28 dec 1994	: ajout utilisation ressources		V1.18
* Guilhou	02 jan 1994	: ajout etat de poste				V1.18
* Lecrivain	02 Jan 1995	: Ajout de l'option "Projeter"        V1.21
* Lecrivain	03 Jan 1995	: Ajout appel Tel, Bip                V1.23
* Guilhou	04 jan 1995	: ajout liste des alarmes			V1.24
* Guilhou 05 jan 1995	: ajout liste des eqts indisponibles	V1.24	
* Guilhou 06 jan 1995	: ajout mettre en/hors service un eqt	V1.25	
						ajout activer/desactiver
* Noel		12 jan 1995	: ajout de l'appel au bloc note			V1.26
* Lecrivain	18 Jan 1995	: Ajout de l'option "Tester RAU"                  V1.30
* Noel		26 Jan 1995	: Ajout de l'option "config synoptique" et masques
					et appels aux vues				V1.37
* Noel		07 Fev 1995	: Ajout des acces à open view et LCR	V1.40
* Lecrivain	15 Fev 1995	: Suppression chemins complets des sous-commandes V1.41
* Lecrivain	15 Fev 1995	: Ajout option "graphe F(t)"                      V1.42
* Lecrivain	08 Mar 1995	: Changement du nom de la tache gmot ("tigmot.x") V1.46
* Lecrivain	29 Mar 1995	: Message de lancement gmot, menu bureautique V1.49
* Lecrivain	31 Mar 1995	: Presence post-it sur "projeter", fermeture sur navigation   V1.50, 1.51
* Lecrivain	03 Avr 1995	: Ajout du module "capacite des aires"            V1.52
* Lecrivain	04 Avr 1995	: Ajout repondeur telephonique (reserves 544,545) V1.54
* Lecrivain	06 Avr 1995	: Message au changement etat repondeur            V1.55
* Lecrivain	11 Avr 1995	: Extraction de la fonction de choix de type FMC  V1.56
* Lecrivain	11 Avr 1995	: Ajout masques lits d'arrets, travaux et LTV     V1.57
* Lecrivain	21 Avr 1995	: Mise en place de commentaires dans le menu      V1.59
* Lecrivain	27 Avr 1995	: Ajout de vues de districts et troncons          V1.61
* Guilhou	24 Mai 1995	: Ajout lancement editeur de connaissances        V1.63
* Lecrivain	01 Jun 1995	: Ajout d'icones ecoute GN, impression d'ecran    V1.64
* Lecrivain	06 Jun 1995	: Abonnement aux messages administrateur
*                         si famille ADMINISTRATION et non SYSTEME        V1.65
* Noel		15 Jun 1995	: Lancement de la tache ticfg lors du lancement 
*					de la configuration des plans de secours  V1.65
*					Ajout des services de l'environnement de 
*					parametrage.
* Niepceron	28 jun 1995	: Ajout des troncon A521 et A501	v1.67
* Noel		29 Jun 1995	: Modification de l'appel des shells		V1.68
* Lecrivain	31 Jul 1995	: Mise a jour info publique ecoute GN; msg a MTRA V1.70
* Guilhou		03 aut 1995	: Fusion sur mono ecran      			 V1.71
* Torregrossa	03 aut 1995	: Suppression heure du menu      		 V1.72
* Torregrossa	04 aut 1995	: Ajout de la synthese des travaux          V1.73
* Guilhou		01 sep 1995	: ajout filtre sur site ou machine   	 V1.74
* Guilhou		01 sep 1995	: correction appel ITMA_TCF_demande_confirmation   	 					
* Noel			01 sep 1995	: Ajout de la montre 			V1.75
* Niepceron		05 sep 1995	: Modif de CMD_SYN_CFG et  CMD_SYN_GEN	V1.75
* Guilhou		18 Sep 1995	: Ajout masque passages superieurs	V1.78
* Guilhou		27 Sep 1995 	: Ajout appel calcul indice qualite	V1.80
* Gaborit		03 oct 1995	: Correction appel calcul indice qualite     V1.81
* Torregrossa	13 oct 1995	: Ajout trace sur plus_de_fiche_ouverte   V1.82
* Torregrossa	09 Nov 1995	: Modif demande fenetre unix pour version Applix 4.1   V1.83
* Torregrossa	11 Dec 1995	: Ajout appel a la configuration des vitesses libres V1.84
* Noel		21 Dec	1995	: init de tl_menu_array à null avant son init avec tl_fusion (ANO531)	V1.85
* Torregrossa   25 Jan 1996	: modif appel fenetre systeme et ajout code pour aide V1.86
* Noel          29 Jan  1996    : Lancement de ticfg avec un chemin relatif    (DEM753)                 V1.87
*				: Ajout des commandes de sauvegarde/restauration des scenarios de
*					formation.(DEM601)
* Noel		2  Jan  1996	: Lancement par SHELL_Command plutot que par RUN_Program_Unpended	V1.87
*					(DEM735)
* Noel		7  Fev 1996	: Ajout d'arret et relance de l'IHM synoptique(DEM807)			V1.87
* Noel		20 Fev 1996	: Ajout d'arret et relance de l'IHM synoptique formation (DEM932)	V1.88
* Noel		06 Mar 1996	: Ajout du lancement de la tache de scannerisation			V1.89
*			init de tl_menu_array à null avant la creation du menu V1.89				
* Guilhou	26 Mar 1996	: Ouverture fiche bolc notes a la prise de poste V1.90 (DEM749)
* Guilhou	28 Mar 1996	: Ajout Graphe F(t)->Bureautique V1.91 (DEM 607)
* Torregrossa	23 Avr 1996	: Ajout Configurer->Autre V1.92-1.93 (1007)
* Noel		6  Mai 1996	: ajout de PEND_FOR_NEW_TASK pour mettre en référence deq (DEM 965)	V1.94
* Torregrossa	10 Mai 1996	: Supprimer declenchement de la tache easycam de scrutation de dt V1.95
*                                 pour la lancer avant le login
* Verdier	19 Juin 1996	: mise en place de la tache de parametrage des libelles (V1.96)
* Verdier  	16 Aou 1996 : Ajout bouton Création FMC travaux (V1.97) (ANA32)
* Guilhou	22 aut 1996 : abonnement poke COM_CANAL_MTMT_ETAT_PCSIMPL (RADT) V1.98
* gesconf	11 Sep 1996 : rien 						V1.99
* Guilhou	16 sep 1996 : gestion correcte des creations de fmc en prevision V1.100
*				gestion env. de parametrage pour fdie (DEM/1023)
* Mismer	25 sep 1996 :  ajout argument appel pilotage PMV au CI 	V1.101
* Niepceron	07 oct 1996 :  ajout de l'item ihm_distane 	(DEM/1229) V1.102
* Niepceron     08 oct 1996 :  Modification des noms d'autoroute (DEM/1230) V1.103
* Guilhou	04 nov 1996 : suppression info_message sur impression ecran (DEM/1265) V1.104
* Guilhou	12 nov 1996 : gestion correcte (OK/NOK) des variables vg_comm_ (EXT. OUEST) V1.105
* Nipceron	25 nov 1996 : ajout des sous systeme opr,util,ntfm V1.106
* Niepceron     11 oct 1996 :  Motif d'appel en paramanence (DEM/1235) V1.107
* Guilhou	10 dec 1996 : histo de l'exploitation sur les PC simplifies (DEM/1207) 1.108
* Guilhou	10 dec 1996 : titre de la boite (copyright) 1.109
* Torregrossa	12 dec 1996 : Modif appel a ITMA_TMC_Fiche_Main_Courante (FMC9) 1.110
			      Ajout du menu Consulter->Debit station (dem/1359) 1.110
* Mismer  08 Avr 1997 : Modif pour lecture alarme sur POCMA(DEM/1418)	1.111
* Guilhou 27 mai 1997 : ajout graphe temps de parcours 1.112
* Guilhou 02 sep 1997 : abonnement etat de commm entre tous les sites partout (DEM/1483) 1.113
* Guilhou 18 nov 1997 : correction clique sur icone de comm (DEM/1483) 1.114
* Guilhou 01 dec 1997 : affichage vue strada 1.115
* Guilhou 06 jan 1998 : achevement FMC operateur PC niveau 2 par l'AS ESCOTA (dem/1535) 1.116
* Torregrossa	08/01/98 : Ajout de la fenetre des alertes pour PC 2, 3 ET CI (1532) 1.117
* Guilhou 	13/01/98 : Re Ajout de la fenetre des alertes pour PC 2, 3 ET CI (1532) 1.118
* Guilhou 	14/01/98 : changement interface XZAE147 et appel XZAE148 (dem/1535) 1.119
* Torregrossa	30/01/98 : Ajout masque pour FAC, FAU, PAL (1538) 
* Mismer 	30/01/98 : Modif pour basculement RAU PC2 (DEM/1538) 
* Guilhou 	25/02/98 : achevement FMC PC 2 lie a famille XDC_FAM_ACHEVER_PC2 (dem/1378) 1.123 
* Guilhou 	26/02/98 : forcer la recup des droits d'enrichir du PC 2 au CI (dem/1576) 1.123
* Guilhou 	26/02/98 : lancer la boite des fiches metier en NEW_TASK (dem/1581) 1.123
* Guilhou 	27/02/98 : correction recup droit d'enrichir au CI (dem/1576) 1.124
* C.T.		26/02/98 : Passage par COM43_SQL_CONNECT pour connection sur serveur distant (dem/1581) 1.125
* C.T.		12/03/98 : Passage par COM43_SQL_CONNECT pour connection sur serveur distant (dem/1581) 1.126
* Niepceron	23/11/98 : Ajout menu config PMV (dem/1723) 1.127
* Niepceron	09/12/98 : Suppression demande init presence 1.128 +
				recuperation RAU PC2 + dimensionnemnt de la fenetre pour applix 4.4 1.128
* Niepceron	23/11/98 : Ajout menu config PMV (dem/1723) 1.129
* ESCOTA        03/05/99 : ajout du mail 1.130 et ajout case de troncon la saulce
* ESCOTA        20/12/1999 : Ajout des panneaux d'alerte
* Niepceron	27/12/99 : Ajout menu pour Export/Import itineraire  dem/1766
					  Suppression du lancement de ticfg v1.132
* Guilhou	13/09/02 : ajout message crise et ajout fermeture_las_planas_1
* cluchague     18/12/02 : ajout pilotage pmva cagnes (REPERE1) v1.134
* cluchague     18/01/03 : pour les delestages et deviations on n'ouvre pas directement la fmc 
			   mais on passe par l'ihm de selection des plans de secours (REPERE2) v1.135
* Hilmarcher    01/12/03 : Generalisation: 'fermeture Las Planas' devient 'fermeture tunnels' v1.136
* Cluchague     14/10/04 : fonction de pilotage (temporaire) des PMVA + gravure cdrom v1.137
* FERRERO       14/01/05 : fonction nettoyage du repertoire mbo v1.140  (J'AI FAIT DES BETISES DANS LE DELTA)
* FERRERO	07/02/05 : Icone tunnel las planas ne fonctionne pas, ligne 646 plus en commentaire : v1.141
* Hilmarcher    05/04/05 : Rajout Creation Fiche Main Courante Bouchon Predefinis
					ajout trace sur maj de vg_comm et vg_operateur v1.143
* Hilmarcher    09/06/05 : Rajout sous-menu Temps de parcours multi-zone DEM468 v.144 
* guilhou       13/02/04 : liste des messages TFM recus de datex (REPERE = SAGA) v1.145
* Hilmarcher    18/07/05 : Rajout menu ITMA_TMA_diffusion_tdp_rtfm pour TDP RTFM v1.146
* Hilmarcher    16/08/05 : Ajout IHM de config des bouchons predefinis v1.147-v.148
* Hilmarcher    24/08/05 : Ajout Sous menu FAQ v1.149
* Hilmarcehr    28/09/05 : Modif IHM bouchons predef inversion avec IHM d'admin de ces bouchons v1.150
* JMG		11/10/05 : ajout PMVA BAF BAD +BAF (clu) 1.151
* CLUCHAGUE	10/11/2005 : Ajout pilotage Las Planas 1.152
* JPL		26/02/2007 : Creation d'une FMC Consequence par MTMC (DEM 624) 1.153
* JPL		02/07/2007 : Ajout commande masquage/demasquage Cantons (DEM 657) 1.154
* JPL		18/07/2007 : Ajout item 'DAI' au menu 'Tester' (DEM 672) 1.155
* JPL		01/08/07 : Ajout item 'Synoptique avec Reference' au menu 'Analyser -> Graphe F(t)' (DEM 673) 1.156
* JMG		13/12/07 : ajout RAU au CI  (DEM/716) 1.157
* JPL		14/12/07 : Ajout item 'Coup de Poing' au menu 'Piloter' (DEM 706) 1.158
* Niepceron	14/01/2008	: Modifier les traitements et filtres spécifiques DN pour les adapter à DM DEM743 1.159
* JBL		Nov 2007 : DEM 665 1.160
* PNI		11/06/08 : ajout du lancement de xlivre_modern1.sh DEM781 1.161
* JPL		11/09/08 : Gestion de l'etat du Pirau sur l'ecran synoptique (DEM 808) 1.162
* JPL		02/10/08 : Gestion de l'icone de reveil sur l'ecran main courante seulement (DEM 815) 1.163
* JPL		09/10/08 : Etat du Pirau est fonction de la criticite des alarmes (DEM 808) 1.164
* JPL		18/03/09 : Delestage/deviation: Fmc cause transmise au module Plan de Secours (DEM 112) 1.165
* JPL		18/06/09 : Ne pas lancer la tache outils si elle l'est deja mais lui donner le focus 1.166
* JPL		30/06/09 : Ajout menu 'SAE' et item 'A propos' au menu cote synoptique (DEM 892) 1.167
* JPL		06/07/09 : Appel du nouveau module FAQ avec menu personnalise (DEM 530) 1.168
* JMG           29/09/09 : SECTO DEM 887
* JPL		16/11/09 : Ajout de l'item "TDP WebTrafic" au menu "Application" (DEM 918) 1.170
* JPL		22/09/10 : Ajout de l'item "Capture Ecran" au menu "Application" (DEM 946) 1.171
* JPL		22/09/10 : Modif appel de l'aide, homogene avec autres modules 1.172
* JMG		22/11/10 : interface Flash 1.173
*				+ boutons Alarme/Etat
* JPL		08/03/11 : Demarrage module de pilotage rapide des cameras sur ecran textuel (DEM 949)  1.174
* JPL		22/03/11 : Demarrage module de pilotage rapide des cameras au CI aussi  1.175
* JMG		24/02/12 : linux 1.176
* JMG		25/05/12 : regulation DEM 1016 1.777
* JPL		30/10/12 : Appel du module de viabilite hivernale (DEM 1032)  1.179
* JPL		28/02/13 : Ajout appel mises au neutre programmees PMV / PMVA au menu 'Configurer' (DEM 1061)  1.180
* JPL		18/09/13 : Ajout item "Trace Coup de Poing" au menu 'Consulter' ecran textuel (DEM 1083)  1.181
* PNI		28/07/14 : Ajout de la fonction de consultation zones d'ombre FLU DEM1090 1.182
* PNI		01/10/14 : FACTIS : modif pour bouton large 1.183
* NDE		xx/08/15 : Gestion de deux listes a traiter au CIT (DEM 1138)  1.184
* JPL		22/09/13 : Gestion reveil global en fonction des reveils des deux listes (DEM 1138)  1.185
* JPL		22/03/16 : Ajout de l'action d'envoi de mail d'alerte aux sociétés de Sophia (DEM 1155)  1.186
* JMG		01/09/16 : ajout basculement RAU troncons au CI 1.187
*			   son sur alarme critique FACTIS
			   Double liste de FMC sur tous les site DEM1150
* JMG   09/03/17        : REGIONALISATION - DEM1220 1.187
* JMG	20/06/17	: tigmot 1.188
* JPL		28/03/18 : Ajout de l'item "Coup de Poing Toulon" au menu "Piloter" (DEM 1177)  1.190
* JPL		29/03/18 : Ajout appel mises au neutre programmees PMV / PMVA SAGA au menu "Creer" (DEM 1278)  1.191
* JMG 04/04/18        : Ajout controleurs de feux CTRL_FEUX 1.192 DEM1284
* JPL		21/12/18 : Ajout appel module calendrier de cavances au menu "Administrer" (DEM 1312)  1.193
* JPL		09/04/19 : Lancement de trois listes de FMC à traiter (DEM 1325)  1.194
* JMG	10/12/19 : TDP surcharge 1.195
* PNI	4/02/20	 : Tunnel TOULON / FACTIS SAE-110 1.196
* AMA	09/09/20	 : SAE-129 Gestion PRA inter-site 1.198
* LCL   22/04/20         : MOVIS Ajout site local pilotage DEM-SAE93
* LCL	12/03/21	: Ajout IHM Pilotage IMU DEM-SAE155
* PNI 	26/03/21 : Suppression de l'appel a XZAE148 récupèration des droits d'enrichir au PC 
* LCL	31/03/21	: Ajout IHM Pilotage SONO PAU DEM-SAE244
* JPL	16/08/21 : Restauration de l'animation du reveil principal par les listes de FMC à traiter (SAE-315)
* ABE   14/10/2021 : Ajout Configuration TOPS display pour appel fiche ecoulement DEM-SAE228 1.204
* ABE	28/10/21 : Ajout num écran du fichier tops dans la commande DEM-SAE228 1.205
-------------------------------------------------------------------------------
*/

INCLUDE	"dbase_.am"

INCLUDE "xdc_ax.h"
INCLUDE	"xzic_ax.h"
INCLUDE	"xzaac_ax.h"
INCLUDE	"xzaec_ax.h"

INCLUDE "isyn_svu_applix_ax.h"
INCLUDE	"ITMA_COM.h"
INCLUDE	"ITMA_TDO.h"
INCLUDE	"ITMA_TAR.h"
INCLUDE	"ITMA_TBR.h"
INCLUDE	"ITMA_TCV.h"
INCLUDE	"ITMA_TFL.h"
INCLUDE	"ITMA_TEP_Etat_De_Poste.h"
INCLUDE	"itre_son_ax.h"

INCLUDE	"xzae104sp.h"
INCLUDE	"xzae147sp.h"
INCLUDE	"xzae148sp.h"


DEFINE	C_MODULE	"MTMT"			' Nom du module


/*A
 * Description des commandes activees, noms des fichiers de trace
 * --------------------------------------------------------------
 */

DEFINE 	CMD_GMOT		"kill_tache.sh tisup.x ; tisup.x migrazur&"
DEFINE 	CMD_SYN_CFG		"ticfgps.ksh &"
DEFINE	CMD_SYN_PERSO		"hpterm -title CONFIGURATION_DES_SYNOPTIQUES -e ./ticfg.x cfg &"
DEFINE	CMD_SYN_GEN		"tiDV.ksh &" 
DEFINE	CMD_IMP_ECRAN		"tivue.ksh"
DEFINE	CMD_OPEN_VIEW		"mido_ovw.sh &"
DEFINE	CMD_METTRE_REF		"timre.ksh"
DEFINE	CMD_METTRE_OPT		"timop.ksh"
DEFINE	CMD_RECUP_DIFF_TRA	"tirdt.ksh"
DEFINE	CMD_RECUP_DIFF_OPT	"tirdo.ksh"
DEFINE	CMD_SAUV_REF_DAT	"tisrd.ksh"
DEFINE	CMD_RECUP_REF_DAT	"tirsd.ksh"
DEFINE	CMD_EXP_ITI	"xterm -T Export_Itineraires -e tiexpiti.sh"
DEFINE	CMD_IMP_ITI	"xterm -T Import_Itineraires -e tiimpiti.sh"
DEFINE	CMD_FENETRE_UNIX	"xterm -sb -sl 2000 -cn -name UNIX 2>>/produits/migrazur/appliSD/traces/trace_erreur"
DEFINE	CMD_LIVRE_MODERN1	"xlivre_modern1.sh"	
DEFINE	CMD_RECUP_SCENARIO	"tiresclance.ksh"	
DEFINE	CMD_SAUV_SCENARIO	"tisvsclance.ksh"	
DEFINE	CMD_SCANNER		"tiscan.ksh &"

DEFINE  PATH_TRACE		"/produits/migrazur/appliSD/traces/trace_gmot"
DEFINE	PATH_ERREUR		"/produits/migrazur/appliSD/traces/trace_erreur"
DEFINE	PATH_OUTILS		"/produits/migrazur/appliSD/fichiers/mbo"

DEFINE	VUE_COMMUN	"VUES_Commun.elo"
DEFINE	VUE_APPLIX	"CVUEM_ApplixData.elo"

/*A
 * Noms des fichiers contenant les descriptions des menus personnalises
 * --------------------------------------------------------------------
 */

DEFINE	C_FICH_MENU_MIGRAZUR			"itex_men.syn"


/* Positions des differents champs dans le fichier de menu Migrazur */
DEFINE	POS_NOM			0
DEFINE 	POS_MACRO		1
DEFINE	POS_PROFONDEUR		2
DEFINE	POS_FAMILLE		3
DEFINE	POS_RACCOURCI		4
DEFINE 	POS_ICONE		5
DEFINE	POS_ECRAN		6
DEFINE	POS_FILTRE		7


/*A
 * Definition des libelles des messages affiches
 * ---------------------------------------------
 */

DEFINE	C_LIB_TYPE_FMC_NOK	"On ne peut pas creer ce type de fiche"
DEFINE	C_LIB_ANNUL_RENVOI	"Annulation du renvoi sur répondeur"
DEFINE	C_LIB_RENVOI_APPEL	"Renvoi des appels sur répondeur"
DEFINE	C_LIB_GMOT_LANCE	"Lancement outil systeme en cours ..."


/*A
 * Definition des images digitalisees utilisees
 * --------------------------------------------
 */

DEFINE	PIX_REVEIL_ON		"pix_ITMA_reveil_ON"
DEFINE	PIX_REVEIL_OFF		"pix_ITMA_reveil_OFF"

DEFINE	PIX_REPONDEUR_ON	"pix_repondeur_on"
DEFINE	PIX_REPONDEUR_OFF	"pix_repondeur_off"

DEFINE	PIX_GN_NORMAL		"pix_GN_non_ecoute"
DEFINE	PIX_GN_EN_MAIN		"pix_GN_en_main"
DEFINE	PIX_GN_ECOUTE		"pix_GN_ecoute"
DEFINE	PIX_GN_SECRET		"pix_GN_demande_secret"
DEFINE	PIX_GN_REPRISE		"pix_GN_demande_reprise"

DEFINE	PIX_CMD_PMV		"pix_pmv_"
DEFINE  PIX_CMD_PRV             "pix_prv_"
DEFINE	PIX_OPERATEUR		"pix_operateur_"
DEFINE	PIX_DEGRADE		"pix_degrade_"
DEFINE	PIX_PAS_OPERATEUR	"pix_pas_operateur_"

DEFINE	PIX_RAU_CA_EN_MAIN	"pix_rau_CA_en_main"
DEFINE	PIX_RAU_DA_EN_MAIN	"pix_rau_DA_en_main"
DEFINE	PIX_RAU_VE_EN_MAIN	"pix_rau_VE_en_main"
DEFINE	PIX_RAU_VD_EN_MAIN	"pix_rau_VD_en_main"
DEFINE	PIX_RAU_PR_EN_MAIN	"pix_rau_PR_en_main"
DEFINE	PIX_RAU_DA_NON_EN_MAIN	"pix_rau_DA_non_en_main"
DEFINE	PIX_RAU_CA_NON_EN_MAIN	"pix_rau_CA_non_en_main"
DEFINE	PIX_RAU_VE_NON_EN_MAIN	"pix_rau_VE_non_en_main"
DEFINE	PIX_RAU_VD_NON_EN_MAIN	"pix_rau_VD_non_en_main"
DEFINE	PIX_RAU_PR_NON_EN_MAIN	"pix_rau_PR_non_en_main"

DEFINE	PIX_PIRAU_OK		"pix_pirau_ok"
DEFINE	PIX_PIRAU_HS		"pix_pirau_hs"

define	PIX_ALARME_VERT_L	"alarme_vert_l"
define	PIX_ALARME_ROUGE_L	"alarme_rouge_l"
define	PIX_ALARME_VERT		"alarme_vert"
define	PIX_ALARME_ROUGE	"alarme_rouge"
define	PIX_EQT_ROUGE		"eqt_rouge"
define	PIX_EQT_ORANGE		"eqt_orange"
define	PIX_EQT_VERT		"eqt_vert"

/* Definition des types de masque pour linux */ 
DEFINE  CM_MASK_LX_RADT         26
DEFINE  CM_MASK_LX_PMV                  2
DEFINE  CM_MASK_LX_CAMERA               104 
DEFINE  CM_MASK_LX_DAI                  4
DEFINE  CM_MASK_LX_PAU                  14
/*DEFINE        CM_MASK_LX_RESEAU               0 */
DEFINE  CM_MASK_LX_NAV                  1
DEFINE  CM_MASK_LX_RESEAU_PI    112
DEFINE  CM_MASK_LX_RESEAU_PS    114
DEFINE  CM_MASK_LX_RESEAU_ELECT 117
DEFINE  CM_MASK_LX_RESEAU_BT 111
DEFINE  CM_MASK_LX_RESEAU_MT 110
DEFINE  CM_MASK_LX_RESEAU_GAZ   116
DEFINE  CM_MASK_LX_RESEAU_EAU   115
DEFINE  CM_MASK_LX_RESEAU_AUTRE 118
DEFINE	CM_MASK_LX_CANTON	120
DEFINE  CM_MASK_LX_LIT                  10
/*DEFINE        CM_MASK_LX_PAT                  0*/
/*DEFINE        CM_MASK_LX_REF                  0*/
DEFINE  CM_MASK_LX_LTV                  103
DEFINE  CM_MASK_LX_TRAV_PREVUS  132
/*DEFINE        CM_MASK_LX_FERM         19*/
DEFINE  CM_MASK_LX_PAL                  45
DEFINE  CM_MASK_LX_PMVA         46
DEFINE  CM_MASK_LX_BAF                  47
DEFINE  CM_MASK_LX_BAD                  48
DEFINE CM_MASK_LX_COMMUTER		5
DEFINE CM_MASK_LX_PROJETER		155

DEFINE	CM_MASK_LX_PRV			62


/*variables du menu*/
VAR vm_reveil_1, vm_reveil_2, vm_reveil_3			' Indicateurs de reveils sur les listes a traiter


VAR vm_menu_items
VAR vm_cascade_date, vm_bouton_date
VAR vm_cascade_reveil,vm_bouton_reveil
VAR vm_cascade_repond,vm_bouton_repond
VAR vm_bouton_num, vm_cascade_num, vm_submenu_num
VAR vm_bouton_comm_GN,vm_cascade_comm_GN
VAR vm_bouton_alarme, vm_bouton_eqt
VAR vm_cascade_eqt, vm_cascade_alarme

VAR vm_bouton_comm_GN_PC2,vm_cascade_comm_GN_PC2
VAR vm_nom_GN

/* pour suivre depuis le CI les etats de basculement des RAU*/
VAR vm_bouton_comm_DM,vm_cascade_comm_DM
VAR vm_bouton_comm_DA,vm_cascade_comm_DA
VAR vm_bouton_comm_DP,vm_cascade_comm_DP
VAR vm_bouton_comm_DS,vm_cascade_comm_DS
VAR vm_bouton_comm_DC,vm_cascade_comm_DC

/* pour suivre l'etat du Pirau */
VAR vm_bouton_pirau,vm_cascade_pirau

/*tableau des positions des icones des PC simplifies*/
VAR tm_icones_pcs

VAR vm_site, vm_nom_site



/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
* gerer le menu principal
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TMT_Menu_Ecran_Textuel (va_appelant, ta_args)

/*
* ARGUMENTS EN ENTREE :
*   va_appelant       : Nom de la macro appelante ;
*   ta_args           : Liste des arguments.
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Indefini
*
* CONDITION D'UTILISATION
*   MTAP
*
* FONCTION
*
---------------------------------------------------------------------------- */

	VAR vl_fenetre
	VAR vl_exit_value
	VAR tl_messages_acceptes
	VAR vl_installer_traitement_erreur
	VAR vl_nom_macro	

	VAR tl_familles
	VAR vl_change_poste, vl_init
	VAR vl_repondeur_on
	VAR FORMAT TFL_Donnees_Alerte vl_alerte_gn
	VAR FORMAT TDO_PAU_En_Ecoute vl_pau_ecoute
	VAR vl_menu_init, vl_menu
	VAR vl_msg, tl_args
	VAR vl_fichier
	VAR vl_ret
	VAR	i, j
	VAR	vl_canal_SGBD_Fiche		/* connexion au serveur CI */
     VAR vl_liste_GN
     VAR vl_tmp, vl_ant, vl_ind_ant, vl_val
     VAR vl_pix_rouge, vl_pix_vert
VAR vl_cmd

  VAR vl_fichier_tops
  VAR vl_lignes
  VAR vl_array
  VAR vl_display_IPaddress
  VAR vl_display_number
  VAR vl_screen_number
  VAR vl_display_cmd
  VAR vl_taille

/*A
 * Traitements en cas d'erreur durant l'initialisation :
 * informer l'operateur, tracer l'erreur et abandonner
 * -----------------------------------------------------
 */

/*ON ERROR {
	ERROR_BOX@
	COM01_Trace (COM_WARNING, COM03_Message_Erreur (C_MODULE))
	RETURN
}*/

vm_site = SYSTEM_VAR@ (vg_site)
vm_nom_site = SYSTEM_VAR@ (vg_nom_site)

/*A Charger en memoire les modules de base */
/*B (bureautique, mecanismes RPC ...) */
ITMA_TBR_Bureautique ()
ITMA_TMQ_masque()
ITMA_TPC_appel()
ITMA_TVU_aff_vue()

/*A si l'appelant est la macro de login (au premier appel)*/
IF (va_appelant="ITMA_TLU_login")
{
	vl_change_poste=FALSE

	SET_SYSTEM_VAR@ (vg_numero_poste, ta_args[0])
	SET_SYSTEM_VAR@ (vg_numero_operateur, ta_args[1])
	SET_SYSTEM_VAR@ (vg_profil_operateur, ta_args[2])
	SET_SYSTEM_VAR@ (vg_operateur, ta_args[3])

	IF ta_args[4] <> NULL
	{
		tl_familles = ARRAY_FROM_STRING@ (ta_args[4], ",")
		SET_SYSTEM_VAR@ (vg_familles, tl_familles)
	}

}
/*A sinon l'appelant est la macro de login MAIS pour le 
* changement de poste*/
ELSE IF (va_appelant="ITMA_TLU_changer_poste") AND 
		(SYSTEM_VAR@(vg_numero_display) <> XDC_ECRAN_SYN)
{
	/*A numero et cle de la fiche poste operateur courante*/
	tl_args[0]=SYSTEM_VAR@(vg_num_fiche_operateur)
	tl_args[1]=SYSTEM_VAR@(vg_cle_fiche_operateur)

	/*! si pas de fiche poste operateur*/
	IF (tl_args[0]=null)
		/*! je n'essaie pas d'achever la fiche poste operateur*/
		goto POS_FAMILLES

	/*! je termine la fiche operateur qui etait en cours*/
	IF (ITMA_TMC_achever_fiche(null,tl_args,null)=COM_OK)
	{
POS_FAMILLES:
		SET_SYSTEM_VAR@ (vg_numero_poste, ta_args[0])
		SET_SYSTEM_VAR@ (vg_numero_operateur, ta_args[1])
		SET_SYSTEM_VAR@ (vg_profil_operateur, ta_args[2])
		SET_SYSTEM_VAR@ (vg_operateur, ta_args[3])

		IF ta_args[4] <> NULL
		{
			tl_familles = ARRAY_FROM_STRING@ (ta_args[4], ",")
			SET_SYSTEM_VAR@ (vg_familles, tl_familles)
		}

		/*! je cree une nouvelle fiche operateur si j'ai la famille*/
		IF (COM04_Operateur_A_Le_Droit_De(XDC_FAM_EXPLOITATION)=TRUE) OR
		   (COM04_Operateur_A_Le_Droit_De(XDC_FAM_PC_SIMPLIFIE)=TRUE)
			ITMA_TMT_Cree_Operateur()
		ELSE
		{
			/*! sinon plus de fiche operateur courante*/
			SET_SYSTEM_VAR@ (vg_num_fiche_operateur, null)
			SET_SYSTEM_VAR@ (vg_cle_fiche_operateur, null)
		}

		/*! je mets a jour la liste des fiches a traiter*/
		DB_SEND_POKE@(COM_CANAL_MTLT,"0|0")
	}

	/*! je ferme la fiche qui etait ouverte*/
	DB_SEND_POKE@(COM_CANAL_MTMC)

	vl_change_poste=TRUE
}

/* Lecture config GN pour RAU */
IF COM04_Operateur_A_Le_Droit_De(XDC_FAM_EXPLOITATION_PC2)
{
     vl_fichier = SYSTEM_VAR@ (vg_repertoire_migrazur) ++ COM_SOUS_REP_DEQ ++ "RAU_GN.txt"
     if FILE_EXISTS@(vl_fichier)
     {
          vl_liste_GN = READ_ASCII_FILE@(vl_fichier)
     }
     j = 0
     for i= 0 to ARRAY_SIZE@(vl_liste_GN)-1
          vl_tmp = COMMA_SPLIT@(vl_liste_GN[i])
          if vl_tmp[0] = vm_nom_site
          {
               vm_nom_GN[j] = vl_tmp
               j = j + 1
          }
     NEXT i
}

/*A
 * Charger la fenetre "menu principal"
 * ----------------------------------
 */
DELETE_FILE@ ("/tmp/barre")

vl_init=TRUE

vl_menu_init=ITMA_TMT_Construire_Menu()

POS_INIT:
vl_fenetre = DB_LOAD@ ("ITMA_TMT")
DB_XPOS@ (vl_fenetre, 0)
DB_YPOS@ (vl_fenetre, 1)
DB_TITLE@(vl_fenetre, "MENU PRINCIPAL (© Steria/Gtie/Graniou)")
DB_MENU_BAR@(vl_fenetre, vl_menu_init)
COM02_Attacher_Aide (vl_fenetre, "ITMA_TMT_Menu_Ecran_Textuel")

DB_HEIGHT@(vl_fenetre,1)
DB_WIDTH@(vl_fenetre,1264)

if (GET_ENV_VAR@("RTARCH")="hp700_hpux") {
DB_XPOS@ (vl_fenetre, 0)
DB_YPOS@ (vl_fenetre, -35)
}
else {
DB_WIDTH@(vl_fenetre,1680)
DB_XPOS@ (vl_fenetre, 0)
DB_YPOS@ (vl_fenetre, 1)

if (SYSTEM_VAR@(vg_numero_display)="1") or (SYSTEM_VAR@(vg_numero_display)="2")
DB_WIDTH@(vl_fenetre,1680)
}
/*A terminer l'ancien menu*/
DB_SEND_POKE@(COM_CANAL_MTMT,"")

/*A
 * Mettre en place la reception des messages
 * -----------------------------------------
 */

tl_messages_acceptes = {
	COM_CANAL_FIN,
	COM_CANAL_MTMT,
	COM_CANAL_MTMT_REVEIL_ON,
	COM_CANAL_MTMT_REVEIL_OFF,
	COM_CANAL_MTMT_REPONDEUR,
	COM_CANAL_MTMT_COMM_GN,
	COM_CANAL_MTMT_COMM_GN_TRANSFR,
	COM_CANAL_MTMT_ETAT_PCSIMPL,
	COM_CANAL_MTMT_ALARME,
	COM_CANAL_MTMT_EQT
}
/* cote synoptique s'abonner aux messages d'etat Pirau */
IF (SYSTEM_VAR@ (vg_numero_display) <> XDC_ECRAN_TXT)
{
	tl_messages_acceptes = ARRAY_APPEND@ (tl_messages_acceptes, { COM_CANAL_MTMT_ETAT_PIRAU })
}

DB_ACCEPT_POKES@ (vl_fenetre, tl_messages_acceptes)


IF (vl_init=FALSE)
  goto POS_DISP

/*! si je suis dans la famille exploitation et sur l'ecran main courante*/
IF ( (COM04_Operateur_A_Le_Droit_De(XDC_FAM_EXPLOITATION)=TRUE) OR (COM04_Operateur_A_Le_Droit_De(XDC_FAM_PC_SIMPLIFIE)=TRUE) ) AND
	(SYSTEM_VAR@(vg_numero_display) <> XDC_ECRAN_SYN) AND (vl_change_poste=FALSE)
{
	/*! je cree une fiche operateur */
	IF (PEND_FOR_NEW_TASK@("ITMA_TMT_Cree_Operateur")=COM_NOK)
	{
		ITMA_FIN()
	}
}

SET_SYSTEM_VAR@(vg_liste_reveils ++ "_1", null)
SET_SYSTEM_VAR@(vg_liste_reveils ++ "_2", null)
SET_SYSTEM_VAR@(vg_liste_reveils ++ "_3", null)
vm_reveil_1 = FALSE
vm_reveil_2 = FALSE
vm_reveil_3 = FALSE

vl_repondeur_on = FALSE


/*A
 * sur l'ecran main courante, selon le profil operateur :
 * afficher les avertissements operateurs, les alertes et les fiches a traiter ;
 * s'abonner aux etats de l'automate telephonique pour mise a jour du repondeur
 */
IF (SYSTEM_VAR@(vg_numero_display) <> XDC_ECRAN_SYN) 
{
	/*A je termine ces taches si elles existaient*/
	DB_SEND_POKE@(COM_CANAL_MTLT_FIN)
	DB_SEND_POKE@(COM_CANAL_MTAV_FIN)
	DB_SEND_POKE@(COM_CANAL_MTAA_FIN)
	DB_SEND_POKE@(COM_CANAL_MTLL_FIN)

	NEW_TASK@("ITMA_TAV_Avertissements")

	/*A si famille exploitation*/
	IF (COM04_Operateur_A_Le_Droit_De(XDC_FAM_PC_SIMPLIFIE)=TRUE)
	{
		NEW_TASK@("ITMA_TLT_Liste_FMC_Locales")
		NEW_TASK@("ITMA_TLL_Liste_Alertes")
	}

	/*si pas au PC simplifie*/
	IF (SYSTEM_VAR@(vg_type_machine)<>XDC_TYPEM_PCS) {
		IF (COM04_Operateur_A_Le_Droit_De(XDC_FAM_EXPLOITATION)=TRUE)
		{/*DEM 1150 : Double liste FMC sur tous les sites */
				NEW_TASK@("ITMA_TLT_Liste_FMC_A_Traiter", "ITMA_TMT", "", 1)
				NEW_TASK@("ITMA_TLT_Liste_FMC_A_Traiter", "ITMA_TMT", "", 2)
				NEW_TASK@("ITMA_TLT_Liste_FMC_A_Traiter", "ITMA_TMT", "", 3)
			NEW_TASK@("ITMA_TCA_rapide")
		}
	
		/*A si famille exploitation district ou CI ou administrateur */
		IF (COM04_Operateur_A_Le_Droit_De(XDC_FAM_EXPLOITATION_DISTRICT)=TRUE) OR
		(COM04_Operateur_A_Le_Droit_De(XDC_FAM_EXPLOITATION_CI)=TRUE) OR
		(COM04_Operateur_A_Le_Droit_De(XDC_FAM_ADMINISTRATION)=TRUE)	 OR
		(COM04_Operateur_A_Le_Droit_De(XDC_FAM_EXPLOITATION_PC2)=TRUE)
			NEW_TASK@("ITMA_TLL_Liste_Alertes")

		/*A si famille exploitation district*/
/*
		IF (COM04_Operateur_A_Le_Droit_De(XDC_FAM_EXPLOITATION_CI)=TRUE) 
			NEW_TASK@("ITMA_TEP_Etat_De_Poste","ITMA_TMT",CM_CREATION)
*/
		/*A s'abonner ou se desabonner aux etats de l'automate telephonique */
		IF COM04_Operateur_A_Le_Droit_De (XDC_FAM_EXPLOITATION)
			tl_args = XDC_DEBUT_ABONNEMENT_EQUEXT, vm_nom_site
		ELSE tl_args = XDC_FIN_ABONNEMENT_EQUEXT, vm_nom_site
			vl_msg = MTAR_MSG_EXEC, 1, MTAR_FCT_XZEA12,
				ARRAY_TO_STRING@ (tl_args, MTAR_CAR_SEPAR)
		DB_SEND_POKE@ (COM_CANAL_TAR01, vl_msg)
	}

	/*A
 	* sur l'ecran synoptique, selon le profil operateur,
 	* s'abonner ou non aux messages administrateur
 	*/
	IF COM04_Operateur_A_Le_Droit_De (XDC_FAM_ADMINISTRATION)
	{
		vl_msg = MTAR_MSG_EXEC, 1, MTAR_FCT_MSG_ADM, XDC_OUI

		NEW_TASK@("ITMA_TAA_Message_Adm")
	}
	ELSE vl_msg = MTAR_MSG_EXEC, 1, MTAR_FCT_MSG_ADM, XDC_NON
	DB_SEND_POKE@ (COM_CANAL_TAR01, vl_msg)


	/*s'abonner aux etats des PC simplifies et des districts au CI*/
	if (vm_site=XDC_CI) {
	  if ((COM04_Operateur_A_Le_Droit_De(XDC_FAM_EXPLOITATION_CI)) OR
	     (COM04_Operateur_A_Le_Droit_De(XDC_FAM_ADMINISTRATION)))
		vl_msg = MTAR_MSG_EXEC, 1, MTAR_FCT_ETAT_SIMPLIFIE,XDC_DEBUT_ABONNEMENT_EQUEXT
	  else
		vl_msg = MTAR_MSG_EXEC, 1, MTAR_FCT_ETAT_SIMPLIFIE, XDC_FERMER_ABONNEMENT_EQUEXT
	  DB_SEND_POKE@ (COM_CANAL_TAR01, vl_msg)
	}
	/*s'abonner aux etats des sites sur les districts */
	else {
	  vl_msg = MTAR_MSG_EXEC, 1, MTAR_FCT_ETAT_SIMPLIFIE,XDC_DEBUT_ABONNEMENT_EQUEXT
	  DB_SEND_POKE@ (COM_CANAL_TAR01, vl_msg)
	}
}


/* Initialiser l'etat du PIRAU dans la barre de menu */
ITMA_TMT_Mettre_A_Jour_Etat_PIRAU ()


/*
* A sur  ecran de gauche ou sur mono ecran
*/
IF (SYSTEM_VAR@(vg_numero_display) <> XDC_ECRAN_TXT)
{
  /*A
  * ouvrir la fiche bloc notes
  */
  NEW_TASK@("ITMA_TBN_Fiche_Bloc_Notes","ITMA_TLU_Login")
}


POS_DISP:

/*A
 * Traitements en cas d'erreur durant la visualisation :
 * informer l'operateur et selon la nature et la gravite
 * de l'erreur la tracer ou non, continuer ou abandonner
 * -----------------------------------------------------
 */

vl_installer_traitement_erreur = TRUE
WHILE vl_installer_traitement_erreur
	vl_installer_traitement_erreur = FALSE

    ON ERROR {
		ERROR_BOX@
		COM01_Trace (COM_WARNING, COM03_Message_Erreur (C_MODULE))
		vl_installer_traitement_erreur = TRUE
    }
WEND

/*A
 * j'arme un timer pour mettre a jour l'heure*/
'DB_TIMER@(vl_fenetre,60)


/* Recherche du fichier TOPS pour recuperer l'adresse de laffichage distant */

vl_display_IPaddress="xxx"
vl_fichier_tops = SYSTEM_VAR@ (vg_repertoire_migrazur) ++ COM_SOUS_REP_ADM ++ "TOPS_" ++ SYSTEM_VAR@(vg_poste) ++ ".txt"
if FILE_EXISTS@(vl_fichier_tops)
{
	OPEN_ASCII_FILE@ (vl_fichier_tops,"r")
	vl_lignes = READ_ASCII_FILE@(vl_fichier_tops)
	vl_taille = ARRAY_SIZE@(vl_lignes) -1
	for i = 0 to vl_taille
		if (SUBSTRING@(vl_lignes[i],1,1) <> "#" )
		{
			if (SUBSTRING@(vl_lignes[i],1,8) = "display1")
			{
				vl_array = ARRAY_FROM_STRING@(vl_lignes[i],"\t")
				vl_display_IPaddress= vl_array[1]
				vl_display_number= vl_array[2]
				vl_screen_number = vl_array[3]
			}
		}
	next i
	CLOSE_FILE@(vl_fichier_tops)
}

/* On construit le display avec le display TOPS si il existe */
if (vl_display_IPaddress <> "xxx")
{
	vl_display_cmd = "DISPLAY=" ++ vl_display_IPaddress ++ ":" ++ vl_display_number ++ "." ++ vl_screen_number ++ " "
}
else
{
	vl_display_cmd = ""
}

/*A
* boucle infinie de traitement des evenements*/
WHILE 1
	/*A
	* afficher la fenetre*/
	DB_DISPLAY@(vl_fenetre)

	/*A
	* attente d'un evenement*/
	vl_exit_value=DB_EXIT_CTRL@(vl_fenetre)
	IF vl_exit_value <> "poke_" AND SYSTEM_VAR@(vg_verrou)
		vl_exit_value = NULL

	/*A
	* suivant l'evenement */
	CASE OF vl_exit_value
	/*A
	* choix d'un item dans la barre de menu
	* on le recupere et on traite suivant le cas*/
	CASE "menu_bar_"
		vl_nom_macro=DB_MENU_BAR_WORD@(vl_fenetre)

		CASE OF vl_nom_macro
		CASE "sauve_cfg"
			tl_args="",""
			vl_msg = MTAR_MSG_EXEC, 1, MTAR_FCT_TIGMOT_SAUVE_CFG       ,
						ARRAY_TO_STRING@ (tl_args, MTAR_CAR_SEPAR)
			DB_SEND_POKE@ (COM_CANAL_TAR01, vl_msg)

		CASE "restaure_cft"
			tl_args="",""
			vl_msg = MTAR_MSG_EXEC, 1, MTAR_FCT_TIGMOT_DUPLIQUE_CFG       ,
						ARRAY_TO_STRING@ (tl_args, MTAR_CAR_SEPAR)
			DB_SEND_POKE@ (COM_CANAL_TAR01, vl_msg)

		CASE "verif_globale"
			tl_args[0]=12	/*XZCGC_VERIF_GLOBAL*/
			vl_msg = MTAR_MSG_EXEC, 1, MTAR_FCT_TIGMOT_VERIF_COHERENCE        ,
						ARRAY_TO_STRING@ (tl_args, MTAR_CAR_SEPAR)
			DB_SEND_POKE@ (COM_CANAL_TAR01, vl_msg)

		CASE "verif_defauts"
			tl_args[0]=3	/*XZCGC_VERIF_DEFT*/
			vl_msg = MTAR_MSG_EXEC, 1, MTAR_FCT_TIGMOT_VERIF_COHERENCE        ,
						ARRAY_TO_STRING@ (tl_args, MTAR_CAR_SEPAR)
			DB_SEND_POKE@ (COM_CANAL_TAR01, vl_msg)

		CASE "verif_trafic"
			tl_args[0]=1	/*XZCGC_VERIF_SCNT*/
			vl_msg = MTAR_MSG_EXEC, 1, MTAR_FCT_TIGMOT_VERIF_COHERENCE        ,
						ARRAY_TO_STRING@ (tl_args, MTAR_CAR_SEPAR)
			DB_SEND_POKE@ (COM_CANAL_TAR01, vl_msg)

		CASE "verif_alertes"
			tl_args[0]=7	/*XZCGC_VERIF_EQAL*/
			vl_msg = MTAR_MSG_EXEC, 1, MTAR_FCT_TIGMOT_VERIF_COHERENCE        ,
						ARRAY_TO_STRING@ (tl_args, MTAR_CAR_SEPAR)
			DB_SEND_POKE@ (COM_CANAL_TAR01, vl_msg)

		CASE "verif_sad"
			tl_args[0]=9	/*XZCGC_VERIF_RSAD*/
			vl_msg = MTAR_MSG_EXEC, 1, MTAR_FCT_TIGMOT_VERIF_COHERENCE        ,
						ARRAY_TO_STRING@ (tl_args, MTAR_CAR_SEPAR)
			DB_SEND_POKE@ (COM_CANAL_TAR01, vl_msg)

		CASE "verif_reseau"
			tl_args[0]=5	/*XZCGC_VERIF_RESE*/
			vl_msg = MTAR_MSG_EXEC, 1, MTAR_FCT_TIGMOT_VERIF_COHERENCE        ,
						ARRAY_TO_STRING@ (tl_args, MTAR_CAR_SEPAR)
			DB_SEND_POKE@ (COM_CANAL_TAR01, vl_msg)

		CASE "verif_eqts"
			tl_args[0]=8	/*XZCGC_VERIF_EQUI*/
			vl_msg = MTAR_MSG_EXEC, 1, MTAR_FCT_TIGMOT_VERIF_COHERENCE        ,
						ARRAY_TO_STRING@ (tl_args, MTAR_CAR_SEPAR)
			DB_SEND_POKE@ (COM_CANAL_TAR01, vl_msg)

		CASE "modif_reseau"
			tl_args[0]= 50	/*XZCGC_VERIF_RESE*/
			vl_msg = MTAR_MSG_EXEC, 1, MTAR_FCT_TIGMOT_VERIF_COHERENCE        ,
						ARRAY_TO_STRING@ (tl_args, MTAR_CAR_SEPAR)
			DB_SEND_POKE@ (COM_CANAL_TAR01, vl_msg)

		CASE "modif_eqts"
			tl_args[0]= 80	/*XZCGC_VERIF_EQUI*/
			vl_msg = MTAR_MSG_EXEC, 1, MTAR_FCT_TIGMOT_VERIF_COHERENCE        ,
						ARRAY_TO_STRING@ (tl_args, MTAR_CAR_SEPAR)
			DB_SEND_POKE@ (COM_CANAL_TAR01, vl_msg)

		CASE "journal_adm"
			NEW_TASK@("ITMA_JAD_Journal_Administration",
					"ITMA_TMT_Menu_Ecran_Textuel")

		CASE "config_eqts"
			NEW_TASK@("ITMA_TRM_Reconfig_Machine","GMOT")

		/*message de crise*/
		CASE "message_crise"
			NEW_TASK@("ITMA_WEB_crise",
					"ITMA_TMT_Menu_Ecran_Textuel")

		/*FAQ*/
		CASE "FAQ"
			NEW_TASK@("ITMA_TFQ_FAQ",
					"ITMA_TMT_Menu_Ecran_Textuel")
		/*Zone d'ombre FLU*/
		CASE "zoflu"
			NEW_TASK@("ITMA_TBR_Visualiser_FLU",
					"ITMA_TMT_Menu_Ecran_Textuel")

		/*synthese des messages trafic FM*/
		CASE "synthese_TFM"
			NEW_TASK@("ITMA_TMA_Synthese_TFM",
					"ITMA_TMT_Menu_Ecran_Textuel")
		CASE "synthese_TFM_action"
			NEW_TASK@("ITMA_TMA_Synthese_TFM_action",
					"ITMA_TMT_Menu_Ecran_Textuel")

                /*SAGA*/
		/*acces a la liste des messages TFM venant de datex*/
		CASE "datex_tfm"
			NEW_TASK@("ITMA_DTX_Message",
				  "ITMA_TMT_Menu_Ecran_Textuel")
												
		CASE "piloter_surcharge_tdp"
			NEW_TASK@("ITMA_TDP_surcharge",
					 "ITMA_TMT_Menu_Ecran_Textuel")

		CASE "piloter_scenarios_saga"
			NEW_TASK@("ITMA_TSAGA_scenario",
					"ITMA_TMT_Menu_Ecran_Textuel")

		CASE "piloter_pmv_saga"
			NEW_TASK@("ITMA_TSAGA_pilotage_d_un_PMV",
					"ITMA_TMT_Menu_Ecran_Textuel")

		CASE "piloter_pmva_saga"
			NEW_TASK@("ITMA_TSAGA_pilotage_d_un_PMVA",
					"ITMA_TMT_Menu_Ecran_Textuel")

		CASE "piloter_baf_saga"
			NEW_TASK@("ITMA_TSAGA_pilotage_BAF",
					"ITMA_TMT_Menu_Ecran_Textuel")
		
		CASE "piloter_nav_saga"
			NEW_TASK@("ITMA_TSAGA_pilotage_NAV",
					"ITMA_TMT_Menu_Ecran_Textuel")

		/*fermeture las planas sens 1*/
		CASE "fermeture_las_planas_1"
			NEW_TASK@("fermeture_las_planas_1",
					"ITMA_TMT_Menu_Ecran_Textuel")

		/*fermeture las planas sens 1*/
		CASE "fermeture_las_planas_s1"
			NEW_TASK@("fermeture_las_planas_s1",
					"ITMA_TMT_Menu_Ecran_Textuel")

		/* Fonction "coup de poing" */
		CASE "coup_de_poing"
			NEW_TASK@("ITMA_TCP_Coup_De_Poing",
					"ITMA_TMT_Menu_Ecran_Textuel")

		/* Fonction "coup de poing" au tunnel de Toulon */
		CASE "coup_de_poing_toulon"
			NEW_TASK@("ITMA_TCPT_Coup_De_Poing_Toulon",
					"ITMA_TMT_Menu_Ecran_Textuel")

		/* Consultation trace "coup de poing" */
		CASE "trace_coup_de_poing"
			NEW_TASK@("ITMA_TCP_Visualiser_Trace",
					"ITMA_TMT_Menu_Ecran_Textuel")

		/*configuration de la diffusion des TdP au Web Trafic */
		CASE "tdp_web_trafic"
			NEW_TASK@("ITMA_TPW_Diff_TDP_WebTrafic",
					"ITMA_TMT_Menu_Ecran_Textuel")

		/*gestion du mail*/
		CASE "pc_mail"
			NEW_TASK@("pc_mail",
					"ITMA_TMT_Menu_Ecran_Textuel")

		/*gestion de la gravure sur cdrom */
		CASE "graver"
			NEW_TASK@("ITMA_TBR_Graver_CD",
					"ITMA_TMT_Menu_Ecran_Textuel")

		/*gestion du menage dans le repertoire mbo */
		CASE "nettoyage"
			NEW_TASK@("ITMA_TBR_Menage_MBO",
					"ITMA_TMT_Menu_Ecran_Textuel")

		/* affichage des evolutions du SAE */
		CASE "a_propos_sae"
			vl_menu = ITMA_TBR_Menu_Appli_Applix (TBR_MENU_WP_AID)
			IF (vl_menu > 0) {
				vl_fichier = SYSTEM_VAR@ (vg_repertoire_migrazur) ++ COM_SOUS_REP_AIDE ++ "APropos.aw"
				WP_APPLICATION_DLG@ (vl_menu, FALSE)
				WP_SET_VIEW_ONLY@ (TRUE)
				WP_LOAD_FILE@ (vl_fichier)
			}


		/*creation fiche bouchon predef*/
		CASE "bouchons_predefinis"
			/*B controler qu'une fiche n'est pas deja ouverte*/
			IF SYSTEM_VAR@ (vg_fmc_ouverte) {
				BEEP@
				INFO_MESSAGE@ (COM_LIB_FMC_OUVERTE)
			}
			ELSE {
				NEW_TASK@("ITMA_TBP_Bouchons_Predef",
						"ITMA_TMT_Menu_Ecran_Textuel")
			}

		/*Decrire TDM RTFM*/
		CASE "tdp_rtfm"
			NEW_TASK@("ITMA_TMA_diffusion_tdp_rtfm",
					"ITMA_TMT_Menu_Ecran_Textuel")
		
		/*A affichage de l'aide*/
		CASE "aide"
			COM33_Aide_Renov ("ITMA_TMT")

		/*liste des evts strada*/
		CASE "evt_strada"
			NEW_TASK@("ITMA_TES_Evenements_Strada",
					"ITMA_TMT_Menu_Ecran_Textuel")

		/*A calcul de l'indice qualite*/
		CASE "indice_qualite"
			NEW_TASK@("ITMA_TIQ_Qualite",
					"ITMA_TMT_Menu_Ecran_Textuel")

		/*A donnees individuelles*/
		CASE "donnees_indiv"
			NEW_TASK@("ITMA_TDI_Donnees_Individuelles",
					"ITMA_TMT_Menu_Ecran_Textuel")

		/*A editeur de connaissances*/
		CASE "dedi"
			DB_CLOSE@(vl_fenetre)
			PEND_FOR_NEW_TASK@("dedi_menu")

			SET_SELECTIONS@(vl_menu_init,vm_menu_items)
			vl_init=FALSE
			goto POS_INIT

		CASE "alarme"
			NEW_TASK@("ITMA_TLM_Liste_Des_Alarmes","ISYN")
			/*vm_menu_items[vm_cascade_alarme,1,vm_bouton_alarme,5]=PIX_ALARME_VERT*/
			UPDATE_SELECTIONS_FILE@(21,"/tmp/barre",vm_menu_items)

		CASE "eqt"
			NEW_TASK@("ITMA_TEI_Equipements_Indispo","ISYN")
			vm_menu_items[vm_cascade_eqt,1,vm_bouton_eqt,5]=PIX_EQT_VERT
			UPDATE_SELECTIONS_FILE@(21,"/tmp/barre",vm_menu_items)

		/*A appui sur l'icone reveil*/
		CASE "reveil"
			IF ( (vm_reveil_1 <> FALSE)  OR  (vm_reveil_2 <> FALSE)  OR  (vm_reveil_3 <> FALSE) )
			{
				vm_reveil_1 = FALSE
				vm_reveil_2 = FALSE
				vm_reveil_3 = FALSE
				IF NOT IS_NULL@ (vm_cascade_reveil)
				{
					vm_menu_items[vm_cascade_reveil,1,vm_bouton_reveil,5]=PIX_REVEIL_OFF
					UPDATE_SELECTIONS_FILE@(21,"/tmp/barre",vm_menu_items)
				}
			}
			NEW_TASK@("ITMA_TLT_Liste_Reveils",
					"ITMA_TMT_Menu_Ecran_Textuel")

		/*appui de l icone basculement RAU CA*/
		CASE "basc_RAU_CA"
			IF (vm_site=XDC_CI) {
				/*si on a le RAU en main*/
				if (vm_menu_items[vm_cascade_comm_DM, 1, vm_bouton_comm_DM, 5] = PIX_RAU_CA_EN_MAIN) {
					NEW_TASK@("ITMA_TRA_Commander_RAU",
						"ITMA_TMT_Menu_Ecran_Textuel",XDC_VC)
				}
			}

		/* basculement troncon RAU*/
		CASE "basc_troncon_RAU"
				NEW_TASK@("ITMA_TRAU_bascul_troncon",
						"ITMA_TMT_Menu_Ecran_Textuel")

		/*appui de l icone basculement RAU DA*/
		CASE "basc_RAU_DA"
			IF (vm_site=XDC_CI) {
				/*si on a le RAU en main*/
				if (vm_menu_items[vm_cascade_comm_DA, 1, vm_bouton_comm_DA, 5] = PIX_RAU_DA_EN_MAIN) 				{
						NEW_TASK@("ITMA_TRA_Commander_RAU",
						"ITMA_TMT_Menu_Ecran_Textuel",XDC_DA)
				}
			}

		/*appui de l icone basculement RAU DS*/
		CASE "basc_RAU_PR"
			IF (vm_site=XDC_CI) {
				/*si on a le RAU en main*/
				if (vm_menu_items[vm_cascade_comm_DS, 1, vm_bouton_comm_DS, 5] = PIX_RAU_PR_EN_MAIN) 				{
						NEW_TASK@("ITMA_TRA_Commander_RAU",
						"ITMA_TMT_Menu_Ecran_Textuel",XDC_DP)
				}
			}

		/*appui de l icone basculement RAU DC*/
		CASE "basc_RAU_VE"
			IF (vm_site=XDC_CI) {
				/*si on a le RAU en main*/
				if (vm_menu_items[vm_cascade_comm_DC, 1, vm_bouton_comm_DC, 5] = PIX_RAU_VE_EN_MAIN) 				{
						NEW_TASK@("ITMA_TRA_Commander_RAU",
						"ITMA_TMT_Menu_Ecran_Textuel",XDC_VE)
				}
			}

		/*appui de l icone basculement RAU DP*/
		CASE "basc_RAU_VD"
			IF (vm_site=XDC_CI) {
				/*si on a le RAU en main*/
				if (vm_menu_items[vm_cascade_comm_DP, 1, vm_bouton_comm_DP, 5] = PIX_RAU_VD_EN_MAIN) 				{
						NEW_TASK@("ITMA_TRA_Commander_RAU",
						"ITMA_TMT_Menu_Ecran_Textuel",XDC_VD)
				}
			}

          	/*A appui sur l'icone GN */
          	CASE "comm_GN"
          	CASE "comm_GN1"
               		IF (COM04_Operateur_A_Le_Droit_De(XDC_FAM_EXPLOITATION_PC2))
                    		PEND_FOR_NEW_TASK@("ITMA_TRT_basculement_RAU",0)

          	CASE "comm_GN2"
               		IF (COM04_Operateur_A_Le_Droit_De(XDC_FAM_EXPLOITATION_PC2))
                    		PEND_FOR_NEW_TASK@("ITMA_TRT_basculement_RAU",1)
          	CASE "comm_GN3"
               		IF (COM04_Operateur_A_Le_Droit_De(XDC_FAM_EXPLOITATION_PC2))
                    		PEND_FOR_NEW_TASK@("ITMA_TRT_basculement_RAU",2)

		/*A appui sur l'icone repondeur */
		CASE "repondeur_tel"
			IF vl_repondeur_on {
				INFO_MESSAGE@ (C_LIB_ANNUL_RENVOI)
				tl_args = SYSTEM_VAR@(vg_numero_poste), XDC_NON, vm_nom_site
			} ELSE {
				INFO_MESSAGE@ (C_LIB_RENVOI_APPEL)
				tl_args = SYSTEM_VAR@(vg_numero_poste), XDC_OUI, vm_nom_site
			}
			vl_msg = MTAR_MSG_EXEC, 1, MTAR_FCT_XZEL02_03,
						ARRAY_TO_STRING@ (tl_args, MTAR_CAR_SEPAR)
			DB_SEND_POKE@ (COM_CANAL_TAR01, vl_msg)


		/*A creer une fiche main courante*/
		CASE "creer_fmc"
			/*B controler qu'une fiche n'est pas deja ouverte*/
			IF SYSTEM_VAR@ (vg_fmc_ouverte) {
				BEEP@
				INFO_MESSAGE@ (COM_LIB_FMC_OUVERTE)
			}
			ELSE {
				/*B afficher la boite de choix du type*/
				vl_ret=PEND_FOR_NEW_TASK@("ITMA_TMC_choix_type_fmc",
					XDC_FMC_ETAT_TRAI, TRUE)

				/*B si le retour est non null i.e. l'operateur a choisi un type*/
				IF (vl_ret<>NULL)
				{	
					/*A REPERE2 s'il s'agit d'une fmc delestage ou deviation 
					    on appelle l'ihm plans de secours*/
					IF (vl_ret[0] =XZAEC_FMC_Deviation or vl_ret[0] =XZAEC_FMC_Delestage)
						/*B ouvrir la fenetre plans de secours */
						NEW_TASK@("ITMA_TFP_Fiche_Plan_Secours",
								"ITMA_TMT_Menu_Ecran_Textuel",
								FALSE, vl_ret)

					/*A si ce n'est pas une fiche operateur*/
					ELSE IF (vl_ret[0]<>XZAEC_FMC_PosteOperateur)
						/*B ouvrir la fiche main courante*/
						NEW_TASK@("ITMA_TMC_Fiche_Main_Courante",
							 "ITMA_TMT_Menu_Ecran_Textuel",
							 vl_ret,1,XDC_FMC_ETAT_TRAI)
					ELSE
						INFO_MESSAGE@(C_LIB_TYPE_FMC_NOK)
				}
			}

		/*A creer une fiche main courante en prevision*/
		CASE "creer_fmc_prevision"
			/*B controler qu'une fiche n'est pas deja ouverte*/
			IF SYSTEM_VAR@ (vg_fmc_ouverte) {
				BEEP@
				INFO_MESSAGE@ (COM_LIB_FMC_OUVERTE)
			}
			ELSE {
				/*B afficher la boite de choix du type*/
				vl_ret=PEND_FOR_NEW_TASK@("ITMA_TMC_choix_type_fmc",
								XDC_FMC_ETAT_PREV, TRUE)

				/*B si le retour est non null i.e. l'operateur a choisi un type*/
				IF (vl_ret<>NULL) {	
					/*A si ce n'est pas une fiche operateur*/
					IF (vl_ret[0]<>XZAEC_FMC_PosteOperateur)
						/*B ouvrir la fiche main courante*/
						NEW_TASK@("ITMA_TMC_Fiche_Main_Courante",
							 "ITMA_TMT_Menu_Ecran_Textuel",
							 vl_ret,1,XDC_FMC_ETAT_PREV)
					ELSE
						INFO_MESSAGE@ (C_LIB_TYPE_FMC_NOK)
				}
			}

		/* creer une fiche main courante travaux en prevision sur le PC simplifie*/
		CASE "creer_fmc_trv_pcs"
			/*B controler qu'une fiche n'est pas deja ouverte*/
			IF SYSTEM_VAR@ (vg_fmc_ouverte) {
				BEEP@
				INFO_MESSAGE@ (COM_LIB_FMC_OUVERTE)
			} ELSE {
				/*ouvrir la FMC travaux*/
				vl_ret=XZAEC_FMC_Travaux,NULL,NULL
				NEW_TASK@("ITMA_TMC_Fiche_Main_Courante",
					"ITMA_TMT_Menu_Ecran_Textuel",
					vl_ret,1,XDC_FMC_ETAT_PREV)
			}

		/* modifier une fiche main courante travaux en prevision sur le PC simplifie*/
		CASE "modifier_fmc_trv_pcs"
			/*B controler qu'une fiche n'est pas deja ouverte*/
			IF SYSTEM_VAR@ (vg_fmc_ouverte) {
				BEEP@
				INFO_MESSAGE@ (COM_LIB_FMC_OUVERTE)
			}
			ELSE
				/*afficher la liste des FMC travaux en prevision*/
				PEND_FOR_NEW_TASK@("ITMA_TLT_Travaux",
					"ITMA_TMT_Menu_Ecran_Textuel")

		/*A creer une alarme*/
		CASE "creer_alarme"
			NEW_TASK@("ITMA_TCM_Creer_Alarme",
						"ITMA_TMT_Menu_Ecran_Textuel")
		/*A
		* changement de l'intensite de l'equipement*/
		CASE "intensite"
			/*A
			* lancer ITMA_TPM_choix_intensité*/
			NEW_TASK@("ITMA_TPM_choix_intensite",
						"ITMA_TMT_Menu_Ecran_Textuel")

		CASE "FMC_travaux"
			/*B controler qu'une fiche n'est pas deja ouverte*/
			IF SYSTEM_VAR@ (vg_fmc_ouverte) 
			{
				BEEP@
				INFO_MESSAGE@ (COM_LIB_FMC_OUVERTE)
			}
			ELSE
			{
				/*A ouvrir la fiche main courante travaux en prevision*/
				vl_ret=XZAEC_FMC_Travaux,NULL,NULL
				NEW_TASK@("ITMA_TMC_Fiche_Main_Courante",
						 "ITMA_TMT_Menu_Ecran_Textuel",
						 vl_ret,1,XDC_FMC_ETAT_PREV)
			}

		/* A liste des messages trafic FM*/
		CASE "tfm_messages"
			/*A lancer ITMA_TMA*/
			NEW_TASK@("ITMA_TMA_Msg_Animateur_TFM",
					"ITMA_TMT_Menu_Ecran_Textuel");

		/*A liste des evenements*/
		CASE "liste_evenements"
			/*A lancer ITMA_TLE_Liste_Evenements*/
			NEW_TASK@("ITMA_TLE_Liste_Evenements",
						"ITMA_TMT_Menu_Ecran_Textuel")

		/*A Debit stations */
		CASE "debit_stations"
			/*A lancer la fiche metier 3 de FMBO */
			INSTALL_FILE@(PATH_OUTILS++"/"++VUE_COMMUN)
			INSTALL_FILE@(PATH_OUTILS++"/"++VUE_APPLIX)
			/*A ouverture d'une connexion sur le serveur du CI pour executer les fiches */
			vl_canal_SGBD_Fiche = COM43_SQL_CONNECT( XDC_NOM_SITE_CI)

			IF NOT IS_NULL@(vl_canal_SGBD_Fiche)
			{
				SQL_CHANNEL_MASTER@(vl_canal_SGBD_Fiche,0)
				SET_SYSTEM_VAR@(vg_canal_SGBD_Fiche,vl_canal_SGBD_Fiche)
				INSTALL_FILE@(PATH_OUTILS ++ "/VUEM03_DebitHoraire.elo")
				PEND_FOR_NEW_TASK@("VUEM03_DebitHoraire")
				SQL_DISCONNECT@(vl_canal_SGBD_Fiche)
				SET_SYSTEM_VAR@(vg_canal_SGBD_Fiche,NULL)
			}


		/*A liste des alarmes*/
		CASE "liste_alarmes"
			NEW_TASK@("ITMA_TLM_Liste_Des_Alarmes",
						"ITMA_TMT_Menu_Ecran_Textuel")

		/*A
		* consultation annuaire */
		CASE "annuaire"
			NEW_TASK@("ITMA_TLA_Liste_Interlocuteurs",
						"ITMA_TMT_Menu_Ecran_Textuel")

		/*A
		* consultation astreintes */
		CASE "astreintes"
			NEW_TASK@("ITMA_TLS_Liste_Astreintes",
						"ITMA_TMT_Menu_Ecran_Textuel")

		/*A utilisation ressources PMV*/
		CASE "utilisation_pmv"
			NEW_TASK@("ITMA_TUR_Util_Ressources",
						"ITMA_TMT_Menu_Ecran_Textuel",
						XDC_EQT_PMV)

		/*A utulisation ressources NAV*/
		CASE "utilisation_nav"
			NEW_TASK@("ITMA_TUR_Util_Ressources",
						"ITMA_TMT_Menu_Ecran_Textuel",
						XDC_EQT_NAV)

		/*A consultation plans de secours*/
		CASE "plans_secours"
			NEW_TASK@("ITMA_TFP_Fiche_Plan_Secours",
						"ITMA_TMT_Menu_Ecran_Textuel", FALSE, { })

		/*A voies coupees*/
		CASE "voies_coupees"
			NEW_TASK@("ITMA_TVC_Voies_Coupees",
						"ITMA_TMT_Menu_Ecran_Textuel")

		/*A liste des indisponibilites*/
		CASE "indisponibilites"
			NEW_TASK@("ITMA_TEI_Equipements_Indispo",
						"ITMA_TMT_Menu_Ecran_Textuel")

		/*A mettre en hors service un equipement*/
		CASE "service_equipement"
			NEW_TASK@("ITMA_THS_Equipements_HS",
						"ITMA_TMT_Menu_Ecran_Textuel")

		/*A equipement a reactiver/desactiver*/
		CASE "equip_a_reactiver"
			NEW_TASK@("ITMA_TER_Equip_A_Reactiver",
						"ITMA_TMT_Menu_Ecran_Textuel")

		/*A activer/desactiver un equipement*/
		CASE "activer_equipement"
			NEW_TASK@("ITMA_TEA_Activation_Eqt",
						"ITMA_TMT_Menu_Ecran_Textuel")

		/*A
		* configuration utilisateurs */
		CASE "cfg_utils"
			NEW_TASK@("ITMA_TPU02_Config_Utilisateurs",
						"ITMA_TMT_Menu_Ecran_Textuel")



           /*A
		* configuration libelles predefinis */
		CASE "cfg_lib"
			NEW_TASK@("ITMA_TPL_Param_libelles",
						"ITMA_TMT_Menu_Ecran_Textuel")

		/*A
		* configuration profils */
		CASE "cfg_profils"
			NEW_TASK@("ITMA_TPU01_Configurer_Profils",
						"ITMA_TMT_Menu_Ecran_Textuel")

		/*A
		* configuration vitesses libres */
		CASE "cfg_vitesses_libres"
			NEW_TASK@("ITMA_TCR_Configurer_VTL",
						"ITMA_TMT_Menu_Ecran_Textuel")

		/*A
		* configuration plans de secours */
		CASE "cfg_plans_secours"
			NEW_TASK@("ITMA_TFP_Fiche_Plan_Secours",
						"ITMA_TMT_Menu_Ecran_Textuel", TRUE, { })
			/* suppression du lancement de ticfg 
			SHELL_COMMAND@ (CMD_SYN_CFG)*/

		/*
		* configuration des cameras */
		CASE "cfg_camera"
			NEW_TASK@("ITMA_TCC_Configurer_Camera",
						"ITMA_TMT_Menu_Ecran_Textuel")
		/*A
		* configuration bons de livraison */
		CASE "cfg_editer_BL"
			NEW_TASK@("ITMA_TBL_Bon_De_Livraison",
						"ITMA_TMT_Menu_Ecran_Textuel")

		CASE "adm_cal_vacances"
			NEW_TASK@("ITMA_TJV_Jours_Vacances", "ITMA_TMT_Menu_Ecran_Textuel")

		/*A
		* administration annuaire */
		CASE "adm_annuaire"
			NEW_TASK@("ITMA_TLA_Liste_Interlocuteurs",
						"ITMA_TMT_Menu_Ecran_Textuel")

		/*A
		* administration astreintes */
		CASE "adm_astreintes"
			NEW_TASK@("ITMA_TLS_Liste_Astreintes",
						"ITMA_TMT_Menu_Ecran_Textuel")

		CASE "histo_regul"
			NEW_TASK@("ITMA_TRG_Historique",
					"ITMA_TMT_Menu_Ecran_Textuel")
	
		CASE "adm_regul_fmc"
			NEW_TASK@("ITMA_TRG_param_fmc",
				 "ITMA_TMT_Menu_Ecran_Textuel")

		CASE "adm_regul_scenarios"
			NEW_TASK@("ITMA_TRG_param_scenarios",
					"ITMA_TMT_Menu_Ecran_Textuel")

		CASE "adm_regul_conditions"
			NEW_TASK@("ITMA_TRG_param_conditions",
				 "ITMA_TMT_Menu_Ecran_Textuel")

		CASE "adm_regul_stations"
			NEW_TASK@("ITMA_TRG_Choix_Station",
					"ITMA_TMT_Menu_Ecran_Textuel")
		CASE "adm_regul"
			NEW_TASK@("ITMA_TRG_Param",
					"ITMA_TMT_Menu_Ecran_Textuel")

		CASE "adm_libelles_plans"
			NEW_TASK@("ITMA_TCFE_Param_Libelles",
					"ITMA_TMT_Menu_Ecran_Textuel")
		CASE "neutre_pmv"
			NEW_TASK@ ("ITMA_TNP_Neutre_PMV",
					"ITMA_TMT_Menu_Ecran_Textuel")

		CASE "neutre_pmva"
			NEW_TASK@ ("ITMA_TNP_Neutre_PMVA",
					"ITMA_TMT_Menu_Ecran_Textuel")

		CASE "neutre_pmv_saga"
			NEW_TASK@ ("ITMA_TNP_SAGA_Neutre_PMV",
					"ITMA_TMT_Menu_Ecran_Textuel")

		CASE "neutre_pmva_saga"
			NEW_TASK@ ("ITMA_TNP_SAGA_Neutre_PMVA",
					"ITMA_TMT_Menu_Ecran_Textuel")

		/*evts a exporter vers strada*/
		CASE "cfg_evt_strada"
			NEW_TASK@("ITMA_STRA_Choix_FMC",
					 "ITMA_TMT_Menu_Ecran_Textuel")

		/*stations radt a exporter vers strada*/
		CASE "cfg_radt_strada"
			NEW_TASK@("ITMA_STRA_Choix_Stations",
					"ITMA_TMT_Menu_Ecran_Textuel")

		/*stations radt a importer de strada*/
		CASE "demand_catalog"
       		/* Envoyer la demande de catalog  */
           	vl_msg = MTAR_MSG_EXEC, 1, MTAR_FCT_DEMCAT, ""
           	DB_SEND_POKE@ (COM_CANAL_TAR01, vl_msg)

		/*stations radt a importer de strada*/
		CASE "cfg_strada_radt"
			NEW_TASK@("ITMA_STRA_Catalog_Stations",
					"ITMA_TMT_Menu_Ecran_Textuel")

		/*PMV a exporter vers strada*/
		CASE "cfg_pmv_strada"
			NEW_TASK@("ITMA_STRA_Choix_PMV",
					"ITMA_TMT_Menu_Ecran_Textuel")

		/*A pilotage d'un pmv*/
		CASE "piloter_pmv"
		   IF COM21_Tache_De_La_Macro("ITMA_TPM_pilotage_d_un_PMV")=NULL
				NEW_TASK@("ITMA_TPM_pilotage_d_un_PMV",
							"ITMA_TMT_Menu_Ecran_Textuel")

		CASE "piloter_pmva"

		   IF COM21_Tache_De_La_Macro("ITMA_TPMVA_pilotage_d_un_PMVA")=NULL
				NEW_TASK@("ITMA_TPMVA_pilotage_d_un_PMVA",
						"ITMA_TMT_Menu_Ecran_Textuel")
		/*A pilotage d'un prv*/
		CASE "piloter_prv"
		   IF COM21_Tache_De_La_Macro("ITMA_TPRV_pilotage_d_un_PRV")=NULL
				NEW_TASK@("ITMA_TPRV_pilotage_d_un_PRV",
							"ITMA_TMT_Menu_Ecran_Textuel")
		case "piloter_cfe"
			IF COM21_Tache_De_La_Macro("ITMA_TCFE_pilotage_CFE")=NULL
				NEW_TASK@("ITMA_TCFE_pilotage_CFE",
						"ITMA_TMT_Menu_Ecran_Textuel")

		case "piloter_imu"
			IF COM21_Tache_De_La_Macro("ITMA_TIMU_pilotage_IMU")=NULL
				NEW_TASK@("ITMA_TIMU_pilotage_IMU",
						"ITMA_TMT_Menu_Ecran_Textuel")

		case "piloter_sono_pau"
			IF COM21_Tache_De_La_Macro("ITMA_TRAU_pilotage_SONO")=NULL
				NEW_TASK@("ITMA_TRAU_pilotage_SONO",
						"ITMA_TMT_Menu_Ecran_Textuel")

		/*A pilotage du RAU */
		CASE "piloter_rau"
		   IF COM21_Tache_De_La_Macro("ITMA_TRA_Commander_RAU")=NULL
				NEW_TASK@("ITMA_TRA_Commander_RAU",
							"ITMA_TMT_Menu_Ecran_Textuel")

		CASE "piloter_camera"
		   IF COM21_Tache_De_La_Macro("ITMA_TCA_choix_pil_cam")=NULL
				NEW_TASK@("ITMA_TCA_choix_pil_cam",
							"ITMA_TMT_Menu_Ecran_Textuel")

		/*A Piloter la signalisation tunnel*/
		CASE "tunnel"
		   if ( COM21_Tache_De_La_Macro("ITMA_TTU_pilotage_tunnel")=NULL and
                COM21_Tache_De_La_Macro("ITMA_TTU_signalisation")=NULL and
                COM21_Tache_De_La_Macro("ITMA_TTU_eclairage")=NULL and
                COM21_Tache_De_La_Macro("ITMA_TTU_ventilation")=NULL and
                COM21_Tache_De_La_Macro("ITMA_TTU_lt")=NULL and
                COM21_Tache_De_La_Macro("ITMA_TTU_lits_arret")=NULL and
                COM21_Tache_De_La_Macro("ITMA_TTU_LTN")=NULL and
                COM21_Tache_De_La_Macro("ITMA_TTU_BT")=NULL and
                COM21_Tache_De_La_Macro("ITMA_TTU_HT")=NULL and
                COM21_Tache_De_La_Macro("ITMA_TTU_exploitation")=NULL and
                COM21_Tache_De_La_Macro("ITMA_TTU_systeme")=NULL )
				
                NEW_TASK@("ITMA_TTU_pilotage_tunnel", "ITMA_TMT_Menu_Ecran_Textuel")

		/*A Piloter la signalisation tunnel*/
		CASE "HT"
		   if ( COM21_Tache_De_La_Macro("ITMA_TTU_pilotage_tunnel")=NULL and
                COM21_Tache_De_La_Macro("ITMA_TTU_signalisation")=NULL and
                COM21_Tache_De_La_Macro("ITMA_TTU_eclairage")=NULL and
                COM21_Tache_De_La_Macro("ITMA_TTU_ventilation")=NULL and
                COM21_Tache_De_La_Macro("ITMA_TTU_lt")=NULL and
                COM21_Tache_De_La_Macro("ITMA_TTU_lits_arret")=NULL and
                COM21_Tache_De_La_Macro("ITMA_TTU_LTN")=NULL and
                COM21_Tache_De_La_Macro("ITMA_TTU_BT")=NULL and
                COM21_Tache_De_La_Macro("ITMA_TTU_HT")=NULL and
                COM21_Tache_De_La_Macro("ITMA_TTU_exploitation")=NULL and
                COM21_Tache_De_La_Macro("ITMA_TTU_systeme")=NULL )
				
                NEW_TASK@("ITMA_TTU_HT")


		/*A Piloter la signalisation echangeur*/
		CASE "echangeur"
		   IF COM21_Tache_De_La_Macro("ITMA_TEC_pilotage_echangeur")=NULL
				NEW_TASK@("ITMA_TEC_pilotage_echangeur",
							"ITMA_TMT_Menu_Ecran_Textuel")

		/*A piloter la NAV*/
		CASE "nav"
		   IF COM21_Tache_De_La_Macro("ITMA_TNA_pilotage_NAV")=NULL
				NEW_TASK@("ITMA_TNA_pilotage_NAV",
							"ITMA_TMT_Menu_Ecran_Textuel")

		CASE "piloter_baf"
		   IF COM21_Tache_De_La_Macro("ITMA_TBAF_pilotage_BAF")=NULL
				NEW_TASK@("ITMA_TBAF_pilotage_BAF",
						"ITMA_TMT_Menu_Ecran_Textuel")

		CASE "piloter_bad"
		   IF COM21_Tache_De_La_Macro("ITMA_TBAB_pilotage_BAD")=NULL
				NEW_TASK@("ITMA_TBAD_pilotage_BAD",
						"ITMA_TMT_Menu_Ecran_Textuel")

                /*A piloter la Panneau d'alerte*/
		CASE "panneau"
		   IF COM21_Tache_De_La_Macro("ITMA_TPP_pilotage_PAL")=NULL
				NEW_TASK@("ITMA_TPP_pilotage_PAL",
							"ITMA_TMT_Menu_Ecran_Textuel")

                /*A piloter les pmva */
		CASE "pmva"
				NEW_TASK@("ITMA_TPMVA_pilotage_d_un_PMVA",
							"ITMA_TMT_Menu_Ecran_Textuel")

                /*A piloter le Panneau d'alerte par tout ou rien */
		CASE "panneau_alerte"
		   IF COM21_Tache_De_La_Macro("panneau_alerte")=NULL
				NEW_TASK@("panneau_alerte",
							"ITMA_TMT_Menu_Ecran_Textuel")

                /*A piloter le PMVA de cagnes par tout ou rien REPERE1 */
		CASE "pmva_cagnes"
		   IF COM21_Tache_De_La_Macro("pmva_cagnes")=NULL
				NEW_TASK@("pmva_cagnes",
							"ITMA_TMT_Menu_Ecran_Textuel")

                /*A allumer ou eteindre 1 BAF */
		CASE "monter_descendre_baf"
		   IF COM21_Tache_De_La_Macro("ITMA_TPM_BAF")=NULL
				NEW_TASK@("ITMA_TPM_BAF",
							"ITMA_TMT_Menu_Ecran_Textuel")

		/*A
		* Decrire une intervention patrouille SIS */
		CASE "interv_SIS"
			NEW_TASK@("ITMA_TIP_Interv_Patrouille_SIS", "ITMA_TMT_Menu_Ecran_Textuel")

		/*A
		* Decrire une intervention depanneur */
		CASE "interv_depanneur"
			PEND_FOR_NEW_TASK@("ITMA_TID_Interv_Depanneur",
							 "ITMA_TMT_Menu_Ecran_Textuel")

		/*A
		* Decrire une intervention pompiers */
		CASE "interv_pompiers"
			NEW_TASK@("ITMA_TIA_Interv_Autre", "ITMA_TMT_Menu_Ecran_Textuel", XDC_ACT_INT_POM)

		/*A
		* Decrire une intervention gendarmerie */
		CASE "interv_gendarm"
			NEW_TASK@("ITMA_TIA_Interv_Autre", "ITMA_TMT_Menu_Ecran_Textuel", XDC_ACT_INT_GND)

		/*A
		* Decrire une intervention d'un autre type */
		CASE "interv_autre"
			NEW_TASK@("ITMA_TIA_Interv_Autre", "ITMA_TMT_Menu_Ecran_Textuel", XDC_ACT_INT_AUTRE)

		/*A
		* Renseigner affichage d'un PMV sur fourgon */
		CASE "pmv_fourgon"
			NEW_TASK@("ITMA_TFO_pmvSurFourgon", "ITMA_TMT_Menu_Ecran_Textuel")

		/*A
		* Renseigner affichage d'un PMV mobile */
		CASE "pmv_mobile"
			NEW_TASK@("ITMA_TMO_pmvMobile", "ITMA_TMT_Menu_Ecran_Textuel")

		/*A
		* Renseigner affichage dans gare */
		CASE "affichage_gare"
			NEW_TASK@("ITMA_TGA_AffichageGare", "ITMA_TMT_Menu_Ecran_Textuel")

		/*A contacter par telephone*/
		CASE "appel_tel"
			NEW_TASK@("ITMA_TAT_Appel_Telephonique",
						"ITMA_TMT_Menu_Ecran_Textuel",
						NULL, NULL, NULL, XDC_BIP_INCONNU)

		/*A contacter par Bip Eurosignal */
		CASE "appel_bip_euro"
			NEW_TASK@("ITMA_TAT_Appel_Telephonique",
						"ITMA_TMT_Menu_Ecran_Textuel",
						NULL, NULL, NULL, XDC_BIP_EUROSIGNAL)

		/*A contacter par Bip numerique */
		CASE "appel_bip_num"
			NEW_TASK@("ITMA_TAT_Appel_Telephonique",
						"ITMA_TMT_Menu_Ecran_Textuel",
						NULL, NULL, NULL, XDC_BIP_OPERATOR_8_CHIFFRES)

		/*A contacter par Bip alphanumerique */
		CASE "appel_bip_alpha"
			NEW_TASK@("ITMA_TAT_Appel_Telephonique",
						"ITMA_TMT_Menu_Ecran_Textuel",
						NULL, NULL, NULL, XDC_BIP_OPERATOR_80_CAR)

		/*A contacter par fax (OBSOLETE) */
		/* CASE "appel_fax"
			NEW_TASK@("ITMA_TFX_Envoi_Fax", "ITMA_TMT_Menu_Ecran_Textuel") */

		/*A contacter les societes de Sophia par mail d'alerte */
		CASE "mail_alerte_sophia"
			NEW_TASK@("ITMA_TFX_Envoi_Fax", "ITMA_TMT_Menu_Ecran_Textuel")

		/*A  liste des fax*/
		CASE "liste_fax"
			NEW_TASK@("XZAS_Recap_Fax_CI")

		/*A envoi du document de viabilite hivernale */
		CASE "viabilite_hivernale"
			NEW_TASK@("ITMA_TVH_Viabilite_Hivernale", "ITMA_TMT_Menu_Ecran_Textuel")

		/*A Requete de projection au synoptique */
		CASE "projeter"
			IF COM21_Tache_De_La_Macro ("ITMA_TPI_post_it") = NULL
				NEW_TASK@("COM28_Exec_Synoptique", CM_PROJETER, XDC_NON)
			ELSE {
				DB_SEND_POKE@ (COM_CANAL_MTPI)
				NEW_TASK@("COM28_Exec_Synoptique", CM_PROJETER, XDC_OUI)
			}
			NEW_TASK@("COM54_ExecSynoptiqueFlash",CM_MASK,CM_MASK_LX_PROJETER)

		/*A Requete de commutation au synoptique IGN */
		CASE "commuter"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@ ("COM28_Exec_Synoptique", CM_COMMUTER, NULL)
			NEW_TASK@("COM54_ExecSynoptiqueFlash",CM_MASK,CM_MASK_LX_COMMUTER)

		/*A Test du RAU */
		CASE "tester_rau"
			NEW_TASK@ ("ITMA_TRT_Test_RAU")

		/*A Test des analyseurs DAI */
		CASE "tester_dai"
			NEW_TASK@ ("ITMA_TRT_Test_DAI")
		CASE "masque_prv"
			NEW_TASK@("COM54_ExecSynoptiqueFlash",CM_MASK,CM_MASK_LX_PRV)


		CASE "masque_pmva"
			NEW_TASK@("ITMA_TMQ_PMVA")
			NEW_TASK@("COM54_ExecSynoptiqueFlash",CM_MASK,CM_MASK_LX_PMVA)

		CASE "masque_baf"
			NEW_TASK@("ITMA_TMQ_BAF")
			NEW_TASK@("COM54_ExecSynoptiqueFlash",CM_MASK,CM_MASK_LX_BAF)

		CASE "masque_bad"
			NEW_TASK@("ITMA_TMQ_BAD")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_MASK, CM_MASK_LX_BAD)

		CASE "masque_radt"
			NEW_TASK@("ITMA_TMQ_RADT")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_MASK, CM_MASK_LX_RADT)

		CASE "masque_pmv"
			NEW_TASK@("ITMA_TMQ_PMV")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_MASK, CM_MASK_LX_PMV)

		CASE "masque_bra"
			NEW_TASK@("ITMA_TMQ_NAV")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_MASK, CM_MASK_LX_NAV)

		CASE "masque_camera"
			NEW_TASK@("ITMA_TMQ_CAMERA")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_MASK, CM_MASK_LX_CAMERA)

		CASE "masque_dai"
			NEW_TASK@("ITMA_TMQ_DAI")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_MASK, CM_MASK_LX_DAI)

		CASE "masque_pau"
			NEW_TASK@("ITMA_TMQ_PAU")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_MASK, CM_MASK_LX_PAU)

		CASE "masque_pal"
			NEW_TASK@("ITMA_TMQ_PAL")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_MASK, CM_MASK_LX_PAL)

		CASE "masque_ferm"
			NEW_TASK@("ITMA_TMQ_FERM")

		CASE "masque_ltv"
			NEW_TASK@("COM28_Exec_Synoptique", CM_MASK, CM_MASK_LTV)
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_MASK, CM_MASK_LX_LTV)

		CASE "masque_lits_arret"
			NEW_TASK@("COM28_Exec_Synoptique", CM_MASK, CM_MASK_LIT)
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_MASK, CM_MASK_LX_LIT)

		CASE "masque_trv_prevus"
			NEW_TASK@("COM28_Exec_Synoptique", CM_MASK, CM_MASK_TRAV_PREVUS)
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_MASK, CM_MASK_LX_TRAV_PREVUS)

		CASE "masque_canton"
			NEW_TASK@("COM28_Exec_Synoptique", CM_MASK, CM_MASK_CANTON)
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_MASK, CM_MASK_LX_CANTON)

		CASE "masque_res_pi"
			NEW_TASK@("ITMA_TMQ_RES_PI")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_MASK, CM_MASK_LX_RESEAU_PI)

		CASE "masque_res_ps"
			NEW_TASK@("ITMA_TMQ_RES_PS")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_MASK, CM_MASK_LX_RESEAU_PS)

		CASE "masque_res_elect"
			NEW_TASK@("ITMA_TMQ_RES_ELECT")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_MASK, CM_MASK_LX_RESEAU_ELECT)
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_MASK, CM_MASK_LX_RESEAU_BT)
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_MASK, CM_MASK_LX_RESEAU_MT)

		CASE "masque_res_gaz"
			NEW_TASK@("ITMA_TMQ_RES_GAZ")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_MASK, CM_MASK_LX_RESEAU_GAZ)

		CASE "masque_res_eau"
			NEW_TASK@("ITMA_TMQ_RES_EAU")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_MASK, CM_MASK_LX_RESEAU_EAU)

		CASE "masque_res_autre"
			NEW_TASK@("ITMA_TMQ_RES_AUTRE")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_MASK, CM_MASK_LX_RESEAU_AUTRE)


		CASE "vue_generale"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("ITMA_TVU_GENERALE")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "Generale")

		CASE "vue_d_nice"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("ITMA_TVU_D_NICE")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "Nice")

		CASE "vue_d_mandelieu"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("ITMA_TVU_D_MANDELIEU")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "Mandelieu")

		CASE "vue_d_cannet"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("COM28_Exec_Synoptique", CM_AFFICH_VUE, "Cannet")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "Cannet")

		CASE "vue_d_meyrargues"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("COM28_Exec_Synoptique", CM_AFFICH_VUE, "Meyrargues")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "Meyrargues")

		CASE "vue_d_st_maximin"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("COM28_Exec_Synoptique", CM_AFFICH_VUE, "Saint Maximin")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "Saint Maximin")

		CASE "vue_d_aubagne"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("COM28_Exec_Synoptique", CM_AFFICH_VUE, "Aubagne")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "Aubagne")

		CASE "vue_d_peyruis"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("COM28_Exec_Synoptique", CM_AFFICH_VUE, "Peyruis")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "Peyruis")

		CASE "vue_s_ca"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("COM28_Exec_Synoptique", CM_AFFICH_VUE, "Cote d'Azur")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "Var Cote d'Azur")

		CASE "vue_s_pr"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("COM28_Exec_Synoptique", CM_AFFICH_VUE, "Provence")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "Durance Provence")

		CASE "vue_s_vd"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("COM28_Exec_Synoptique", CM_AFFICH_VUE, "Val Durance")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "Val Durance")

		CASE "vue_s_ve"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("COM28_Exec_Synoptique", CM_AFFICH_VUE, "Var Esterel")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "Var Esterel")

		CASE "vue_t_monaco"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("COM28_Exec_Synoptique", CM_AFFICH_VUE, "MONACO A500")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "|Var Cote d'Azur|2|1500")

		CASE "vue_t_menton"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("ITMA_TVU_T_MENTON")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "|Var Cote d'Azur|1|218500")

		CASE "vue_t_turbie"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("ITMA_TVU_T_TURBIE")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "|Var Cote d'Azur|1|208750")

		CASE "vue_t_nice_est"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("ITMA_TVU_T_NICE_EST")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "|Var Cote d'Azur|1|198250")

		CASE "vue_t_nice_ouest"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("ITMA_TVU_T_NICE_OUEST")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "|Var Cote d'Azur|1|187850")

		CASE "vue_t_bouches_loup"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("ITMA_TVU_T_BOUCHES_LOUP")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "|Var Cote d'Azur|1|177250")

		CASE "vue_t_breguieres"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("ITMA_TVU_T_BREGUIERES")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "|Var Cote d'Azur|1|166750")

		CASE "vue_t_mandelieu"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("COM28_Exec_Synoptique", CM_AFFICH_VUE, "MANDELIEU A8")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "|Var Cote d'Azur|1|157250")

		CASE "vue_t_esterel"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("COM28_Exec_Synoptique", CM_AFFICH_VUE, "L'ESTEREL A8")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "|Var Cote d'Azur|1|140500")

		CASE "vue_t_le_muy"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "|Var Cote d'Azur|1|121000")
			NEW_TASK@("COM28_Exec_Synoptique", CM_AFFICH_VUE, "LE MUY A8")

		CASE "vue_t_vidauban"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("COM28_Exec_Synoptique", CM_AFFICH_VUE, "VIDAUBAN A8")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "|Var Cote d'Azur|1|103000")

		CASE "vue_t_candumy"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("COM28_Exec_Synoptique", CM_AFFICH_VUE, "CANDUMUY A8")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "|Var Cote d'Azur|1|83500")

		CASE "vue_t_st_maximin"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("COM28_Exec_Synoptique", CM_AFFICH_VUE, "ST MAXIMIN A8")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "|Var Cote d'Azur|1|62500")

		CASE "vue_t_pourrieres"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("COM28_Exec_Synoptique", CM_AFFICH_VUE, "POURRIERES A8")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "|Durance Provence|1|43500")

		CASE "vue_t_aix"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("COM28_Exec_Synoptique", CM_AFFICH_VUE, "AIX A8")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "|Durance Provence|1|26950")

		CASE "vue_t_la_saulce"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("COM28_Exec_Synoptique", CM_AFFICH_VUE, "LA SAULCE A51")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "|Durance Provence|5|138500")

		CASE "vue_t_sisteron"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("COM28_Exec_Synoptique", CM_AFFICH_VUE, "SISTERON A51")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "|Durance Provence|5|110000")

		CASE "vue_t_la_brillanne"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("COM28_Exec_Synoptique", CM_AFFICH_VUE, "LA BRILLANNE A51")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "|Durance Provence|5|84500")

		CASE "vue_t_manosque"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("COM28_Exec_Synoptique", CM_AFFICH_VUE, "MANOSQUE A51")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "|Durance Provence|5|60000")

		CASE "vue_t_meyrargues"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("COM28_Exec_Synoptique", CM_AFFICH_VUE, "MEYRARGUES A51")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "|Durance Provence|5|36000")

		CASE "vue_t_pas_de_trets"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("COM28_Exec_Synoptique", CM_AFFICH_VUE, "PAS DE TRETS A52")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "|Durance Provence|6|8250")

		CASE "vue_t_aubagne"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("COM28_Exec_Synoptique", CM_AFFICH_VUE, "AUBAGNE A52")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "|Durance Provence|6|20250")

		CASE "vue_t_a520"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("COM28_Exec_Synoptique", CM_AFFICH_VUE, "A520")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "|Durance Provence|7|1450")

                CASE "vue_t_a501"
			 DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			 NEW_TASK@("COM28_Exec_Synoptique", CM_AFFICH_VUE, "A501")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "|Durance Provence|4|3996")

		CASE "vue_t_la_ciotat"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("COM28_Exec_Synoptique", CM_AFFICH_VUE, "LA CIOTAT A50")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "|Durance Provence|3|30181")

		CASE "vue_t_bandol"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("COM28_Exec_Synoptique", CM_AFFICH_VUE, "BANDOL A50")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "|Durance Provence|3|55000")

		CASE "vue_t_cuers"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("COM28_Exec_Synoptique", CM_AFFICH_VUE, "CUERS A57")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "|Var Cote d'Azur|8|18500")

		CASE "vue_t_le_luc"
			DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
			NEW_TASK@("COM28_Exec_Synoptique", CM_AFFICH_VUE, "LE LUC A57")
			NEW_TASK@("COM54_ExecSynoptiqueFlash", CM_AFFICH_VUE, "|Var Cote d'Azur|8|41000")

		/*A formation passif*/
		CASE "formation_passif"
			SET_SYSTEM_VAR@(vg_formation,COM_FORMATION_PASSIF)
			NEW_TASK@("ITMA_TSC_choisir_scenario", "ITMA_TMT_Menu_Ecran_Textuel")

		/*A formation actif*/
		CASE "formation_actif"
			SET_SYSTEM_VAR@(vg_formation,COM_FORMATION_ACTIF)
			NEW_TASK@("ITMA_TSC_choisir_scenario", "ITMA_TMT_Menu_Ecran_Textuel")

		/*A creation de scenario*/
		CASE "formation_construire"
			SET_SYSTEM_VAR@(vg_formation,COM_FORMATION_CREATION)
			NEW_TASK@("ITMA_TSC_creer_scenario", "ITMA_TMT_Menu_Ecran_Textuel")

		/*A Sauvegarde des scénarios sur DAT */
		CASE "formation_sauv_sce"
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_SAUV_SCENARIO, PATH_TRACE, PATH_ERREUR)

		/*A Recuperation des scénarios de formation sur DAT */
		CASE "formation_recup_sce"
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_SCENARIO, PATH_TRACE, PATH_ERREUR)

		CASE "quitter"
			NEW_TASK@("ITMA_TMT_quitter")

		CASE "outils"
			COM53_Lancer_Tache ("ITMA_TOU_outils")

		CASE "systeme"
			SHELL_COMMAND@(CMD_GMOT)
			BEEP@
			INFO_MESSAGE@ (C_LIB_GMOT_LANCE)

		CASE "easy_cam"
			ITMA_TEY_LancerEasyCam

		CASE "bloc_note"
			PEND_FOR_NEW_TASK@ ("ITMA_TBN_Fiche_Bloc_Notes")

		CASE "gene_travaux"
			PEND_FOR_NEW_TASK@ ("ITMA_TGT_Gene_Travaux", "ITMA_TMT_Menu_Ecran_Textuel")

		CASE "gene_travaux_pcs"
			/*si je suis en mode degrade*/
			if (SYSTEM_VAR@(vg_comm_CI)<>XDC_OK)
			  INFO_MESSAGE@(C_LIB_PERTE_CI)
			else
			  PEND_FOR_NEW_TASK@ ("ITMA_TGT_Gene_Travaux", "ITMA_TMT_PCS")

		CASE "colotra"
			PEND_FOR_NEW_TASK@ ("ITMA_TCO_Colotra")

		CASE "graphe_f_t"
			PEND_FOR_NEW_TASK@ ("ITMA_TCV_Courbe_A_Visualiser", "ITMA_TMT_", TCV_COURBE_F_T, TCV_TYPE_SYNOPTIQUE)

		CASE "graphe_f_t_ref"
			PEND_FOR_NEW_TASK@ ("ITMA_TCV_Courbe_A_Visualiser", "ITMA_TMT_", TCV_COURBE_F_T, TCV_TYPE_SYN_AVEC_REF)

		CASE "graphe_f_t_bureau"
			PEND_FOR_NEW_TASK@ ("ITMA_TCV_Courbe_A_Visualiser", "ITMA_TMT_", TCV_COURBE_F_T, TCV_TYPE_BUREAUTIQUE)

		CASE "inrets"
			PEND_FOR_NEW_TASK@ ("ITMA_TCV_Courbe_A_Visualiser", "ITMA_TMT_", TCV_COURBE_TRAFIC, NULL)

		CASE "trafic_3D"
			PEND_FOR_NEW_TASK@ ("ITMA_TCV_Courbe_Trafic_3D")


		CASE "creer_motif_appel"
			PEND_FOR_NEW_TASK@ ("ITMA_TEP_Etat_De_Poste", "ITMA_TMT_", CM_CREATION)

		CASE "ana_motif_appels"
			PEND_FOR_NEW_TASK@ ("ITMA_TEP_Etat_De_Poste", "ITMA_TMT_", CM_ANALYSE)

		CASE "gabarit_itineraire"
			PEND_FOR_NEW_TASK@ ("ITMA_TGI_Gabarit_Itineraire", "ITMA_TMT_")

		CASE "capacite_aires"
			PEND_FOR_NEW_TASK@ ("ITMA_TKR_Capacite_Aires", "ITMA_TMT_")

		CASE "graphe_tdp"
			PEND_FOR_NEW_TASK@ ("ITMA_TDP_Courbe","ITMA_TMT_")

		CASE "graphe_tdp_mz"
			PEND_FOR_NEW_TASK@ ("ITMA_Graphe_tdp","ITMA_TMT_")

		CASE "editeur_gen"
			SHELL_COMMAND@ (CMD_SYN_GEN)

		CASE "editeur_perso"
			SHELL_COMMAND@ (CMD_SYN_PERSO)

		CASE "histo_exploitation"
			PEND_FOR_NEW_TASK@ ("ITMA_THE_Histo_Exploitation", "ITMA_TMT_")

		CASE "histo_exploitation_pcs"
			/*si je suis en mode degrade*/
			if (SYSTEM_VAR@(vg_comm_CI)<>XDC_OK)
			    INFO_MESSAGE@(C_LIB_PERTE_CI)
			else
   			    PEND_FOR_NEW_TASK@ ("ITMA_THE_Histo_Exploitation", "ITMA_TMT_")

		CASE "synthese_travaux"
			PEND_FOR_NEW_TASK@ ("ITMA_TST_Synthese_Trv", "ITMA_TMT_")

		CASE "synthese_travaux_pcs"
			PEND_FOR_NEW_TASK@ ("ITMA_TST_Synthese_Trv", "ITMA_TMT_PCS")

		CASE "rapport_synthese"
			PEND_FOR_NEW_TASK@ ("ITMA_TRS_Rapport_De_Synthese", "ITMA_TMT_")

		CASE "retard_iti"
			PEND_FOR_NEW_TASK@ ("ITMA_TCV_Courbe_A_Visualiser", "ITMA_TMT_", TCV_COURBE_RETARD, NULL)

		CASE "retard_iti_pcs"
			/*si je suis en mode degrade*/
			if (SYSTEM_VAR@(vg_comm_CI)<>XDC_OK) {
				INFO_MESSAGE@(C_LIB_PERTE_CI)
			} else {
				PEND_FOR_NEW_TASK@ ("ITMA_TCV_Courbe_A_Visualiser",
				                       "ITMA_TMT_PCS", TCV_COURBE_RETARD, NULL)
			}

		CASE "Q_V_TO"
			PEND_FOR_NEW_TASK@ ("ITMA_TCV_Courbe_A_Visualiser", "ITMA_TMT_", TCV_COURBE_Q_V_TO, NULL)

		CASE "interdistance_travaux"
			PEND_FOR_NEW_TASK@ ("ITMA_TIT_Inter_Travaux", "ITMA_TMT_")

		CASE "interdistance_travaux_pcs"
			/*si je suis en mode degrade*/
			if (SYSTEM_VAR@(vg_comm_CI)<>XDC_OK)
			  INFO_MESSAGE@(C_LIB_PERTE_CI)
			else
			  PEND_FOR_NEW_TASK@ ("ITMA_TIT_Inter_Travaux", "ITMA_TMT_PCS")

		CASE "matrices_nav"
			PEND_FOR_NEW_TASK@ ("ITMA_TNA_Config_Matrices_NAV", "ITMA_TMT_")

		CASE "multi_tunnels"
			PEND_FOR_NEW_TASK@ ("ITMA_TTU_cmd_multi_tunnel", "ITMA_TMT_")

		CASE "capt_ecran"
			MACRO_WINS_BUSY@()
			vl_fichier = "imp_ecran_" ++ SYSTEM_VAR@ (vg_numero_poste)
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_IMP_ECRAN ++ " /tmp/" ++vl_fichier,
									PATH_TRACE, PATH_ERREUR)
			IF (vl_ret = 0) {
				INFO_MESSAGE@ ("Capture d'écran effectuée")
			} ELSE {
				INFO_MESSAGE@ ("Une erreur s'est produite")
			}
		CASE "conf_dp"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@("sae_mco_cht_site DP " ,
									PATH_TRACE, PATH_ERREUR)
			/* 1 :  erreur de configuration de posts */
                   /* 2 : poste deja configurer sur le site */    
            /* 3 : poste non configurer PRA */		
			IF (vl_ret = 1) {
				INFO_MESSAGE@ ("Erreur configuration: contactez le support")
			}
			IF (vl_ret = 2) {
				INFO_MESSAGE@ ("Poste déjà configuré sur DP")
			}
			IF (vl_ret = 3) {
				INFO_MESSAGE@ ("Poste non PRA: contactez le support")
			}
						
			/* controle ok on peut y aller sans enrichir */
			IF (vl_ret = 0) {
				INFO_MESSAGE@ ("Votre session va être fermée et le poste va être redémarré.")

				NEW_TASK@("ITMA_TMT_quitter", "1")
				vl_ret= RUN_PROGRAM@("sae_mco_cht_site -k  DP " ,
									PATH_TRACE, PATH_ERREUR)
				/* si diff de 0 pas normal */
   				IF (vl_ret <> 0 ) {
					INFO_MESSAGE@ ("Erreur lors de la reconfiguration: contactez le support")
				}			
			}		
		
		CASE "conf_vc"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@("sae_mco_cht_site VC " ,
									PATH_TRACE, PATH_ERREUR)
			/* 1 :  erreur de configuration de posts */
                   /* 2 : poste deja configurer sur le site */    
                   /* 3 : poste non configurer PRA */

			IF (vl_ret = 1) {
				INFO_MESSAGE@ ("Erreur configuration: contactez le support")
			}
			IF (vl_ret = 2) {
				INFO_MESSAGE@ ("Poste déjà configuré sur VC")
			}
			IF (vl_ret = 3) {
				INFO_MESSAGE@ ("Poste non PRA: contactez le support")
			}
			/* controle ok on peut y aller sans enrichir */
			IF (vl_ret = 0) {
				INFO_MESSAGE@ ("Votre session va être fermée et le poste va être redémarré.")
				NEW_TASK@("ITMA_TMT_quitter", "1")
				vl_ret= RUN_PROGRAM@("sae_mco_cht_site -k  VC " ,
									PATH_TRACE, PATH_ERREUR)
				/* si diff de 0 pas normal */
   				IF (vl_ret <> 0 ) {
					INFO_MESSAGE@ ("Erreur lors de la reconfiguration: contactez le support")
				}			
			}		


		CASE "conf_ci"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@("sae_mco_cht_site CI " ,
									PATH_TRACE, PATH_ERREUR)
			/* 1 :  erreur de configuration de posts */
                   /* 2 : poste deja configurer sur le site */    
                   /* 3 : poste non configurer PRA */
			IF (vl_ret = 1) {
				INFO_MESSAGE@ ("Erreur configuration: contactez le support")
			}
			IF (vl_ret = 2) {
				INFO_MESSAGE@ ("Poste déjà configuré sur CI")
			}
			IF (vl_ret = 3) {
				INFO_MESSAGE@ ("Poste non PRA: contactez le support")
			}
			/* controle ok on peut y aller sans enrichir */
			IF (vl_ret = 0) {
				INFO_MESSAGE@ ("Votre session va être fermée et le poste va être redémarré.")

				NEW_TASK@("ITMA_TMT_quitter", "1")
				vl_ret= RUN_PROGRAM@("sae_mco_cht_site -k  CI " ,
									PATH_TRACE, PATH_ERREUR)
				/* si diff de 0 pas normal */
   				IF (vl_ret <> 0 ) {
					INFO_MESSAGE@ ("Erreur lors de la reconfiguration: contactez le support")
				}			
			}		


		CASE "imp_ecran"
			MACRO_WINS_BUSY@()
			vl_fichier = "imp_ecran_" ++ SYSTEM_VAR@ (vg_numero_poste)
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_IMP_ECRAN ++ " /tmp/" ++vl_fichier,
									PATH_TRACE, PATH_ERREUR)
			IF vl_ret = 0 {
				/*B Demander a la tache relais l'impression du fichier*/
				if (GET_ENV_VAR@("RTARCH")="hp700_hpux")
				  tl_args = vl_fichier, "/tmp", XDC_IMP_PCL
				else
				  tl_args = vl_fichier, "/tmp", XDC_IMP_ASCII
				vl_msg = MTAR_MSG_EXEC, 1, MTAR_FCT_PRINT,
							ARRAY_TO_STRING@ (tl_args, MTAR_CAR_SEPAR)
				DB_SEND_POKE@ (COM_CANAL_TAR01, vl_msg)
			}
			ELSE INFO_MESSAGE@ ("Impossible d'effectuer l'impression d'écran")

		CASE "open_view"
			SHELL_COMMAND@ (CMD_OPEN_VIEW)	
		CASE "LCR"
			PEND_FOR_NEW_TASK@("ITMA_TIE_fenetre_LCR", "ITMA_TMT_")
		CASE "alarme_LT"
			NEW_TASK@("ITMA_TLX_fenetre_alarmes", "ITMA_TMT_")

		CASE "reseau"
			vl_menu = ITMA_TBR_Menu_Appli_Applix (TBR_MENU_SS_CFG)
			IF (vl_menu > 0) {
				NEW_TASK@ ("SS_APPLICATION_DLG@", vl_menu)
			}

		CASE "autre_config"
			vl_menu = ITMA_TBR_Menu_Appli_Applix (TBR_MENU_SS_CFG)
			IF (vl_menu > 0) {
				NEW_TASK@ ("SS_APPLICATION_DLG@", vl_menu)
			}


	 	CASE "bou_predef"
			NEW_TASK@("ITMA_TBP_Config",
					"ITMA_TMT_Menu_Ecran_Textuel")

		/*A traitement de textes*/
		CASE "bureau_texte"
			vl_menu = ITMA_TBR_Menu_Appli_Applix (TBR_MENU_WP_GEN)
			IF (vl_menu > 0) {
				WP_APPLICATION_DLG@ (vl_menu, FALSE)
			}

		/*A graphics*/
		CASE "bureau_graphique"
			vl_menu = ITMA_TBR_Menu_Appli_Applix (TBR_MENU_GFX_GEN)
			IF (vl_menu > 0) {
				GR_APPLICATION_DLG@ (vl_menu, FALSE)
			}

		/*A tableur*/
		CASE "bureau_tableur"
			SET_SYSTEM_VAR@ (vg_nom_fichier_ss, NULL)

			vl_menu = ITMA_TBR_Menu_Appli_Applix (TBR_MENU_SS_GEN)
			IF (vl_menu > 0) {
				SS_APPLICATION_DLG@ (vl_menu, FALSE)
			}

		/*A infocentre*/
		CASE "infocentre"
			NEW_TASK@ ("DATABASE_DLG@")


		/*A
		* Pour developpeurs seulement ... */
		CASE "lancer_macro"
			vl_nom_macro = "RUN_MACRO_DLG@"
			NEW_TASK@ (vl_nom_macro)

		CASE "plus_de_fiche_ouverte"
			vl_msg = "Fermeture de FMC par l'operateur "++SYSTEM_VAR@(vg_operateur)++" du site "++vm_nom_site++" via le menu Espionner"
			COM01_trace(COM_WARNING, vl_msg)
			SET_SYSTEM_VAR@(vg_fmc_ouverte, false)

		CASE "editer_macro"
			ME_APPLICATION_DLG@

		CASE "espion"
			IF FILE_EXISTS@ (SYSTEM_VAR@ (vg_repertoire_migrazur) ++ "exec/espion.am") {
				INSTALL_DOC@ (SYSTEM_VAR@ (vg_repertoire_migrazur) ++ "exec/espion.am")
				espion ()
			}

		CASE "valeur_variable"
			vl_ret = PROMPT@ ("Nom de la variable : ")
			IF vl_ret <> NULL {
				vl_ret = SYSTEM_VAR@ (vl_ret)
				IF IS_ARRAY@ (vl_ret)
					DUMP_ARRAY@ (vl_ret)
				ELSE INFO_MESSAGE@ ("valeur=" ++ vl_ret)
			}
		CASE "mettre_ref_adm"
			vl_ret = PEND_FOR_NEW_TASK@("ITMA_TCF_Demande_Confirmation","Avez vous fait votre sauvegarde \nLa mise en reference va ecraser l'ancienne version")
			if vl_ret = COM_OK
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_REF ++ " adm", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_opt_adm"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_OPT ++ " adm", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_tra_adm"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_TRA ++ " adm", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_opt_adm"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_OPT ++ " adm", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_ref_aid"
			vl_ret = PEND_FOR_NEW_TASK@("ITMA_TCF_Demande_Confirmation","Avez vous fait votre sauvegarde \nLa mise en reference va ecraser l'ancienne version")
			if vl_ret = COM_OK
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_REF ++ " aid", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_opt_aid"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_OPT ++ " aid", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_tra_aid"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_TRA ++ " aid", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_opt_aid"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_OPT ++ " aid", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_ref_bdc"
			vl_ret = PEND_FOR_NEW_TASK@("ITMA_TCF_Demande_Confirmation","Avez vous fait votre sauvegarde \nLa mise en reference va ecraser l'ancienne version")
			if vl_ret = COM_OK
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_REF ++ " bdc", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_opt_bdc"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_OPT ++ " bdc", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_tra_bdc"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_TRA ++ " bdc", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_opt_bdc"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_OPT ++ " bdc", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_ref_deq"
			vl_ret = PEND_FOR_NEW_TASK@("ITMA_TCF_Demande_Confirmation","Avez vous fait votre sauvegarde \nLa mise en reference va ecraser l'ancienne version")
			if vl_ret = COM_OK
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_REF ++ " deq", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_opt_deq"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_OPT ++ " deq", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_tra_deq"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_TRA ++ " deq", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_opt_deq"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_OPT ++ " deq", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_ref_dft"
			vl_ret = PEND_FOR_NEW_TASK@("ITMA_TCF_Demande_Confirmation","Avez vous fait votre sauvegarde \nLa mise en reference va ecraser l'ancienne version")
			if vl_ret = COM_OK
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_REF ++ " dft", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_opt_dft"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_OPT ++ " dft", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_tra_dft"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_TRA ++ " dft", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_opt_dft"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_OPT ++ " dft", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_ref_die"
			vl_ret = PEND_FOR_NEW_TASK@("ITMA_TCF_Demande_Confirmation","Avez vous fait votre sauvegarde \nLa mise en reference va ecraser l'ancienne version")
			if vl_ret = COM_OK
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_REF ++ " die", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_opt_die"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_OPT ++ " die", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_tra_die"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_TRA ++ " die", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_opt_die"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_OPT ++ " die", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_ref_dra"
			vl_ret = PEND_FOR_NEW_TASK@("ITMA_TCF_Demande_Confirmation","Avez vous fait votre sauvegarde \nLa mise en reference va ecraser l'ancienne version")
			if vl_ret = COM_OK
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_REF ++ " dra", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_opt_dra"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_OPT ++ " dra", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_tra_dra"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_TRA ++ " dra", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_opt_dra"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_OPT ++ " dra", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_ref_eqa"
			vl_ret = PEND_FOR_NEW_TASK@("ITMA_TCF_Demande_Confirmation","Avez vous fait votre sauvegarde \nLa mise en reference va ecraser l'ancienne version")
			if vl_ret = COM_OK
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_REF ++ " eqa", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_opt_eqa"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_OPT ++ " eqa", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_tra_eqa"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_TRA ++ " eqa", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_opt_eqa"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_OPT ++ " eqa", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_ref_ign"
			vl_ret = PEND_FOR_NEW_TASK@("ITMA_TCF_Demande_Confirmation","Avez vous fait votre sauvegarde \nLa mise en reference va ecraser l'ancienne version")
			if vl_ret = COM_OK
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_REF ++ " ign", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_opt_ign"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_OPT ++ " ign", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_tra_ign"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_TRA ++ " ign", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_opt_ign"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_OPT ++ " ign", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_ref_inf"
			vl_ret = PEND_FOR_NEW_TASK@("ITMA_TCF_Demande_Confirmation","Avez vous fait votre sauvegarde \nLa mise en reference va ecraser l'ancienne version")
			if vl_ret = COM_OK
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_REF ++ " inf", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_opt_inf"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_OPT ++ " inf", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_tra_inf"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_TRA ++ " inf", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_opt_inf"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_OPT ++ " inf", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_ref_mbo"
			vl_ret = PEND_FOR_NEW_TASK@("ITMA_TCF_Demande_Confirmation","Avez vous fait votre sauvegarde \nLa mise en reference va ecraser l'ancienne version")
			if vl_ret = COM_OK
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_REF ++ " mbo", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_opt_mbo"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_OPT ++ " mbo", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_tra_mbo"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_TRA ++ " mbo", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_opt_mbo"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_OPT ++ " mbo", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_ref_mod"
			vl_ret = PEND_FOR_NEW_TASK@("ITMA_TCF_Demande_Confirmation","Avez vous fait votre sauvegarde \nLa mise en reference va ecraser l'ancienne version")
			if vl_ret = COM_OK
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_REF ++ " mod", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_opt_mod"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_OPT ++ " mod", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_tra_mod"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_TRA ++ " mod", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_opt_mod"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_OPT ++ " mod", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_ref_nav"
			vl_ret = PEND_FOR_NEW_TASK@("ITMA_TCF_Demande_Confirmation","Avez vous fait votre sauvegarde \nLa mise en reference va ecraser l'ancienne version")
			if vl_ret = COM_OK
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_REF ++ " nav", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_opt_nav"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_OPT ++ " nav", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_tra_nav"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_TRA ++ " nav", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_opt_nav"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_OPT ++ " nav", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_ref_ntfm"
			vl_ret = PEND_FOR_NEW_TASK@("ITMA_TCF_Demande_Confirmation","Avez vous fait votre sauvegarde \nLa mise en reference va ecraser l'ancienne version")
			if vl_ret = COM_OK
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_REF ++ " ntfm", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_opt_ntfm"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_OPT ++ " ntfm", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_tra_ntfm"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_TRA ++ " ntfm", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_opt_ntfm"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_OPT ++ " ntfm", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_ref_opr"
			vl_ret = PEND_FOR_NEW_TASK@("ITMA_TCF_Demande_Confirmation","Avez vous fait votre sauvegarde \nLa mise en reference va ecraser l'ancienne version")
			if vl_ret = COM_OK
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_REF ++ " opr", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_opt_opr"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_OPT ++ " opr", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_tra_opr"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_TRA ++ " opr", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_opt_opr"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_OPT ++ " opr", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_ref_pic"
			vl_ret = PEND_FOR_NEW_TASK@("ITMA_TCF_Demande_Confirmation","Avez vous fait votre sauvegarde \nLa mise en reference va ecraser l'ancienne version")
			if vl_ret = COM_OK
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_REF ++ " pic", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_opt_pic"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_OPT ++ " pic", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_tra_pic"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_TRA ++ " pic", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_opt_pic"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_OPT ++ " pic", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_ref_pmv"
			vl_ret = PEND_FOR_NEW_TASK@("ITMA_TCF_Demande_Confirmation","Avez vous fait votre sauvegarde \nLa mise en reference va ecraser l'ancienne version")
			if vl_ret = COM_OK
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_REF ++ " pmv", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_opt_pmv"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_OPT ++ " pmv", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_tra_pmv"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_TRA ++ " pmv", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_opt_pmv"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_OPT ++ " pmv", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_ref_snt"
			vl_ret = PEND_FOR_NEW_TASK@("ITMA_TCF_Demande_Confirmation","Avez vous fait votre sauvegarde \nLa mise en reference va ecraser l'ancienne version")
			if vl_ret = COM_OK
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_REF ++ " snt", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_opt_snt"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_OPT ++ " snt", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_tra_snt"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_TRA ++ " snt", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_opt_snt"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_OPT ++ " snt", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_ref_syn"
			vl_ret = PEND_FOR_NEW_TASK@("ITMA_TCF_Demande_Confirmation","Avez vous fait votre sauvegarde \nLa mise en reference va ecraser l'ancienne version")
			if vl_ret = COM_OK
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_REF ++ " syn", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_opt_syn"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_OPT ++ " syn", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_tra_syn"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_TRA ++ " syn", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_opt_syn"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_OPT ++ " syn", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_ref_util"
			vl_ret = PEND_FOR_NEW_TASK@("ITMA_TCF_Demande_Confirmation","Avez vous fait votre sauvegarde \nLa mise en reference va ecraser l'ancienne version")
			if vl_ret = COM_OK
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_REF ++ " util", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_opt_util"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_OPT ++ " util", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_tra_util"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_TRA ++ " util", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_opt_util"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_OPT ++ " util", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_ref_stra"
			vl_ret = PEND_FOR_NEW_TASK@("ITMA_TCF_Demande_Confirmation","Avez vous fait votre sauvegarde \nLa mise en reference va ecraser l'ancienne version")
			if vl_ret = COM_OK
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_REF ++ " stra", PATH_TRACE, PATH_ERREUR)

		CASE "mettre_opt_stra"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_METTRE_OPT ++ " stra", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_tra_stra"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_TRA ++ " stra", PATH_TRACE, PATH_ERREUR)

		CASE "recup_diff_opt_stra"
			MACRO_WINS_BUSY@()
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_DIFF_OPT ++ " stra", PATH_TRACE, PATH_ERREUR)

		CASE "sauv_ref_dat"
			vl_ret = PEND_FOR_NEW_TASK@("ITMA_TCF_Demande_Confirmation","Assurez_vous qu'une cassette est en place dans le lecteur. \nLa sauvegarde detruira toutes les donnees de la cassette.")
			if vl_ret = COM_OK
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_SAUV_REF_DAT, PATH_TRACE, PATH_ERREUR)

		CASE "recup_ref_dat"
			vl_ret = PEND_FOR_NEW_TASK@("ITMA_TCF_Demande_Confirmation","Assurez_vous que la cassette est en place dans le lecteur. \nLa recuperation va ecraser les donnees actuellement en  reference.")
			if vl_ret = COM_OK
			vl_ret= RUN_PROGRAM@(vl_display_cmd ++ CMD_RECUP_REF_DAT, PATH_TRACE, PATH_ERREUR)

		CASE "exporter_iti"
			SHELL_COMMAND@(CMD_EXP_ITI)
		CASE "importer_iti"
			SHELL_COMMAND@(CMD_IMP_ITI)

		CASE "fenetre_UNIX"
			SHELL_COMMAND@(CMD_FENETRE_UNIX)

		CASE "LIVRE_MODERN1"
			SHELL_COMMAND@(CMD_LIVRE_MODERN1)

		CASE "Arret_synop"
			/* Envoyer la demande d'arret de TISYN */
			if (GET_ENV_VAR@("RTARCH")="hp700_hpux") 
				tl_args = SYSTEM_VAR@(vg_poste), "tisyn.x"
			else
				tl_args = SYSTEM_VAR@(vg_poste), "tisbi.x"
				vl_msg = MTAR_MSG_EXEC, 1, MTAR_FCT_ARRET_SYNOP,
							ARRAY_TO_STRING@ (tl_args, MTAR_CAR_SEPAR)
				DB_SEND_POKE@ (COM_CANAL_TAR01, vl_msg)

		CASE "Relancer_synop"		
			/* Envoyer la demande de lancement de TISYN */
			if (GET_ENV_VAR@("RTARCH")="hp700_hpux") 
				tl_args = SYSTEM_VAR@(vg_poste), "tisyn.x"
			else
				tl_args = SYSTEM_VAR@(vg_poste), "tisbi.x"
				vl_msg = MTAR_MSG_EXEC, 1, MTAR_FCT_RELANCER_SYNOP,
							ARRAY_TO_STRING@ (tl_args, MTAR_CAR_SEPAR)
				DB_SEND_POKE@ (COM_CANAL_TAR01, vl_msg)

		CASE "Arreter_synop_formation"
			/* Envoyer la demande d'arret de TISYNF */
				tl_args = SYSTEM_VAR@(vg_poste), "tisynF.x"
				vl_msg = MTAR_MSG_EXEC, 1, MTAR_FCT_ARRET_SYNOP,
							ARRAY_TO_STRING@ (tl_args, MTAR_CAR_SEPAR)
				DB_SEND_POKE@ (COM_CANAL_TAR01, vl_msg)

			/* Envoyer la demande de lancement de TISYN */
				tl_args = SYSTEM_VAR@(vg_poste), "tisyn.x"
				vl_msg = MTAR_MSG_EXEC, 1, MTAR_FCT_RELANCER_SYNOP,
							ARRAY_TO_STRING@ (tl_args, MTAR_CAR_SEPAR)
				DB_SEND_POKE@ (COM_CANAL_TAR01, vl_msg)

		CASE "Lancer_synop_formation"		
			/* Envoyer la demande d'arret de TISYN */

				tl_args = SYSTEM_VAR@(vg_poste), "tisyn.x"
				vl_msg = MTAR_MSG_EXEC, 1, MTAR_FCT_ARRET_SYNOP,
							ARRAY_TO_STRING@ (tl_args, MTAR_CAR_SEPAR)
				DB_SEND_POKE@ (COM_CANAL_TAR01, vl_msg)

			/* Envoyer la demande de lancement de TISYNF */
				tl_args = SYSTEM_VAR@(vg_poste), "tisynF.x"
				vl_msg = MTAR_MSG_EXEC, 1, MTAR_FCT_RELANCER_SYNOP,
							ARRAY_TO_STRING@ (tl_args, MTAR_CAR_SEPAR)
				DB_SEND_POKE@ (COM_CANAL_TAR01, vl_msg)

		CASE "scanner"
			/* Lancer les logiciels utiles pour la scannerisation */
			SHELL_COMMAND@(CMD_SCANNER)
			

		/*A
		* IHM distante Meteo  */
		CASE "ihm_distante"
			NEW_TASK@("ITMA_TME",
						"ITMA_TMT_Menu_Ecran_Textuel")

		DEFAULT
			/*si c'est un bouton de PC simplifie*/
			if (SUBSTRING@(vl_nom_macro,1,4)="pcs_")
			  TMT_pcs(vl_nom_macro)
			else {
				DB_SEND_POKE@ (COM_CANAL_MTPI_FIN, XDC_OUI)
				NEW_TASK@("COM28_Exec_Synoptique", CM_AFFICH_VUE, vl_nom_macro)
			}
		ENDCASE	


	/*A on recoit un poke*/
	CASE "poke_"
		/*A
		* suivant le poke*/
		CASE OF DB_GET_POKE@(vl_fenetre)
			/*A
			* poke de fin*/
			CASE COM_CANAL_FIN
			CASE COM_CANAL_MTMT
				/*A bye*/
				RETURN


			CASE COM_CANAL_MTMT_REVEIL_ON
				IF NOT IS_NULL@ (vm_cascade_reveil)
				{
					vl_val = DB_GET_POKE_DATA@ (vl_fenetre)
					IF (vl_val = 1)	vm_reveil_1 = TRUE
					IF (vl_val = 2)	vm_reveil_2 = TRUE
					IF (vl_val = 3)	vm_reveil_3 = TRUE

					IF ( (vm_reveil_1 <> FALSE)  OR  (vm_reveil_2 <> FALSE)  OR  (vm_reveil_3 <> FALSE) ) {
						vm_menu_items[vm_cascade_reveil,1,vm_bouton_reveil,5]=PIX_REVEIL_ON
					} ELSE {
						vm_menu_items[vm_cascade_reveil,1,vm_bouton_reveil,5]=PIX_REVEIL_OFF
					}
					UPDATE_SELECTIONS_FILE@(21,"/tmp/barre",vm_menu_items)
				}


			CASE COM_CANAL_MTMT_REVEIL_OFF
				IF NOT IS_NULL@ (vm_cascade_reveil)
				{
					vl_val = DB_GET_POKE_DATA@ (vl_fenetre)
					IF (vl_val = 1)	vm_reveil_1 = FALSE
					IF (vl_val = 2)	vm_reveil_2 = FALSE
					IF (vl_val = 3)	vm_reveil_3 = FALSE

					IF ( (vm_reveil_1 <> FALSE)  OR  (vm_reveil_2 <> FALSE)  OR  (vm_reveil_3 <> FALSE) ) {
						vm_menu_items[vm_cascade_reveil,1,vm_bouton_reveil,5]=PIX_REVEIL_ON
					} ELSE {
						vm_menu_items[vm_cascade_reveil,1,vm_bouton_reveil,5]=PIX_REVEIL_OFF
					}
					UPDATE_SELECTIONS_FILE@(21,"/tmp/barre",vm_menu_items)
				}


			CASE COM_CANAL_MTMT_ALARME
				vl_msg = DB_GET_POKE_DATA@ (vl_fenetre)
COM01_Trace (COM_INFO,"alarmes:"++vl_msg[0]++COM04_Operateur_A_Le_Droit_De(XDC_FAM_EXPLOITATION)++vm_site)
				IF ( (COM04_Operateur_A_Le_Droit_De(XDC_FAM_EXPLOITATION)=TRUE) and (vm_site<>XDC_CI))
				{
					vl_pix_vert=PIX_ALARME_VERT_L
					vl_pix_rouge=PIX_ALARME_ROUGE_L
				}
				else
				{
					vl_pix_vert=PIX_ALARME_VERT
					vl_pix_rouge=PIX_ALARME_ROUGE
				}

				IF (vl_msg[0] = 0)
					vm_menu_items[vm_cascade_alarme,1,vm_bouton_alarme,5]=vl_pix_vert
				ELSE {
					vm_menu_items[vm_cascade_alarme,1,vm_bouton_alarme,5]=vl_pix_rouge
					/*! demande d'emettre le son associe a un reveil */
					vl_cmd = { MTAR_MSG_EXEC, 1, MTAR_FCT_SONALERTE, ITRE_SON_BASE }
					DB_SEND_POKE@ (COM_CANAL_TAR01, vl_cmd)
				}
				UPDATE_SELECTIONS_FILE@(21,"/tmp/barre",vm_menu_items)

			CASE COM_CANAL_MTMT_EQT
				vl_msg = DB_GET_POKE_DATA@ (vl_fenetre)
				IF (vl_msg[0] = 0) {
					vm_menu_items[vm_cascade_eqt,1,vm_bouton_eqt,5]=PIX_EQT_VERT
					UPDATE_SELECTIONS_FILE@(21,"/tmp/barre",vm_menu_items)
				}
				ELSE IF (vl_msg[0] = 1) AND (vm_menu_items[vm_cascade_eqt,1,vm_bouton_eqt,5]=PIX_EQT_VERT) {
					vm_menu_items[vm_cascade_eqt,1,vm_bouton_eqt,5]=PIX_EQT_ORANGE
					UPDATE_SELECTIONS_FILE@(21,"/tmp/barre",vm_menu_items)
				}
				ELSE IF (vl_msg[0] = 2) AND (vm_menu_items[vm_cascade_eqt,1,vm_bouton_eqt,5] <> PIX_EQT_ROUGE) {
					vm_menu_items[vm_cascade_eqt,1,vm_bouton_eqt,5]=PIX_EQT_ROUGE
					UPDATE_SELECTIONS_FILE@(21,"/tmp/barre",vm_menu_items)
				}

			/*B sur message d'etat du PIRAU du site, mettre a jour l'icone d'etat */
			CASE COM_CANAL_MTMT_ETAT_PIRAU
				vl_msg = DB_GET_POKE_DATA@ (vl_fenetre)
				/* si le message a des donnees c'est une alarme: poster un message de mise a jour */
				IF (vl_msg[0] <> XDC_INFO_NON_VALUEE) {
					COM52_Exec_Differee (10, "DB_SEND_POKE@",
								{ COM_CANAL_MTMT_ETAT_PIRAU, { XDC_INFO_NON_VALUEE }})
				} ELSE {
					/* sinon c'est le message de mise a jour */
					ITMA_TMT_Mettre_A_Jour_Etat_PIRAU ()
				}


			/*B Etat ecoute RAU par la GN provenant de MTFL ou de l'exterieur */
               		CASE COM_CANAL_MTMT_COMM_GN
                  		IF NOT COM04_Operateur_A_Le_Droit_De(XDC_FAM_EXPLOITATION_PC2) OR
					vm_site=XDC_CI
                  		{
                    			vl_msg = DB_GET_POKE_DATA@ (vl_fenetre)
                    			vl_alerte_gn = ARRAY_FROM_STRING@ (vl_msg[0], MTAR_CAR_SEPAR)

                    			vl_pau_ecoute = SYSTEM_VAR@ (vg_le_pau_en_ecoute)
                    			vl_pau_ecoute.numero_pau = vl_alerte_gn.num_equip
                   			vl_pau_ecoute.demande_GN = NULL

                    			CASE OF vl_alerte_gn.num_type
                   			 CASE XDC_GN_ECOUTE_PAU
     						vm_menu_items[vm_cascade_comm_GN,1,vm_bouton_comm_GN,5]=PIX_GN_ECOUTE

					 CASE XDC_GN_PREND_RAU
						if (vm_site=XDC_CI)
						{
						CASE OF vl_alerte_gn.texte
						CASE XDC_NOM_SITE_DA
     							vm_menu_items[vm_cascade_comm_DA,1,vm_bouton_comm_DA,5]=PIX_RAU_DA_EN_MAIN
						CASE XDC_NOM_SITE_DP
							vm_menu_items[vm_cascade_comm_DP,1,vm_bouton_comm_DP,5]=PIX_RAU_VD_EN_MAIN 
						CASE XDC_NOM_SITE_VC
							vm_menu_items[vm_cascade_comm_DM,1,vm_bouton_comm_DM,5]=PIX_RAU_CA_EN_MAIN
						ENDCASE
						}

                    			CASE XDC_GN_DONNE_RAU
						if (vm_site=XDC_CI)
						{
						CASE OF vl_alerte_gn.texte
						CASE XDC_NOM_SITE_DA
							vm_menu_items[vm_cascade_comm_DA,1,vm_bouton_comm_DA,5]=PIX_RAU_DA_NON_EN_MAIN
						CASE XDC_NOM_SITE_DP
							vm_menu_items[vm_cascade_comm_DS,1,vm_bouton_comm_DS,5]=PIX_RAU_PR_NON_EN_MAIN
						CASE XDC_NOM_SITE_VC
							vm_menu_items[vm_cascade_comm_DM,1,vm_bouton_comm_DM,5]=PIX_RAU_CA_NON_EN_MAIN
						ENDCASE
						}

                    			CASE XDC_GN_FIN_ECOUTE_PAU
                         			vl_pau_ecoute.numero_pau = NULL
     						vm_menu_items[vm_cascade_comm_GN,1,vm_bouton_comm_GN,5]=PIX_GN_NORMAL

                    			CASE XDC_GN_DEM_SECR_PAU
                         			vl_pau_ecoute.demande_GN = "SECRET"
     						vm_menu_items[vm_cascade_comm_GN,1,vm_bouton_comm_GN,5]=PIX_GN_SECRET

                    			CASE XDC_GN_REPR_SAE_PAU
                         			vl_pau_ecoute.demande_GN = "REPRISE"
     						vm_menu_items[vm_cascade_comm_GN,1,vm_bouton_comm_GN,5]=PIX_GN_REPRISE

                   			 ENDCASE

                    			/*B Mettre a jour l'icone d'ecoute GN du menu */
                    			UPDATE_SELECTIONS_FILE@(21,"/tmp/barre",vm_menu_items)

                    			/*B Rafraichir la fenetre de dialogue RAU si elle est ouverte */
					if (vl_pau_ecoute.numero_pau <>0)
                    			SET_SYSTEM_VAR@ (vg_le_pau_en_ecoute, vl_pau_ecoute)
                    			DB_SEND_POKE@ (COM_CANAL_MTRA_RAFRAICHIR)
                  		}
                  		ELSE
                  		{
                    			vl_msg = DB_GET_POKE_DATA@ (vl_fenetre)
                    			vl_alerte_gn = ARRAY_FROM_STRING@ (vl_msg[0], MTAR_CAR_SEPAR)

                    			vl_pau_ecoute = SYSTEM_VAR@ (vg_le_pau_en_ecoute)
                    			vl_pau_ecoute.numero_pau = vl_alerte_gn.num_equip
                    			vl_pau_ecoute.demande_GN = NULL
                    			vl_ant = vl_alerte_gn.num_type_equip
                    			vl_ind_ant = ARRAY_INDEX@(ARRAY_COLUMN@(vm_nom_GN,1),vl_ant)
                    			if ( vl_ind_ant < 0 )
                    			{
                         			vl_ind_ant = 0
                         			vl_ant = 1
                    				}

					COM01_Trace(0,"BASCUL : " ++ vl_alerte_gn.num_type)
                    			CASE OF vl_alerte_gn.num_type
                    			CASE XDC_GN_ECOUTE_PAU

						vm_menu_items[vm_cascade_comm_GN_PC2[vl_ant],1,vm_bouton_comm_GN_PC2[vl_ant],5]=vm_nom_GN[vl_ind_ant,5]

                    			CASE XDC_GN_PREND_RAU
					COM01_Trace(0,"BASCUL : CROIX")
                         			vl_pau_ecoute.numero_pau = NULL

						/*vm_menu_items[vm_cascade_comm_GN_PC2[vl_ant],1,vm_bouton_comm_GN_PC2[vl_ant],5]=vm_nom_GN[vl_ind_ant,4]*/

						CASE OF vl_alerte_gn.texte
						CASE XDC_NOM_SITE_DA
     							vm_menu_items[vm_cascade_comm_GN,1,vm_bouton_comm_GN,5]=PIX_RAU_DA_NON_EN_MAIN
						CASE XDC_NOM_SITE_VD
							vm_menu_items[vm_cascade_comm_GN,1,vm_bouton_comm_GN,5]=PIX_RAU_VD_NON_EN_MAIN 
						CASE XDC_NOM_SITE_VC
							vm_menu_items[vm_cascade_comm_GN,1,vm_bouton_comm_GN,5]=PIX_RAU_CA_NON_EN_MAIN
						ENDCASE

                    			CASE XDC_GN_DONNE_RAU
					COM01_Trace(0,"BASCUL : PAS LA CROIX")
                         			vl_pau_ecoute.numero_pau = NULL
                         			/*if ( vl_alerte_gn.num_equip = TRUE )
                         			{

							PEND_FOR_NEW_TASK@("ITMA_TRT_basculement_RAU")

                         			}
                         			else
                         			{*/
							/* vm_menu_items[vm_cascade_comm_GN_PC2[vl_ant],1,vm_bouton_comm_GN_PC2[vl_ant],5]=vm_nom_GN[vl_ind_ant,3]*/
						CASE OF vl_alerte_gn.texte
						CASE XDC_NOM_SITE_DA
							vm_menu_items[vm_cascade_comm_GN,1,vm_bouton_comm_GN,5]=PIX_RAU_DA_EN_MAIN
						CASE XDC_NOM_SITE_DP
							vm_menu_items[vm_cascade_comm_GN,1,vm_bouton_comm_GN,5]=PIX_RAU_PR_EN_MAIN
						CASE XDC_NOM_SITE_VC
							vm_menu_items[vm_cascade_comm_GN,1,vm_bouton_comm_GN,5]=PIX_RAU_CA_EN_MAIN
						ENDCASE
                         			/*}*/

                    			CASE XDC_GN_FIN_ECOUTE_PAU
                         			vl_pau_ecoute.numero_pau = NULL

						vm_menu_items[vm_cascade_comm_GN_PC2[vl_ant],1,vm_bouton_comm_GN_PC2[vl_ant],5]=vm_nom_GN[vl_ind_ant,3]

                    			CASE XDC_GN_DEM_SECR_PAU
                         			vl_pau_ecoute.demande_GN = "SECRET"

						vm_menu_items[vm_cascade_comm_GN_PC2[vl_ant],1,vm_bouton_comm_GN_PC2[vl_ant],5]=vm_nom_GN[vl_ind_ant,6]

                    			CASE XDC_GN_REPR_SAE_PAU
                         			vl_pau_ecoute.demande_GN = "REPRISE"

						vm_menu_items[vm_cascade_comm_GN_PC2[vl_ant],1,vm_bouton_comm_GN_PC2[vl_ant],5]=vm_nom_GN[vl_ind_ant,7]

                    			ENDCASE

                    			/*B Mettre a jour l'icone d'ecoute GN du menu */
                    			UPDATE_SELECTIONS_FILE@(21,"/tmp/barre",vm_menu_items)

                    			/*B Rafraichir la fenetre de dialogue RAU si elle estouverte */
                    			SET_SYSTEM_VAR@ (vg_le_pau_en_ecoute, vl_pau_ecoute)
                    			DB_SEND_POKE@ (COM_CANAL_MTRA_RAFRAICHIR)
                  		}


               		/*B Message de MTRA signalant que le transfert GN est effectue*/
               		CASE COM_CANAL_MTMT_COMM_GN_TRANSFR
                    		/*B Mettre a jour l'icone d'ecoute GN du menu */

				vm_menu_items[vm_cascade_comm_GN,1,vm_bouton_comm_GN,5]=PIX_GN_ECOUTE
                    		UPDATE_SELECTIONS_FILE@(21,"/tmp/barre",vm_menu_items)

                    		/*B Mettre a jour l'information ecoute GN */
                    		vl_pau_ecoute = SYSTEM_VAR@ (vg_le_pau_en_ecoute)
                   		 vl_pau_ecoute.demande_GN = NULL
                   		 SET_SYSTEM_VAR@ (vg_le_pau_en_ecoute, vl_pau_ecoute)


			CASE COM_CANAL_MTMT_REPONDEUR
				vl_msg = DB_GET_POKE_DATA@ (vl_fenetre)
				IF vl_msg[0] = XDC_OUI {
					vl_repondeur_on = TRUE
					vm_menu_items[vm_cascade_repond,1,vm_bouton_repond,5]=PIX_REPONDEUR_ON
				} ELSE {
					vl_repondeur_on = FALSE
					vm_menu_items[vm_cascade_repond,1,vm_bouton_repond,5]=PIX_REPONDEUR_OFF
				}
				UPDATE_SELECTIONS_FILE@(21,"/tmp/barre",vm_menu_items)

			CASE COM_CANAL_MTMT_ETAT_PCSIMPL
				vl_msg = DB_GET_POKE_DATA@ (vl_fenetre)
				vl_val=SYSTEM_VAR@(vl_msg[0])
				COM01_Trace (COM_DEBUG1, "ancienne val:" ++ vl_val ++ " nouvelle bal : " ++ vl_msg[1])
				if ( vl_val<>vl_msg[1]) {
					SET_SYSTEM_VAR@(vl_msg[0],vl_msg[1])
					COM01_Trace (COM_DEBUG1, " Je met a jour")
					/*mise a jour des icones dans la barre de menu principal*/
					ITMA_TMT_gestion_icones(vl_fenetre,vl_msg[0],vl_msg[1])
				}
		ENDCASE


	ENDCASE
WEND

ENDMACRO




/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
* construit le menu principal
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

FUNCTION ITMA_TMT_Construire_Menu ()

/*
* ARGUMENTS EN ENTREE :
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Indefini
*
* CONDITION D'UTILISATION
*   
*
* FONCTION
* insere des items dans la barre de menu principal en fonction du numero 
* de profil de l'operateur
---------------------------------------------------------------------------- */

	VAR vl_ecran
	VAR tl_familles

	VAR vl_fichier_conf_menu
	VAR vl_id_menu
	VAR tl_items
	VAR vl_indice
	VAR tl_menu_array
	VAR tl_fusion,vl_present
	VAR vl_poste
	VAR vl_filtre
	VAR vl_index,vl_insere
	VAR vl_str,tl_data

	vl_ecran = SYSTEM_VAR@ (vg_numero_display)
	tl_familles = SYSTEM_VAR@ (vg_familles)
	vl_poste = SYSTEM_VAR@ (vg_poste)

	/*A
	* initialisation des compteurs*/
	vm_bouton_num=0
	vm_cascade_num=-1
	vm_submenu_num=0
	vm_menu_items=NULL
	vl_id_menu=21

	/*A lecture du fichier de description du menu SAE */
	vl_fichier_conf_menu = SYSTEM_VAR@ (vg_repertoire_migrazur) ++
	                          COM_SOUS_REP_IHM ++ C_FICH_MENU_MIGRAZUR
	tl_menu_array = COM47_LireTable (vl_fichier_conf_menu, { "#" }, ";")
        /* on commence par filtrer les elements de menu*/
	FOR  vl_indice=0 TO (ARRAY_SIZE@(tl_menu_array)-1)
		/*A je transforme chaque ligne en un tableau*/
		tl_items=tl_menu_array[vl_indice]

		/*A je commence par regarder la presence d'un filtre*/
		IF (tl_items[POS_FILTRE]<>NULL)
			vl_filtre=ARRAY_FROM_STRING@(tl_items[POS_FILTRE],"|")
		ELSE
			vl_filtre=NULL

		IF (vl_filtre<>NULL) {
			/*mon site est-il dans le filtre*/
			IF (ARRAY_INDEX@(vl_filtre,vm_site)<>-1)
				vl_insere=TRUE
			/*mon nom de site est-il dans le filtre?*/
			ELSE IF (ARRAY_INDEX@(vl_filtre,vm_nom_site)<>-1)
				vl_insere=TRUE
			/*mon poste est-il dans le filtre*/
			ELSE IF (ARRAY_INDEX@(vl_filtre,vl_poste)<>-1)
				vl_insere=TRUE
			ELSE
				vl_insere=FALSE
		}
		ELSE
			vl_insere=TRUE

		/*si je dois insere l'element*/
		IF (vl_insere=TRUE) {
			IF (tl_fusion=NULL)
				tl_fusion[0]=tl_items
			ELSE
				tl_fusion[ARRAY_SIZE@(tl_fusion)]=tl_items
		}
	NEXT vl_indice

	tl_menu_array=tl_fusion
	tl_fusion=NULL
	/* en mode mono-ecran, */
	IF (vl_ecran = XDC_ECRAN_UNIQUE)
	{
		/* il faut fusionner les menus gauche et droite*/	
		FOR vl_indice=0 TO (ARRAY_SIZE@(tl_menu_array)-1)
			/*A je transforme chaque ligne en un tableau*/
			tl_items=tl_menu_array[vl_indice]
			/*si premier element a inserer*/
			IF (tl_fusion=null)
				tl_fusion[0]=tl_items
			ELSE
			{
				/*si profondeur differente de 1*/
				IF (tl_items[POS_PROFONDEUR]<>1)
				{
					/*si je dois l'inserer*/
					IF (vl_present<>null)	
					{
						tl_fusion=ARRAY_INSERT@(tl_fusion,tl_items,
									vl_present+1)
						vl_present=vl_present+1
					}
					ELSE
					{
						/*sinon je l'ajoute a la fin*/
						tl_fusion[ARRAY_SIZE@(tl_fusion)]=tl_items
					}
				}
				/*sinon si element de niveau 1*/
				ELSE
				{
					/*je regarde s'il n'est pas deja dans le tableau*/
					vl_present=ARRAY_INDEX@(ARRAY_COLUMN@(tl_fusion,0),
									tl_items[POS_NOM])
					IF (vl_present=-1)
					{
						/*j'ajoute l'element*/
						tl_fusion[ARRAY_SIZE@(tl_fusion)]=tl_items
						vl_present=NULL
					}
				}
			}
		NEXT vl_indice

		tl_menu_array=tl_fusion
	}

	/*A
	* pour chaque element, on cree un item a la bonne place dans le menu*/
	FOR vl_indice=0 TO (ARRAY_SIZE@(tl_menu_array)-1)
		/*A je transforme chaque ligne en un tableau*/
		tl_items=tl_menu_array[vl_indice]
		/*A
		* je regarde si la ligne n'est pas vide,
		* si sa famille correspond au profil,
		* si l'element doit etre affiche sur mon ecran
		*/
		IF  (ARRAY_SIZE@ (tl_items) > 0)  AND
			(tl_familles[tl_items[POS_FAMILLE]])  AND
			( tl_items[POS_ECRAN] = vl_ecran  OR
			  tl_items[POS_ECRAN] + vl_ecran > 1)  AND
			(vm_site = XDC_DP OR vm_site = XDC_VC  OR vm_site = XDC_CI OR /* DEM743 : secteur */

				( tl_items[POS_MACRO] <> "tunnel" AND
				  tl_items[POS_MACRO] <> "multi_tunnels" AND
				  tl_items[POS_MACRO] <> "echangeur" ) )
		{
			/*A si c'est un element a inserer au premier niveau*/
			IF (tl_items[POS_PROFONDEUR]=1)	
			{
				/*A reinitialise la position des sous-menus*/
				vm_submenu_num=0
	
				/*A insertion de l'item et de la macro associe*/
				add_cascade(tl_items[POS_NOM],tl_items[POS_RACCOURCI])
	
			}
			/*A sinon si c'est un element a inserer au deuxieme niveau*/
			ELSE IF (tl_items[POS_PROFONDEUR]=2)
			{
				/*A insertion de l'item et de la macro associe*/
				add_bouton(tl_items[POS_NOM], tl_items[POS_MACRO],
				  tl_items[POS_RACCOURCI])
	
				/*! si c'est une icone de PC simplifie*/
				IF (SUBSTRING@(tl_items[POS_NOM],1,4)="pcs_") 
				{
					/*recupere le nom du site*/
					vl_str=SUBSTRING@(tl_items[POS_NOM],5)

					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 3] = -1
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 4] = -1
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 5] = PIX_DEGRADE++LOWERCASE@(vl_str)
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 7] = 1

					/*memorise la position de cette icone PC simplifie*/
					tl_data=vl_str,vm_cascade_num,vm_bouton_num-1
					tm_icones_pcs=ARRAY_INSERT@(tm_icones_pcs,tl_data)
				}

				/*A si c'est l'heure*/
				ELSE IF (tl_items[POS_NOM]="Heure")
				{
					vm_menu_items[vm_cascade_num,1,vm_bouton_num-1, 0] = 
										DATE_FORMAT@(CURRENT_TIME@(),305)
					vm_menu_items[vm_cascade_num,1,vm_bouton_num-1, 1] = 
										DATE_FORMAT@(CURRENT_TIME@(),305)
					vm_menu_items[vm_cascade_num,1,vm_bouton_num-1, 3] = -1
					vm_menu_items[vm_cascade_num,1,vm_bouton_num-1, 4] = -1
					vm_menu_items[vm_cascade_num,1,vm_bouton_num-1, 5] = NULL
					vm_menu_items[vm_cascade_num,1,vm_bouton_num-1, 7] = 1

					vm_cascade_date=vm_cascade_num
					vm_bouton_date=vm_bouton_num-1
				}
	
				/*A si c'est le reveil*/
				ELSE IF (tl_items[POS_NOM]="Reveil")
				{
					vm_menu_items[vm_cascade_num,1,vm_bouton_num-1, 0] = "reveil"
					vm_menu_items[vm_cascade_num,1,vm_bouton_num-1, 1] = "reveil"
					vm_menu_items[vm_cascade_num,1,vm_bouton_num-1, 3] = -1
					vm_menu_items[vm_cascade_num,1,vm_bouton_num-1, 4] = -1
					vm_menu_items[vm_cascade_num,1,vm_bouton_num-1, 5] = PIX_REVEIL_OFF
					vm_menu_items[vm_cascade_num,1,vm_bouton_num-1, 7] = 1
	
					vm_cascade_reveil=vm_cascade_num
					vm_bouton_reveil=vm_bouton_num-1
				}

				/*A si c'est l'icone d'etat du Pirau */
				ELSE IF (tl_items[POS_MACRO]="etat_pirau")
				{
					vm_menu_items[vm_cascade_num,1,vm_bouton_num-1, 3] = -1
					vm_menu_items[vm_cascade_num,1,vm_bouton_num-1, 4] = -1
					vm_menu_items[vm_cascade_num,1,vm_bouton_num-1, 5] = PIX_PIRAU_OK
					vm_menu_items[vm_cascade_num,1,vm_bouton_num-1, 7] = 1

					vm_cascade_pirau=vm_cascade_num
					vm_bouton_pirau=vm_bouton_num-1
				}

				/*A si c'est le repondeur*/
				ELSE IF tl_items[POS_MACRO] = "repondeur_tel"
				{
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 3] = -1
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 4] = -1
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 5] = PIX_REPONDEUR_OFF
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 7] = 1
	
					vm_cascade_repond = vm_cascade_num
					vm_bouton_repond = vm_bouton_num - 1
				}

				/*A si c'est le bouton alarmes*/
				ELSE IF tl_items[POS_MACRO] = "alarme"
				{
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 3] = -1
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 4] = -1
					 IF ( (COM04_Operateur_A_Le_Droit_De(XDC_FAM_EXPLOITATION)=TRUE) and (vm_site=XDC_VC))
					      vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 5] = PIX_ALARME_VERT_L
					 else vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 5] = PIX_ALARME_VERT
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 7] = 1
	
					vm_cascade_alarme = vm_cascade_num
					vm_bouton_alarme = vm_bouton_num - 1
				}

				/*A si c'est le bouton eqt*/
				ELSE IF tl_items[POS_MACRO] = "eqt"
				{
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 3] = -1
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 4] = -1
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 5] = PIX_EQT_VERT
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 7] = 1
	
					vm_cascade_eqt = vm_cascade_num
					vm_bouton_eqt = vm_bouton_num - 1
				}
				/*A si c'est l'icone de communication Gendarmerie Nationale */
				ELSE IF tl_items[POS_MACRO] = "comm_GN"
				{
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 3] = -1
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 4] = -1
					if (vm_site=XDC_DA)
					  vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 5] = PIX_RAU_DA_EN_MAIN			
					else if (vm_site=XDC_VE)
					  vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 5] = PIX_RAU_VE_EN_MAIN
           				else if (vm_site=XDC_VD)
					  vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 5] = PIX_RAU_VD_EN_MAIN
					else if (vm_site=XDC_DP)
					  vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 5] = PIX_RAU_PR_EN_MAIN
					else if (vm_site=XDC_VC)
					  vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 5] = PIX_RAU_CA_EN_MAIN
					else
					  vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 5] = PIX_GN_NORMAL
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 7] = 1
	
					vm_cascade_comm_GN = vm_cascade_num
					vm_bouton_comm_GN = vm_bouton_num - 1
				}
	
				/*A si c'est l'icone de  basculement du RAU Aubagne*/
				ELSE IF tl_items[POS_MACRO] = "basc_RAU_DA"
				{
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 3] = -1
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 4] = -1
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 5] = PIX_RAU_DA_NON_EN_MAIN
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 7] = 1
	
					vm_cascade_comm_DA = vm_cascade_num
					vm_bouton_comm_DA = vm_bouton_num - 1
				}
	
				/*A si c'est l'icone de  basculement du RAU Cote d Azur*/
				ELSE IF tl_items[POS_MACRO] = "basc_RAU_CA"
				{
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 3] = -1
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 4] = -1
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 5] = PIX_RAU_CA_NON_EN_MAIN
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 7] = 1
					vm_cascade_comm_DM=vm_cascade_num
					vm_bouton_comm_DM=vm_bouton_num - 1
				}

				/*A si c'est l'icone de  basculement du RAU Cannet*/
				ELSE IF tl_items[POS_MACRO] = "basc_RAU_VE"
				{
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 3] = -1
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 4] = -1
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 5] = PIX_RAU_VE_NON_EN_MAIN
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 7] = 1
	
					vm_cascade_comm_DC = vm_cascade_num
					vm_bouton_comm_DC = vm_bouton_num - 1
				}
	
				/*A si c'est l'icone de  basculement du RAU Peyruis*/
				ELSE IF tl_items[POS_MACRO] = "basc_RAU_VD"
				{
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 3] = -1
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 4] = -1
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 5] = PIX_RAU_VD_NON_EN_MAIN
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 7] = 1
	
					vm_cascade_comm_DP = vm_cascade_num
					vm_bouton_comm_DP = vm_bouton_num - 1
				}
	
				/*A si c'est l'icone de  basculement du RAU St Max*/
				ELSE IF tl_items[POS_MACRO] = "basc_RAU_PR"
				{
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 3] = -1
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 4] = -1
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 5] = PIX_RAU_PR_NON_EN_MAIN
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 7] = 1
	
					vm_cascade_comm_DS = vm_cascade_num
					vm_bouton_comm_DS = vm_bouton_num - 1
				}
	
                    		/*A si c'est l'icone de communication GN Antenne 1 */
                    		ELSE IF tl_items[POS_MACRO] = "comm_GN1"
                    		{
                         		vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1,3] = -1
                         		vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1,4] = -1
                         		vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1,5] = vm_nom_GN[0,4]
                         		vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1,7] = 1

                         		vm_cascade_comm_GN_PC2[1] = vm_cascade_num
                         		vm_bouton_comm_GN_PC2[1] = vm_bouton_num - 1
                    		}
                    		/*A si c'est l'icone de communication GN Antenne 2 */
                    		ELSE IF tl_items[POS_MACRO] = "comm_GN2"
                    		{
                         		vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1,3] = -1
                         		vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1,4] = -1
                         		vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1,5] =vm_nom_GN[1,4]
                         		vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1,7] = 1

                         		vm_cascade_comm_GN_PC2[2] = vm_cascade_num
                         		vm_bouton_comm_GN_PC2[2] = vm_bouton_num - 1
                    		}
                    		/*A si c'est l'icone de communication GN Antenne 3 */
                   	 	ELSE IF tl_items[POS_MACRO] = "comm_GN3"
                    		{
                         		vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1,3] = -1
                         		vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1,4] = -1
                         		vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1,5] =vm_nom_GN[2,4]
                         		vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1,7] = 1

                         		vm_cascade_comm_GN_PC2[3] = vm_cascade_num
                         		vm_bouton_comm_GN_PC2[3] = vm_bouton_num - 1
                    		}


				/*A si l'element a une icone, je l'insere aussi*/
				IF (tl_items[POS_ICONE]<>NULL)
					add_icone(tl_items[POS_NOM],
								tl_items[POS_ICONE],tl_items[POS_MACRO])
	
				/*A si le nom de l'element l'indique, masquer l'option du menu*/
				IF SUBSTRING@ (tl_items[POS_NOM], 1, 1) = "!"
				{
					vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 3] = -1
				}
			}
			/*A sinon si c'est un element a inserer au troisieme niveau*/
			ELSE IF (tl_items[POS_PROFONDEUR]=3)
			{
				add_sousmenu(tl_items[POS_NOM], tl_items[POS_MACRO],
				  tl_items[POS_RACCOURCI])
	
				/*A si l'element a une icone, je l'insere aussi*/
				IF (tl_items[POS_ICONE]<>NULL)
					add_sousicone(tl_items[POS_NOM],
								tl_items[POS_ICONE],tl_items[POS_MACRO])
			}
		}
	NEXT vl_indice

	/*A
	* assigne a la barre de menu créée un identificateur*/
	SET_SELECTIONS@(vl_id_menu,vm_menu_items)
	RETURN (vl_id_menu)
ENDFUNCTION





/*les fonctions suivantes permettent d'inserer divers items dans la barre de menu principal*/
macro add_cascade(va_titre, va_mnemonic)
	vm_cascade_num = vm_cascade_num + 1
	vm_menu_items[vm_cascade_num, 0] = va_titre
	vm_menu_items[vm_cascade_num, 8] = va_mnemonic
	vm_bouton_num = 0

endmacro


macro add_bouton(va_titre, va_nom_macro, va_mnemonic)
	vm_menu_items[vm_cascade_num, 1, vm_bouton_num, 0] = va_titre
	vm_menu_items[vm_cascade_num, 1, vm_bouton_num, 1] = va_nom_macro
	vm_menu_items[vm_cascade_num, 1, vm_bouton_num, 2] = va_mnemonic
	vm_bouton_num = vm_bouton_num + 1

endmacro


macro add_icone(va_titre,va_nom_icone, va_nom_macro)
	vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 0] = va_titre
	vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 5] = 
									va_nom_icone
	vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 1] = va_nom_macro
	vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 3] = 0
	vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 4] = -1
	vm_menu_items[vm_cascade_num, 1, vm_bouton_num-1, 7] = 1
endmacro


macro add_sousmenu(va_titre,va_nom_macro,va_mnemonic)
	VAR vl_tab

	vl_tab=va_titre,va_nom_macro,va_mnemonic,NULL,NULL,NULL,NULL,NULL
	vm_menu_items[vm_cascade_num,1,vm_bouton_num-1,1,vm_submenu_num] = vl_tab
	vm_submenu_num=vm_submenu_num+1
endmacro


macro add_sousicone(va_titre,va_nom_icone, va_nom_macro)

	VAR vl_tab

	vl_tab=va_titre,va_nom_macro,NULL,0,-1,va_nom_icone,NULL,1
	vm_menu_items[vm_cascade_num,1,vm_bouton_num-1,vm_submenu_num,0]=vl_tab
endmacro



/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
* termine la session
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_FIN ()

/*
* ARGUMENTS EN ENTREE :
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Indefini
*
* CONDITION D'UTILISATION
*   
*
* FONCTION
* tue toutes les taches de la main courante SAUF celles de la tache relais
---------------------------------------------------------------------------- */

VAR tl_task
VAR vl_indice


	DELAY@(0)

	/*liste les tasks*/
	tl_task=TASK_LIST@(TRUE)

	/*parcourt ce tableau*/
	FOR vl_indice=0 TO (ARRAY_SIZE@(tl_task)-1)
		/*si le nom de la tache est different de ITMA_TAR*/	
		IF ( (SUBSTRING@(tl_task[vl_indice][1],1,4)="ITMA") AND
			(SUBSTRING@(tl_task[vl_indice][1],6,3)<>"TAR") AND
			(SUBSTRING@(tl_task[vl_indice][1],6,3)<>"FIN") ) 
		{
			/*je la tue*/
			KILL_TASK@(tl_task[vl_indice][0])
		}
	NEXT vl_indice

	/*je demande l'affichage de la fenetre de login cote synoptiques*/
	PEND_FOR_NEW_TASK@("ITMA_TIR_LOGIN",SYSTEM_VAR@(vg_dg_dial))

	EXIT@()
ENDMACRO



/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
*  gestion des icones dans la barre de menu principa
* (etats des PC simplifies)
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TMT_gestion_icones (va_fenetre,va_variable,va_valeur)

/*
* ARGUMENTS EN ENTREE :
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Indefini
*
* CONDITION D'UTILISATION
*   
*
* FONCTION
---------------------------------------------------------------------------- */
VAR vl_site
VAR vl_longueur
VAR vl_index
VAR vl_prefixe
VAR vl_icone
VAR vl_bouton_num,vl_cascade_num
VAR vl_msg,vl_canal
VAR FORMAT SQL_Procedure_Params@    vl_parametres
VAR FORMAT SQL_Procedure_Result@    vl_resultats

  if (IS_ARRAY@(tm_icones_pcs)=FALSE)
    return

  /*extrait le nom du site de la variable d'etat*/
  vl_longueur=LEN@(va_variable)
  vl_site=SUBSTRING@(va_variable,vl_longueur-1)
  vl_prefixe=SUBSTRING@(va_variable,1,vl_longueur-2)

  /*recherche ce site dans le tableau des icones*/
  vl_index=ARRAY_INDEX@(ARRAY_COLUMN@(tm_icones_pcs,0),vl_site)

  if (vl_index<0)
    return

  vl_bouton_num=tm_icones_pcs[vl_index][2]
  vl_cascade_num=tm_icones_pcs[vl_index][1]

  /*recupere la valeur courante de l'icone associee au PC simplifie*/
  vl_icone=vm_menu_items[vl_cascade_num,1,vl_bouton_num, 5]

  /*suivant le nom de la variable et sa valeur*/
  
  /*si je recois un changement d'etat de connexion */
  if (vl_prefixe=vg_comm_) {
    /*si mode XDC_NOK*/
    if (va_valeur=XDC_NOK) {
      /*si c'etait deja une icone de mode degrade*/
      if (vl_icone=PIX_DEGRADE++LOWERCASE@(vl_site))
	return

      /*sinon on la change*/
      vm_menu_items[vl_cascade_num,1,vl_bouton_num, 5]=PIX_DEGRADE++LOWERCASE@(vl_site)
      UPDATE_SELECTIONS_FILE@(21,"/tmp/barre",vm_menu_items)
      return
    }

  }

  /*on est en mode nominal ou c'est un changement de presence*/
  if (SYSTEM_VAR@(vg_operateur_++vl_site)=XDC_VRAI) {
    /*si l'icone etait deja la bonne*/
    if (vl_icone=PIX_OPERATEUR++LOWERCASE@(vl_site))
      return

    /*sinon on la change*/
    vm_menu_items[vl_cascade_num,1,vl_bouton_num, 5]=PIX_OPERATEUR++LOWERCASE@(vl_site)
    UPDATE_SELECTIONS_FILE@(21,"/tmp/barre",vm_menu_items)
    return
  }
  else { /*si l'operateur n'est plus la*/
    /*si l'icone etait deja la bonne*/
    if (vl_icone=PIX_PAS_OPERATEUR++LOWERCASE@(vl_site))
      return

    /*sinon on la change*/
    vm_menu_items[vl_cascade_num,1,vl_bouton_num,5]=PIX_PAS_OPERATEUR++LOWERCASE@(vl_site)
    UPDATE_SELECTIONS_FILE@(21,"/tmp/barre",vm_menu_items)
    return
  }
  return
ENDMACRO



/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
*  gestion des cliques sur les icones des PC simplifies dans la barre de menu principal
* (etats des PC simplifies)
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO TMT_pcs (va_macro)

/*
* ARGUMENTS EN ENTREE :
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Indefini
*
* CONDITION D'UTILISATION
*
*
* FONCTION
---------------------------------------------------------------------------- */
VAR vl_site
VAR vl_len
VAR vl_mode
VAR vl_msg,tl_data
VAR vl_canal
VAR FORMAT SQL_Procedure_Params@    vl_parametres
VAR FORMAT SQL_Procedure_Result@    vl_resultats
VAR tl_districts
VAR vl_indice,vl_type

  /*extrait le nom du site de la macro*/
  vl_len=LEN@(va_macro)
  vl_site=UPPERCASE@(SUBSTRING@(va_macro,vl_len-1))

  /*si je suis en mode degrade avec ce site*/
  vl_mode=SYSTEM_VAR@(vg_comm_++vl_site)

  if vl_mode=XDC_NOK
    return


  /*liste des districts*/
  tl_districts = SYSTEM_VAR@(vg_les_districts)

  /*type du district*/
  vl_indice=ARRAY_INDEX@(ARRAY_COLUMN@(tl_districts,TDO_CODE_DISTRICT),
				vl_site)
  if (vl_indice<0)
    return
  vl_type=tl_districts[vl_indice][TDO_TYPE_DISTRICT]
  if vl_type=XDC_TYPEM_SD or vl_type=XDC_TYPEM_SC
    return

  /*sinon, si un operateur est connecte*/
  if (SYSTEM_VAR@(vg_operateur_++vl_site)=XDC_VRAI) {
   /*si le site est de niveau 2*/
    if ((vl_type=XDC_TYPEM_PC2) OR (vl_type=XDC_TYPEM_PC2LT)) {
      /*sans droit adequat*/
      if (COM04_Operateur_A_Le_Droit_De(XDC_FAM_ACHEVER_PC2)=FALSE)
	return
    }
      
    /*demande de confirmation pour l'achever*/
    IF (PEND_FOR_NEW_TASK@( "ITMA_TCF_Demande_Confirmation",
		"Voulez-vous achever la FMC operateur du site "++vl_site++"?")<>COM_OK)
      return

	macro_wins_busy@()

    /*on indique a titbi qu'on a demande la fin de poste du PC simplifie*/
    tl_data=vm_site,vl_site
    vl_msg = MTAR_MSG_EXEC, 1, MTAR_FCT_FIN_POSTE, ARRAY_TO_STRING@(tl_data,MTAR_CAR_SEPAR)
    DB_SEND_POKE@ (COM_CANAL_TAR01, vl_msg)

    /*on se connecte a la base du PC et on acheve la fiche*/
    vl_canal = COM43_SQL_CONNECT (vl_site)
    IF IS_NULL@(vl_canal)
	RETURN
    SQL_CHANNEL_MASTER@ (vl_canal, 0)
    SET_SYSTEM_VAR@(vg_canal_SGBD_pcs,vl_canal)

    vl_parametres[0].type = SYB#CHAR_                               ' Site local
    vl_parametres[0].data = SYSTEM_VAR@(vg_nom_site)
    vl_parametres[0].output = FALSE

    /*recuperation de la fiche operateur du site*/
    IF COM39_SQL_Procedure_PCS (XZAE104_FMC_Operateur_En_Cours,
			   vl_parametres, vl_resultats, C_MODULE) <> COM_OK {
       SQL_DISCONNECT@(SYSTEM_VAR@(vg_canal_SGBD_pcs))
       SET_SYSTEM_VAR@(vg_canal_SGBD_pcs,null)
       RETURN
    }

    tl_data=vl_resultats.select_results[0]
    if (array_size@(tl_data)>0) {
      vl_msg=tl_data[ARRAY_SIZE@(tl_data)-1]

      /*achevement de cette fiche*/
      tl_data=vl_msg[0],vl_msg[1]
      if (PEND_FOR_NEW_TASK@("ITMA_TMC_achever_fiche",null,
					  tl_data,XDC_VRAI,"ITMA_TMT",vl_msg[4])<>COM_OK) {
         SQL_DISCONNECT@(SYSTEM_VAR@(vg_canal_SGBD_pcs))
        SET_SYSTEM_VAR@(vg_canal_SGBD_pcs,null)
        return
      }
    }
    SQL_DISCONNECT@(SYSTEM_VAR@(vg_canal_SGBD_pcs))
    SET_SYSTEM_VAR@(vg_canal_SGBD_pcs,null)

    /*on met ca dans le journal d'administration*/
    vl_msg = MTAR_MSG_EXEC, 1, MTAR_FCT_XZST10, vl_site
    DB_SEND_POKE@ (COM_CANAL_TAR01, vl_msg)
  }
  else { 
    /*si le type est PC2*/
    if ((vl_type=XDC_TYPEM_PC2) OR (vl_type=XDC_TYPEM_PC2LT)) {
	/*demande confirmation pour forcer le transfert des droits d'enrichir au CI*/
	if (PEND_FOR_NEW_TASK@ ("ITMA_TCF_Demande_Confirmation",
			"Voulez-vous forcer la recuperation des droits d'enrichir des FMC du site "++
			vl_site++"?")<>COM_OK)
	  return

    	/*on se connecte a la base du PC et on acheve la fiche*/
    	vl_canal = COM43_SQL_CONNECT (vl_site)
    	IF IS_NULL@(vl_canal)
		RETURN
    	SQL_CHANNEL_MASTER@ (vl_canal, 0)
    	SET_SYSTEM_VAR@(vg_canal_SGBD_pcs,vl_canal)

	vl_parametres[0].type=SYB#CHAR_
        vl_parametres[0].data=vl_site
        vl_parametres[0].output=FALSE
        vl_parametres[1].type=SYB#CHAR_
	vl_parametres[1].data=XDC_NOM_SITE_CI
        vl_parametres[1].output=FALSE
        /*on transfere ses droits d'enrichir au CI*/
        COM39_SQL_Procedure_PCS (XZAE147_Transmet_Droits_FMC,
	  vl_parametres, vl_resultats, C_MODULE)

	SQL_DISCONNECT@(SYSTEM_VAR@(vg_canal_SGBD_pcs))
	SET_SYSTEM_VAR@(vg_canal_SGBD_pcs,null)
    }
  }
ENDMACRO



DEFINE	CM_ETAT_INDISPONIBLE	(XDC_EQT_MAJEUR + XDC_EQT_CRITIQUE + XDC_EQT_DESACTIVE + XDC_EQT_HS + XDC_EQT_INHIBE)

/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
*  Lit en base de donnees l'etat actuel du PIRAU du site
*  et met a jour l'icone d'etat dans la barre de menu.
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TMT_Mettre_A_Jour_Etat_PIRAU ()

/*
* ARGUMENTS EN ENTREE : Aucun
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Indefini
*
* CONDITION D'UTILISATION
*
*
* FONCTION
---------------------------------------------------------------------------- */

VAR	FORMAT COM_Donnees_Equipements	tl_eqts

	IF NOT IS_NULL@ (vm_cascade_pirau)
	{
		/* Lire en base de donnees l'etat actuel du PIRAU du site */
		ITMA_COM_Lire_Equipements (XDC_EQT_RAU, vm_site,
					      XDC_EQT_MINEUR, XDC_EQT_NON_MINEUR, CM_ETAT_INDISPONIBLE, 0,
					      tl_eqts, C_MODULE)
		IF (ARRAY_SIZE@ (tl_eqts) > 0) {
			vm_menu_items[vm_cascade_pirau,1,vm_bouton_pirau, 5] = PIX_PIRAU_OK
		} ELSE {
			vm_menu_items[vm_cascade_pirau,1,vm_bouton_pirau, 5] = PIX_PIRAU_HS
		}

		/*B Mettre a jour l'icone d'etat */
		UPDATE_SELECTIONS_FILE@ (21, "/tmp/barre", vm_menu_items)
	}
ENDMACRO
