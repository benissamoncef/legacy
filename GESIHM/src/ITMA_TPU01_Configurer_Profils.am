/*E*/
/* Fichier : $Id: ITMA_TPU01_Configurer_Profils.am,v 1.3 1994/12/26 18:27:38 guilhou Exp $      Release : $Revision: 1.3 $        Date : $Date: 1994/12/26 18:27:38 $
-------------------------------------------------------------------------------
* STERIA *  PROJET MIGRAZUR
-------------------------------------------------------------------------------
* SOUS-SYSTEME  GESIHM
-------------------------------------------------------------------------------
* MODULE ITMA_TPU * FICHIER ITMA_TPU01_Configurer_Profils.am
-------------------------------------------------------------------------------
* DESCRIPTION DU MODULE :
*
*   Configuration des profils utilisateurs.
*
*   Cf. DCG 2.4.59
*
-------------------------------------------------------------------------------
* HISTORIQUE :
*
* Lecrivain	03 Nov 1994	: Creation
---------------------------------------------------------------------------- */

INCLUDE	"dbase_.am"
INCLUDE	"../inc/ITMA_COM.h"
INCLUDE	"../inc/ITMA_TDO.h"
INCLUDE	"../inc/ITMA_TPU.h"
INCLUDE "../../XDMICG/inc/xdc_ax.h"
INCLUDE "../../XDMICG/inc/xzic_ax.h"

INCLUDE	"../inc/xzau01sp.h"
INCLUDE	"../inc/xzau03sp.h"
INCLUDE	"../inc/xzau04sp.h"
INCLUDE	"../inc/xzau08sp.h"
INCLUDE	"../inc/xzau09sp.h"
INCLUDE	"../inc/xzau13sp.h"



DEFINE	C_MODULE	"MTPU"			' Nom du module



/*A
 * Definition des codes et libelles
 * des erreurs specifiques au module
 * ---------------------------------
 */

DEFINE  C_ERR_CHOISIR_PROFIL	1
DEFINE  C_LIB_CHOISIR_PROFIL	"Sélectionner d'abord un profil"

DEFINE  C_ERR_PROFIL_EXISTE	2
DEFINE  C_LIB_PROFIL_EXISTE	"Un profil portant ce nom existe déjà"

DEFINE  C_ERR_PROFIL_UTILISE	3
DEFINE  C_LIB_PROFIL_UTILISE	"Un utilisateur possède ce profil"



VAR FORMAT TPU_Profil vm_l_profils		  ' Liste des profils
VAR FORMAT TPU_Famille_Fonctions vm_l_fam_profil  ' Liste des familles du profil
VAR FORMAT TPU_Famille_Fonctions vm_l_autres_fam  ' Liste des autres familles

VAR FORMAT TPU_Famille_Fonctions vm_l_familles	  ' Liste complete des familles

VAR	vm_num_profil				  ' Numero du profil selectionne



/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
*  Gestion des profils utilisateurs.
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TPU01_Configurer_Profils (va_appelant)

/*
* ARGUMENTS EN ENTREE :
*  va_appelant        : Nom de la macro Applix ayant invoque la presente.
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Indefini
*
* CONDITION D'UTILISATION
*   Selection de l'option "Administrer -> Configurer profils" dans MTMT
*
* FONCTION
*   Permet de visualiser les profils utilisateurs definis, de les modifier,
*   d'en definir de nouveaux et d'en supprimer.
*
---------------------------------------------------------------------------- */

    VAR     vl_fenetre_profils			' Nom de la fenetre du module
    VAR     vl_objet_selecte			' L'objet courant de la fenetre
    VAR     vl_les_messages_acceptes		' Pour reception de signaux
    VAR     vl_la_fenetre_est_active
    VAR     vl_installer_traitement_erreur

    VAR     vl_l_num_fam			' Numeros des familles du profil
    VAR FORMAT TPU_Famille_Fonctions vl_famille	' Famille selectionnee
    VAR     vl_num_profil, vl_nom_profil

    VAR     vl_index				' Rang de l'item selecte
    VAR     i, vl_statut


/*A
 * Traitements en cas d'erreur durant l'initialisation :
 * informer l'operateur, tracer l'erreur et abandonner
 * -----------------------------------------------------
 */

ON ERROR {
    ERROR_BOX@
    COM01_Trace (COM_WARNING, COM03_Message_Erreur (C_MODULE))
    RETURN
}


/*A
 * Charger la fenetre "Configuration profils"
 * ------------------------------------------
 */

vl_fenetre_profils = DB_LOAD@ ("ITMA_TPU01")
DB_WINDOW_REMAIN@ (vl_fenetre_profils, TRUE)

DB_XPOS@ (vl_fenetre_profils, 0)
DB_YPOS@ (vl_fenetre_profils, 93)
DB_WIDTH@ (vl_fenetre_profils,1264)

COM02_Attacher_Aide (vl_fenetre_profils, "ITMA_TPU01_Configurer_Profils")


/*A
 * Mettre en place la reception des messages
 * -----------------------------------------
 */

vl_les_messages_acceptes[0] = COM_CANAL_FIN
DB_ACCEPT_POKES@ (vl_fenetre_profils, vl_les_messages_acceptes)


/*A
 * Definir les caracteristiques (initiales) des objets graphiques
 * --------------------------------------------------------------
 */

DB_CTRL_VALUE@ (vl_fenetre_profils, "BL_Profils", -1)
DB_CTRL_RETURN_ON_CHANGE@ (vl_fenetre_profils, "BL_Profils", TRUE)

DB_CTRL_VALUE@ (vl_fenetre_profils, "BL_Familles_Profil", -1)

DB_CTRL_VALUE@ (vl_fenetre_profils, "BL_Familles", -1)


/*A
 * Initialiser les donnees a visualiser (listes des profils et des familles)
 * -------------------------------------------------------------------------
 */

IF TPU01_Init_Profils_Et_Familles (vl_fenetre_profils) <> COM_OK
    RETURN


/*A
 * Traitements en cas d'erreur durant la visualisation :
 * informer l'operateur et selon la nature et la gravite
 * de l'erreur la tracer ou non, continuer ou abandonner
 * -----------------------------------------------------
 */

vl_installer_traitement_erreur = TRUE
WHILE vl_installer_traitement_erreur
    vl_installer_traitement_erreur = FALSE

    ON ERROR {
	ERROR_BOX@
	IF ERROR_NUMBER@() <> COM_ERR_NON_SAISI  AND
	   ERROR_NUMBER@() <> C_ERR_CHOISIR_PROFIL  AND
	   ERROR_NUMBER@() <> C_ERR_PROFIL_EXISTE  AND
	   ERROR_NUMBER@() <> C_ERR_PROFIL_UTILISE
	    COM01_Trace (COM_WARNING, COM03_Message_Erreur (C_MODULE))
	vl_installer_traitement_erreur = TRUE
    }
WEND


/*A
 * Tant que la fenetre n'est pas desactivee, la visualiser
 * -------------------------------------------------------
 */

vl_la_fenetre_est_active = TRUE
WHILE vl_la_fenetre_est_active

    DB_DISPLAY@ (vl_fenetre_profils)
    vl_objet_selecte = DB_EXIT_CTRL@ (vl_fenetre_profils)
    IF vl_objet_selecte <> "poke_"  AND  SYSTEM_VAR@ (vg_verrou)
	vl_objet_selecte = NULL

    CASE OF vl_objet_selecte

    CASE "poke_"
        CASE OF  DB_GET_POKE@ (vl_fenetre_profils)
        CASE COM_CANAL_FIN
            vl_la_fenetre_est_active = FALSE
        ENDCASE


    CASE "BP_Quitter"
	vl_la_fenetre_est_active = FALSE


    /*A
     * Sur choix "Imprimer", ecrire les profils et familles associees
     * dans un fichier puis demander l'impression de ce fichier
     * --------------------------------------------------------------
     */

    CASE "BP_Imprimer"
	NOTHING


    /*A
     * Sur selection d'un profil, lire les familles associees et les
     * afficher puis construire et afficher la liste des familles restantes
     * --------------------------------------------------------------------
     */

    CASE "BL_Profils"
	vl_index = DB_CTRL_GET_VALUE@ (vl_fenetre_profils, "BL_Profils")
	vm_num_profil = vm_l_profils[vl_index].numero
	IF ITMA_TPU_Lire_Familles_Profil (vm_num_profil, C_MODULE,
					     vm_l_fam_profil) <> COM_OK
	    TPU01_Raz_Selection (vl_fenetre_profils)
	ELSE {
	    DB_CTRL_VALUE@ (vl_fenetre_profils, "BS_Nom_Profil",
				vm_l_profils[vl_index].nom)
	    DB_CTRL_STRINGS@ (vl_fenetre_profils, "BL_Familles_Profil",
				ARRAY_COLUMN@(vm_l_fam_profil, TPU_NOM_FAMILLE))
	    vl_l_num_fam = ARRAY_COLUMN@ (vm_l_fam_profil, TPU_NUMERO_FAMILLE)

	    vm_l_autres_fam = NULL
	    FOR i = 0  TO ARRAY_SIZE@ (vm_l_familles) - 1
		IF ARRAY_INDEX@ (vl_l_num_fam, vm_l_familles[i].numero) < 0
		    vm_l_autres_fam[ARRAY_SIZE@(vm_l_autres_fam)] = vm_l_familles[i]
	    NEXT i
	    DB_CTRL_STRINGS@ (vl_fenetre_profils, "BL_Familles",
				ARRAY_COLUMN@(vm_l_autres_fam, TPU_NOM_FAMILLE))
	}


    /*A
     * Sur choix "Ajouter Famille", verifier qu'un profil et une famille
     * sont selectionnes, puis ajouter la famille a celles du profil
     * -----------------------------------------------------------------
     */

    CASE "BP_Ajouter_Famille"
	IF IS_NULL@ (vm_num_profil)
	    ERROR@ (C_ERR_CHOISIR_PROFIL, C_LIB_CHOISIR_PROFIL)
	vl_index = DB_CTRL_GET_VALUE@ (vl_fenetre_profils, "BL_Familles")
	IF vl_index < 0
	    ERROR@ (COM_ERR_NON_SAISI, COM_LIB_NON_SAISI, "Famille à ajouter")
	vl_famille = vm_l_autres_fam[vl_index]

	IF TPU01_Ajouter_Famille (vm_num_profil, vl_famille.numero) = COM_OK {
	    vm_l_autres_fam = ARRAY_DELETE@ (vm_l_autres_fam, vl_index)
	    DB_CTRL_STRINGS@ (vl_fenetre_profils, "BL_Familles",
				ARRAY_COLUMN@(vm_l_autres_fam, TPU_NOM_FAMILLE))
	    DB_CTRL_VALUE@ (vl_fenetre_profils, "BL_Familles", -1)

	   vl_index =DB_CTRL_GET_VALUE@(vl_fenetre_profils,"BL_Familles_Profil")
	    IF vl_index < 0
		vm_l_fam_profil[ARRAY_SIZE@ (vm_l_fam_profil)] = vl_famille
	    ELSE vm_l_fam_profil = ARRAY_INSERT@ (vm_l_fam_profil,
						     vl_famille, vl_index)
	    DB_CTRL_STRINGS@ (vl_fenetre_profils, "BL_Familles_Profil",
				ARRAY_COLUMN@(vm_l_fam_profil, TPU_NOM_FAMILLE))
	}


    /*A
     * Sur choix "Supprimer Famille", verifier qu'un profil et une
     * famille du profil sont selectionnes, puis supprimer la famille
     * --------------------------------------------------------------
     */

    CASE "BP_Supprimer_Famille"
	vl_index = DB_CTRL_GET_VALUE@ (vl_fenetre_profils, "BL_Familles_Profil")
	IF vl_index < 0
	    ERROR@ (COM_ERR_NON_SAISI, COM_LIB_NON_SAISI, "Famille à supprimer")
	vl_famille = vm_l_fam_profil[vl_index]

	IF TPU01_Supprimer_Famille (vm_num_profil, vl_famille.numero) = COM_OK {
	    vm_l_fam_profil = ARRAY_DELETE@ (vm_l_fam_profil, vl_index)
	    DB_CTRL_STRINGS@ (vl_fenetre_profils, "BL_Familles_Profil",
				ARRAY_COLUMN@(vm_l_fam_profil, TPU_NOM_FAMILLE))
	    DB_CTRL_VALUE@ (vl_fenetre_profils, "BL_Familles_Profil", -1)

	    vm_l_autres_fam[ARRAY_SIZE@ (vm_l_autres_fam)] = vl_famille
	    DB_CTRL_STRINGS@ (vl_fenetre_profils, "BL_Familles",
				ARRAY_COLUMN@(vm_l_autres_fam, TPU_NOM_FAMILLE))
	}


    /*A
     * Sur choix "Creer Profil", verifier qu'un nom de profil
     * est saisi, puis demander la creation d'un profil
     * ------------------------------------------------------
     */

    CASE "BP_Creer_Profil"
	vl_nom_profil = DB_CTRL_GET_VALUE@(vl_fenetre_profils, "BS_Nom_Profil")
	IF TPU01_Creer_Profil(vl_nom_profil, vl_num_profil) = COM_OK {
	    IF IS_NULL@ (vl_num_profil)
		ERROR@ (C_ERR_PROFIL_EXISTE, C_LIB_PROFIL_EXISTE)

	    /*A
	     * puis si la creation est correctement effectuee, ajouter
	     * le profil a la liste et vider la liste de ses familles
	     * -------------------------------------------------------
	     */

	    vl_index = ARRAY_SIZE@ (vm_l_profils)
	    vm_l_profils[vl_index].numero = vl_num_profil
	    vm_l_profils[vl_index].nom = vl_nom_profil
	    DB_CTRL_STRINGS@ (vl_fenetre_profils, "BL_Profils",
				 ARRAY_COLUMN@(vm_l_profils, TPU_NOM_PROFIL))
	    DB_CTRL_VALUE@ (vl_fenetre_profils, "BL_Profils", vl_index)

	    vm_num_profil = vl_num_profil

	    vm_l_fam_profil = NULL
	    DB_CTRL_STRINGS@ (vl_fenetre_profils, "BL_Familles_Profil", NULL)
	    DB_CTRL_VALUE@ (vl_fenetre_profils, "BL_Familles_Profil", -1)

	    vm_l_autres_fam = vm_l_familles
	    DB_CTRL_STRINGS@ (vl_fenetre_profils, "BL_Familles",
				ARRAY_COLUMN@(vm_l_autres_fam, TPU_NOM_FAMILLE))
	    DB_CTRL_VALUE@ (vl_fenetre_profils, "BL_Familles", -1)
	}


    /*A
     * Sur choix "Supprimer Profil", verifier qu'un profil
     * est selectionne, puis demander sa suppression
     * ---------------------------------------------------
     */

    CASE "BP_Supprimer_Profil"
	IF IS_NULL@ (vm_num_profil)
	    ERROR@ (C_ERR_CHOISIR_PROFIL, C_LIB_CHOISIR_PROFIL)
	vl_statut = TPU01_Supprimer_Profil (vm_num_profil)
	IF vl_statut = COM_QUITTE
	    ERROR@ (C_ERR_PROFIL_UTILISE, C_LIB_PROFIL_UTILISE)
	IF vl_statut = COM_OK {
	    vl_index = DB_CTRL_GET_VALUE@ (vl_fenetre_profils, "BL_Profils")
	    vm_l_profils = ARRAY_DELETE@ (vm_l_profils, vl_index)
	    DB_CTRL_STRINGS@ (vl_fenetre_profils, "BL_Profils",
				 ARRAY_COLUMN@(vm_l_profils, TPU_NOM_PROFIL))
	    TPU01_Raz_Selection (vl_fenetre_profils)
	}
    ENDCASE
WEND

ENDMACRO



/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
*  Initialise les listes des profils et des familles de fonctions.
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO TPU01_Init_Profils_Et_Familles (va_fenetre)

/*
* ARGUMENTS EN ENTREE :
*   va_fenetre        : Id. de la fenetre contenant les objets a initialiser.
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : COM_OK en cas d'execution correcte, COM_NOK sinon.
*
* CONDITION D'UTILISATION
*   ITMA_TPU01_Configurer_Profils
*
* FONCTION
*   Initialise les valeurs des listes des profils et des familles de fonctions
*   du logiciel.
*
---------------------------------------------------------------------------- */

    VAR FORMAT SQL_Procedure_Result@ vl_resultats


/*A
 * Lire la liste des profils
 * -------------------------
 */

IF COM05_SQL_Procedure (XZAU08_Lire_Liste_Profils,
			   NULL, vl_resultats, C_MODULE) <> COM_OK
    RETURN (COM_NOK)

vm_l_profils = vl_resultats.select_results[0]

DB_CTRL_STRINGS@ (va_fenetre, "BL_Profils",
		     ARRAY_COLUMN@ (vm_l_profils, TPU_NOM_PROFIL))


/*A
 * Lire la liste des familles de fonctions
 * ---------------------------------------
 */

IF COM05_SQL_Procedure (XZAU09_Lire_Liste_Fonctions,
			   NULL, vl_resultats, C_MODULE) <> COM_OK
    RETURN (COM_NOK)

vm_l_familles = vl_resultats.select_results[0]


RETURN (COM_OK)

ENDMACRO



/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
*  Remet a zero la selection de profil.
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO TPU01_Raz_Selection (va_fenetre)

/*
* ARGUMENTS EN ENTREE :
*   va_fenetre        : Id. de la fenetre contenant les objets a initialiser.
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : COM_OK.
*
*
* CONDITION D'UTILISATION
*   ITMA_TPU01_Configurer_Profils
*
*
* FONCTION
*   Value a NULL les donnees de profil selectionne et met a jour l'affichage.
*
---------------------------------------------------------------------------- */

DB_CTRL_VALUE@ (va_fenetre, "BL_Profils", -1)
vm_num_profil = NULL

DB_CTRL_VALUE@ (va_fenetre, "BS_Nom_Profil", NULL)

vm_l_fam_profil = NULL
vm_l_autres_fam = NULL

DB_CTRL_STRINGS@ (va_fenetre, "BL_Familles_Profil", NULL)
DB_CTRL_VALUE@ (va_fenetre, "BL_Familles_Profil", -1)

DB_CTRL_STRINGS@ (va_fenetre, "BL_Familles", NULL)
DB_CTRL_VALUE@ (va_fenetre, "BL_Familles", -1)

RETURN (COM_OK)

ENDMACRO



/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
*  Ajoute une famille de fonctions a un profil utilisateur.
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO TPU01_Ajouter_Famille (va_numero_profil, va_numero_famille)

/*
* ARGUMENTS EN ENTREE :
*   va_numero_profil  : Numero du profil auquel ajouter une famille ;
*   va_numero_famille : Numero de la famille a ajouter au profil.
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : COM_OK en cas d'execution correcte, COM_NOK sinon.
*
* CONDITION D'UTILISATION
*   ITMA_TPU01_Configurer_Profils
*
* FONCTION
*   Execute simplement la requete adequate pour ajouter la famille indiquee
*   au profil de numero indique.
*
---------------------------------------------------------------------------- */

    VAR FORMAT SQL_Procedure_Params@ vl_parametres
    VAR FORMAT SQL_Procedure_Result@ vl_resultats


vl_parametres[0].type = TPU_Ident_Profil
vl_parametres[0].data = va_numero_profil
vl_parametres[0].output = FALSE

vl_parametres[1].type = TPU_Ident_Famille
vl_parametres[1].data = va_numero_famille
vl_parametres[1].output = FALSE

IF COM05_SQL_Procedure (XZAU03_Ajouter_Fonction_Profil,
			   vl_parametres, vl_resultats, C_MODULE) <> COM_OK
    RETURN (COM_NOK)

RETURN (COM_OK)

ENDMACRO



/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
*  Supprime une famille de fonctions d'un profil utilisateur.
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO TPU01_Supprimer_Famille (va_numero_profil, va_numero_famille)

/*
* ARGUMENTS EN ENTREE :
*   va_numero_profil  : Numero du profil auquel retirer une famille ;
*   va_numero_famille : Numero de la famille a retirer du profil.
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : COM_OK en cas d'execution correcte, COM_NOK sinon.
*
* CONDITION D'UTILISATION
*   ITMA_TPU01_Configurer_Profils
*
* FONCTION
*   Execute simplement la requete adequate pour supprimer la famille indiquee
*   du profil de numero indique.
*
---------------------------------------------------------------------------- */

    VAR FORMAT SQL_Procedure_Params@ vl_parametres
    VAR FORMAT SQL_Procedure_Result@ vl_resultats


vl_parametres[0].type = TPU_Ident_Profil
vl_parametres[0].data = va_numero_profil
vl_parametres[0].output = FALSE

vl_parametres[1].type = TPU_Ident_Famille
vl_parametres[1].data = va_numero_famille
vl_parametres[1].output = FALSE

IF COM05_SQL_Procedure (XZAU04_Supprim_Fonction_Profil,
			   vl_parametres, vl_resultats, C_MODULE) <> COM_OK
    RETURN (COM_NOK)

RETURN (COM_OK)

ENDMACRO



/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
*  Cree un nouveau profil utilisateur.
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO TPU01_Creer_Profil (va_nom_profil, va_numero_profil)

/*
* ARGUMENTS EN ENTREE :
*   va_nom_profil     : Nom du profil a creer.
*
*
* ARGUMENTS EN SORTIE :
*   va_numero_profil  : Numero du profil cree, NULL s'il n'est pas cree.
*
*
* CODE RETOUR         : COM_OK en cas d'execution correcte, COM_NOK sinon.
*
* CONDITION D'UTILISATION
*   ITMA_TPU01_Configurer_Profils
*
* FONCTION
*   Execute simplement la requete adequate pour creer un nouveau profil avec
*   le nom indique ;
*   value en retour le numero du profil cree, ou NULL s'il ne l'a pas ete.
*
---------------------------------------------------------------------------- */

    VAR FORMAT SQL_Procedure_Params@ vl_parametres
    VAR FORMAT SQL_Procedure_Result@ vl_resultats


vl_parametres[0].type = SYB#CHAR_
vl_parametres[0].data = va_nom_profil
vl_parametres[0].output = FALSE

vl_parametres[1].type = TPU_Ident_Profil
vl_parametres[1].output = TRUE

vl_parametres[2].type = SYB#INT4_			' Statut : profil cree
vl_parametres[2].output = TRUE				' ou deja present

IF COM05_SQL_Procedure (XZAU01_Creer_Profil,
			   vl_parametres, vl_resultats, C_MODULE) <> COM_OK
    RETURN (COM_NOK)

IF vl_resultats.return_parameters[1] = XDC_OK
    va_numero_profil = vl_resultats.return_parameters[0]
ELSE va_numero_profil = NULL

RETURN (COM_OK)

ENDMACRO



/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
*  Supprime un profil utilisateur.
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO TPU01_Supprimer_Profil (va_numero_profil)

/*
* ARGUMENTS EN ENTREE :
*   va_numero_profil  : Numero du profil a supprimer.
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : COM_OK si l'action a ete effectuee correctement ;
*                     : COM_QUITTE si un utilisateur possede ce profil ;
*                     : COM_NOK en cas de probleme lors de l'execution.
*
* CONDITION D'UTILISATION
*   ITMA_TPU01_Configurer_Profils
*
* FONCTION
*   Execute simplement la requete adequate pour supprimer le profil de numero
*   indique.
*
---------------------------------------------------------------------------- */

    VAR FORMAT SQL_Procedure_Params@ vl_parametres
    VAR FORMAT SQL_Procedure_Result@ vl_resultats


vl_parametres[0].type = TPU_Ident_Profil
vl_parametres[0].data = va_numero_profil
vl_parametres[0].output = FALSE

vl_parametres[1].type = SYB#INT4_		' Statut : profil supprime ou
vl_parametres[1].output = TRUE			' utilisateur possede ce profil

IF COM05_SQL_Procedure (XZAU13_Supprimer_Profil,
			   vl_parametres, vl_resultats, C_MODULE) <> COM_OK
    RETURN (COM_NOK)

IF vl_resultats.return_parameters[0] = XDC_OK
    RETURN (COM_OK)
ELSE RETURN (COM_QUITTE)

ENDMACRO
