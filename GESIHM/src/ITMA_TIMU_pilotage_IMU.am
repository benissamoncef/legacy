/*E*/
/* Fichier : $Id: ITMA_TIMU_pilotage_IMU.am,v 1.6 2021/07/22 12:18:57 pc2dpdy Exp $      Release : $Revision: 1.6 $        Date : $Date: 2021/07/22 12:18:57 $
------------------------------------------------------------------------
* GTIE *  PROJET MIGRAZUR
------------------------------------------------------------------------
* SOUS-SYSTEME  GESIHM
------------------------------------------------------------------------
* MODULE MTPM * FICHIER  ITMA_TIMU_pilotage_IMU.am
------------------------------------------------------------------------
* DESCRIPTION DU MODULE :
*
* IHM de commande des IMU.
*
*
------------------------------------------------------------------------
* HISTORIQUE :
*
* CGR	12/10/20	: Creation IMU 1.1 DEM-SAE155
* LCL	21/07/21	: Correction appel depuis PA si XZAP85 ne remonte pas de zone 1.2
* LCL 	21/07/21	: Fix appel PA	1.3
* LCL 	21/07/21	: Fix appel PA	1.4
* LCL 	21/07/21	: Fix remise au neutre PA 1.6
-------------------------------------------------------------------- */

/*A Description des constantes generale
 * ------------------------------------*/
DEFINE  C_MODULE                        "MTIMU"  ' Nom du module

/*A Description des modules a inclures 
* ------------------------------------ */
INCLUDE	"dbase_.am"

INCLUDE	"XDMICG/inc/xdc_ax.h"
INCLUDE	"XDMICG/inc/xzic_ax.h"

INCLUDE	"GESIHM/inc/ITMA_COM.h"
INCLUDE	"GESIHM/inc/ITMA_TDO.h"
INCLUDE	"GESIHM/inc/ITMA_TAR.h"
INCLUDE	"GESIHM/inc/ITMA_TIMU.h"
INCLUDE "../inc/xzat066sp.h"
INCLUDE "../inc/xzap85sp.h"
INCLUDE "../inc/xzac890sp.h"
INCLUDE "../inc/xzac903sp.h"
INCLUDE "../inc/xzac904sp.h"

INCLUDE "../inc/xzao491sp.h"
INCLUDE "../inc/xzao494sp.h"
INCLUDE "../inc/xzao497sp.h"

FORMAT T_zone
	numero_eqt,
	id,
	libelle

FORMAT T_msg
	numero_eqt,
	libelle

 /*A Description des procedures stockees a appeler
* ------------------------------------------------ */


/*A Declaration des variables globales 
* ------------------------------------ */
/*A Item de la fenetre du module
*/
var 	vl_fenetre_TIMU

/*A Mode automatique
*/
var     vm_auto




/*X*/
/* ---------------------------------------------------------------------
* SERVICE RENDU :	Commande le pilotage des IMU
*
*  ---------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TIMU_pilotage_IMU(va_appelant, va_1, va_2, va_3, va_4, va_5)
/*----------------------------------------------------------------------
* ARGUMENTS EN ENTREE :
*
*  va_appelant		: Nom de la macro Applix ayant invoque la presente.
*  va_1 a va_5		: Suivant la procedure d'appel
*
*	Trois appels possibles:
*
*		ITMA_TPA	<Numero plan d'action>	<Numero d'ordre>
*
*			^			^				^
*			|			|				|
*			|		Numero FMC		Numero cle FMC	
*			|
*			|
*		Appel depuis le plan d'action
*
*
*
*		ITMA_TMT
*
*			^
*			|
*		Appel depuis le menu textuel --> Liste des IMUs
*
*
*
*		ISYN_SOP	<Numero de la IMU>
*
*			^
*			|
*		Appel depuis le synoptique Bp de droite
*
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Status OK ou NOK suivant resultat
*
* CONDITION D'UTILISATION
*   Selection de Piloter -> IMU dans MTMT
*
* FONCTION
*    Pilote les IMU
*
--------------------------------------------------------------------- */

/*A Declaration des variables */
/*A ------------------------- */

/*A Variables secondaires ou de travail */
/*A ----------------------------------- */

var FORMAT	TMC_actionFiche		vl_FicheAction

var	vl_Poste		' Le nom de la machine
var	vl_fenetre_active	' flag de fenetre active
var	vl_controle_sortie	' flag de sortie
var	vl_erreur		' flag d'erreur
var	i,j,vl_mess		' index de loop
var	vl_message		' message affiche
var	vl_rang			' rang de la selection dans la liste
var	vl_rang_zones		' rang de la selection dans la liste de zones
var	vl_rang_msg		' rang de la selection dans la liste de messages
var	vl_abt_panneau		' flag d'abonnement des panneaux
var	vl_fmc			' libelle fmc a construire
var	vl_lib_fmc		' tableau du libelle fmc a construire
var	vl_cpt			' compte-rendu
var	tl_data,tl_retour	' param. table evenements
var	tl_titres		' titre evenements
var	vl_appel		' appelant
var	vl_Nummachine		' n° de la machine
var	vl_NumAction		' Numero d'action
var	vl_mode_formation	' Mode Formation
var	tl_liste_causes
var	vl_text			' text en edition
var	vl_liste_msg		' liste de messages
var	vl_liste_zones		' liste de zones
var	vl_nom_msg		' nom du msg selectionne
var	vl_array_chaine		' array de strings
var	vl_liste_id_zones_diff	' liste des id des zones en cours de diffusion (array de strings)
var	vl_strings_BICE
var	vl_size
var	vl_choix_BICE
var	vl_nom_BICE
var	vl_id_BICE
var	vl_basedd
var	vl_arrayDiff
var	vl_array
var	vl_index

/*A Variables principales */
/*A --------------------- */

/*A Numero du district
*/
var	vl_district

/*A Messages acceptes dans la boucle principale
*/
var	vl_messages_acceptes

/*A Nom du site en cours
*/
var	vl_NomSite

/*A Nom de l'operateur
*/
var	vl_NomOperateur

/*A Mode de retour du plan d'action
*/
var	vl_mode_PA


/*A Liste des IMU et leurs infos associees Table sur indice numero IMU
*/

var	FORMAT Config_IMU vl_info_liste_IMU


/*A Liste de nom des IMU disponibles
*/
var	vl_liste_nom_IMU_dispo


/*A Structure infos IMU plan d'action
*/
var	FORMAT PA_IMU vl_IMU
var	FORMAT PA_IMU vl_IMU_terrain
var tl_data2
VAR vl_select

VAR     FORMAT SQL_Procedure_Params@ vl_parametres
VAR     FORMAT SQL_Procedure_Result@ vl_resultats
VAR 	vl_data

/*A MAJ des variables statiques */

vl_district 	= SYSTEM_VAR@(vg_site)
vl_NomSite 	= SYSTEM_VAR@(vg_nom_site)
vl_mode_formation = (SYSTEM_VAR@ (vg_formation) <> NULL)
vl_poste 	= SYSTEM_VAR@(vg_numero_operateur)
vl_abt_panneau	= FALSE
vl_NomOperateur = SYSTEM_VAR@(vg_operateur)
vl_Nummachine 	= SYSTEM_VAR@(vg_numero_poste)
vl_NomOperateur = SUBSTRING@(vl_NomOperateur, 1, 25)
vl_mode_PA 	= COM_QUITTE
vl_appel	= SUBSTRING@(va_appelant,1,8)
vl_basedd 	= "CFG"


/*B trace du debut du traitement */
vl_text = "------------------------------------------------------------------------"
COM01_Trace(0,vl_text)
vl_text = " Start ITMA_TIMU_pilotage_IMU   User : " ++ vl_NomOperateur
COM01_Trace(0,vl_text)

vl_text = "va_appelant : " ++ va_appelant
COM01_Trace(0,vl_text)

if NOT(IS_ARRAY@(va_1))
{	vl_text = "va_1 : " ++ va_1
	COM01_Trace(0,vl_text)}
else 
{	vl_text = "va_1  est un tableau"
	COM01_Trace(0,vl_text)
}

if NOT(IS_ARRAY@(va_2))
{	vl_text = "va_2 : " ++ va_2
	COM01_Trace(0,vl_text)
}

if NOT(IS_ARRAY@(va_3))
{	vl_text = "va_3 : " ++ va_3
	COM01_Trace(0,vl_text)
}

if NOT(IS_ARRAY@(va_4))
{	vl_text = "va_4 : " ++ va_4
	COM01_Trace(0,vl_text)
}

if NOT(IS_ARRAY@(va_5))
{	vl_text = "va_5 : " ++ va_5
	COM01_Trace(0,vl_text)
}


/* Informer l'operateur, tracer l'erreur et abandonner
* ------------------------------------------------------*/
ON ERROR
{
    ERROR_BOX@ (ERROR_NUMBER@(), ERROR_STRING@())
    COM01_Trace(COM_WARNING, COM03_Message_Erreur (C_MODULE))
    RETURN(COM_NOK)
}

/*A Pour initialiser les procedures communes */
/*  ---------------------------------------- */

vl_liste_nom_IMU_dispo = ITMA_TIMU_Liste_Eqt_Disponibles(vl_district, vl_info_liste_IMU)


/*A Si la liste des IMU dispo est vide */
 
if vl_liste_nom_IMU_dispo[0]=""
{
 	info_message@("Aucun IMU n'est disponible pour cette région !") 
	RETURN(COM_NOK)
}
/*A Finsi */

ITMA_TIMU_init_boite_dialogue_pilotage(vl_fenetre_TIMU,vl_messages_acceptes)

DB_CTRL_RETURN_ON_CHANGE@(vl_fenetre_TIMU, "BR_BICE", TRUE)
DB_CTRL_RETURN_ON_CHANGE@(vl_fenetre_TIMU, "BL_select_zones", TRUE)
DB_CTRL_RETURN_ON_CHANGE@(vl_fenetre_TIMU, "BL_select_msg", TRUE)
DB_CTRL_RETURN_ON_CHANGE@(vl_fenetre_TIMU, "BR_profil_diff", TRUE)
DB_CTRL_TYPING_RETURN@(vl_fenetre_TIMU, "BS_param1", TRUE)
DB_CTRL_TYPING_RETURN@(vl_fenetre_TIMU, "BS_param2", TRUE)

DB_CTRL_DISPLAY@(vl_fenetre_TIMU, "BP_terminer", true)

vl_IMU.Priorite	= 0
vl_IMU.DistanceEvt = XDC_DISTANCE_INCONNUE

vl_parametres[0].type = SYB#CHAR_
vl_parametres[0].data = vl_basedd
vl_parametres[0].output = FALSE

vl_parametres[1].type = SYB#CHAR_
vl_parametres[1].data = NULL
vl_parametres[1].output = FALSE

IF COM05_SQL_Procedure(XZAO491_Lire_IMU, vl_parametres, vl_resultats, C_MODULE) <> COM_OK
	{ RETURN (COM_NOK) }

vl_data = vl_resultats.select_results[0]
IF vl_district = XDC_CI
{
	FOR i = 0 TO ARRAY_SIZE@(vl_data) - 1
		IF ARRAY_SIZE@(vl_strings_BICE) = 0
		{ vl_strings_BICE[0] = vl_data[i][8] }
		ELSE
		{
			vl_size = ARRAY_SIZE@(vl_strings_BICE)
			vl_strings_BICE = ARRAY_INSERT@(vl_strings_BICE, vl_data[i][8], vl_size)
		}
	NEXT i
}
ELSE
{
	FOR i = 0 TO ARRAY_SIZE@ (vl_data) - 1
		IF vl_data[i][6] = vl_district
		{
			IF ARRAY_SIZE@(vl_strings_BICE) = 0
			{ vl_strings_BICE[0] = vl_data[i][8] }
			ELSE
			{
				vl_size = ARRAY_SIZE@(vl_strings_BICE)
				vl_strings_BICE = ARRAY_INSERT@(vl_strings_BICE, vl_data[i][8], vl_size)
			}
		}
	NEXT i
}

DB_CTRL_STRINGS@(vl_fenetre_TIMU, "BR_BICE", vl_strings_BICE)
DB_CTRL_VALUE@(vl_fenetre_TIMU, "BR_BICE", -1)


/*A si l'appelant est le menu textuel */

/*A Abonnement a l'etat des panneaux */ 

if vl_district = XDC_CI
{
	vl_erreur = ITMA_TIMU_Abt_Etat_IMU(XDC_DEBUT_ABONNEMENT_EQUEXT,
					COM51_NomSite(XDC_DP))
	vl_erreur = ITMA_TIMU_Abt_Etat_IMU(XDC_DEBUT_ABONNEMENT_EQUEXT,
					COM51_NomSite(XDC_VC))
}
ELSE
{
	vl_erreur = ITMA_TIMU_Abt_Etat_IMU(XDC_DEBUT_ABONNEMENT_EQUEXT,
					COM51_NomSite(vl_info_liste_IMU[vl_IMU.NumEqt].sitegestion))
}


if (vl_erreur <> COM_NOK)
	{ vl_abt_panneau = TRUE }

if (vl_appel = "ITMA_TMC") {
	vl_FicheAction = va_1

	ITMA_TIMU_Lecture_Action_IMU(
                   vl_FicheAction.numero_action,
                   vl_FicheAction.cle_action,
                   vl_FicheAction.numero_fiche,
                   vl_FicheAction.cle_fiche,
                   vl_FicheAction.libelle_fiche,
		   vl_fenetre_TIMU,
		   vl_IMU,
		   vl_info_liste_IMU)

}

else {
	DB_CTRL_DISPLAY@(vl_fenetre_TIMU, "LI_lancement", false)
	DB_CTRL_DISPLAY@(vl_fenetre_TIMU, "LI_succes", false)
	DB_CTRL_DISPLAY@(vl_fenetre_TIMU, "LI_fin", false)
	DB_CTRL_DISPLAY@(vl_fenetre_TIMU, "LI_echec", false)
}


vm_auto=0
if (vl_appel = "ITMA_TPA") {
  /* Lecture de l etat actuel de l equipement */
  ITMA_TIMU_Lecture_IMU(vl_IMU.NumEqt, vl_IMU)

  DB_CTRL_TITLE@(vl_fenetre_TIMU, "LI_fmc_actuel", vl_IMU.fmc_liee)
  DB_CTRL_STRINGS@(vl_fenetre_TIMU, "BL_zones_diff", vl_IMU.ZonesDiff)
  DB_CTRL_VALUE@(vl_fenetre_TIMU, "BL_zones_diff", -1)
  DB_CTRL_STRINGS@(vl_fenetre_TIMU, "BL_msg_diff", COMMA_SPLIT@(vl_IMU.Message))
  DB_CTRL_GRAYED@(vl_fenetre_TIMU,"BR_BICE",TRUE)

  vl_parametres[0].type   = SYB#INT4_
  vl_parametres[0].data   = va_1+0
  vl_parametres[0].output = FALSE

  vl_parametres[1].type   = SYB#INT2_
  vl_parametres[1].data   = va_2+0
  vl_parametres[1].output = FALSE

  IF COM05_SQL_Procedure(XZAP85_Lire_Prop_IMU,vl_parametres,vl_resultats,C_MODULE) <> COM_OK
   	{ RETURN (COM_NOK) }

  vl_select = vl_resultats.select_results[0,0]
  /* Recuperer le numero et la cle de la FMC */
  vl_IMU.NumEvt 	= va_3
  vl_IMU.CleEvt 	= va_4
  /* Recuperer informations dans la proposition */
  vl_IMU.NumEqt 	= vl_select[3]
  vl_IMU.Priorite 	= vl_select[4]
  vl_IMU.NomSite 	= vl_select[2]
  vl_IMU.Chaine 	= TRIM@(vl_select[8])
  vl_array_chaine 	= ARRAY_FROM_STRING@(vl_IMU.Chaine, "|")

  if (vl_IMU.Chaine <> "")
  {
  	vl_IMU.IdZonesDiff    = ARRAY_TO_STRING@(ARRAY_DELETE@(vl_array_chaine, 0),"|")
  	vl_IMU.Message        = vl_array_chaine[0]
  }
  else
  {
    	vl_IMU.IdZonesDiff    = ""
	vl_IMU.Message	= ""
  }

  vl_IMU.Intervalle	= vl_select[9]
  vl_IMU.Cycles		= vl_select[10]
  vl_IMU.Duree		= vl_select[12]
  vm_auto = va_5
  ITMA_COM_Lire_Evenement( vl_IMU.NumEvt, vl_IMU.CleEvt, vl_lib_fmc, "TIMU" )  
  vl_fmc = COM11_Libelle_FMC(vl_lib_fmc)
  DB_CTRL_TITLE@(vl_fenetre_TIMU, "LI_fmc_nouveau", SUBSTRING@(vl_fmc,1,46))
  vl_IMU.fmc_liee=vl_fmc
  /*ne laisser que le bouton liberer*/
  DB_CTRL_GRAYED@(vl_fenetre_TIMU,"BP_lier_FMC",TRUE)
  IF (vl_IMU.Chaine <> "")
  {
  	DB_CTRL_GRAYED@(vl_fenetre_TIMU,"BP_executer",FALSE)
  	DB_CTRL_GRAYED@(vl_fenetre_TIMU,"BP_terminer",TRUE)
  }
  ELSE
  {
  	DB_CTRL_GRAYED@(vl_fenetre_TIMU,"BP_executer",TRUE)
  	DB_CTRL_GRAYED@(vl_fenetre_TIMU,"BP_terminer",FALSE)
  }
  DB_CTRL_GRAYED@(vl_fenetre_TIMU,"BR_BICE",TRUE)

  /* Affichage du Bice retourne */
  vl_parametres[0].type = SYB#CHAR_
  vl_parametres[0].data = vl_basedd
  vl_parametres[0].output = FALSE

  vl_parametres[1].type = SYB#CHAR_
  vl_parametres[1].data = NULL
  vl_parametres[1].output = FALSE
  
  IF COM05_SQL_Procedure(XZAO491_Lire_IMU, vl_parametres, vl_resultats, C_MODULE) <> COM_OK
          { RETURN (COM_NOK) }

  vl_data = vl_resultats.select_results[0]
  FOR i = 0 TO ARRAY_SIZE@ (vl_data) - 1
  	IF vl_data[i][0] = vl_IMU.NumEqt
  		{ vl_nom_BICE = vl_data[i][8] }
  NEXT i

  FOR i = 0 TO ARRAY_SIZE@(vl_strings_BICE) - 1
  	IF (vl_strings_BICE[i]=vl_nom_BICE)
  	{
  		DB_CTRL_VALUE@(vl_fenetre_TIMU, "BR_BICE", i)
  	}

  NEXT I
  ITMA_TIMU_Lecture_Zones_IMU(vl_basedd, vl_IMU.NumEqt, vl_fenetre_TIMU, vl_IMU)
  vl_liste_zones = DB_CTRL_GET_STRINGS@(vl_fenetre_TIMU, "BL_select_zones")

  IF (vl_IMU.IdZonesDiff <> "" AND vl_IMU.Chaine <> "")
  {
  	vl_arrayDiff=ARRAY_FROM_STRING@("","|")
	vl_array=ARRAY_FROM_STRING@(vl_IMU.IdZonesDiff,"|")
	FOR i = 0 TO ARRAY_SIZE@(vl_array)
		FOR j = 0 TO ARRAY_SIZE@(vl_IMU.IdZones) - 1
			IF (vl_array[i]=vl_IMU.IdZones[j])
			{
				IF (ARRAY_SIZE@(vl_arrayDiff)=0)
					vl_arrayDiff[0]=j
				ELSE
					ARRAY_INSERT@(vl_arrayDiff, j, ARRAY_SIZE@(vl_arrayDiff));
			}
		NEXT j
	NEXT i

  	DB_CTRL_VALUE@(vl_fenetre_TIMU, "BL_select_zones", vl_arrayDiff)
  }

  ITMA_TIMU_Lecture_Msgs_IMU(vl_basedd, vl_IMU.NumEqt, vl_fenetre_TIMU)
  vl_liste_msg = DB_CTRL_GET_STRINGS@(vl_fenetre_TIMU, "BL_select_msg")
  IF (vl_IMU.Chaine<>"")
  {
  	FOR i = 0 TO ARRAY_SIZE@(vl_liste_msg)
  		if (vl_liste_msg[i]=vl_IMU.Message)
		{
			DB_CTRL_VALUE@(vl_fenetre_TIMU, "BL_select_msg", i)
		}
  	NEXT i
  }

}
IF (vm_auto=1)
{
	IF (TRIM@(vl_IMU.Chaine)="")
	{
		vl_cpt=ITMA_TIMU_Commande_Fin_IMU(vl_poste, 
					FALSE,
					vl_mode_formation,
					vl_IMU.NumEvt,
					vl_IMU.CleEvt,
					vl_IMU.NumEqt,
					vl_IMU,
					vl_NumAction,
					vl_info_liste_IMU[vl_IMU.NumEqt].sitegestion)
	}
	else
	{
		vl_NumAction = 0 	
		vl_cpt=ITMA_TIMU_Commande_IMU(vl_poste, 
					FALSE,
					vl_mode_formation,
					vl_IMU.NumEvt,
					vl_IMU.CleEvt,
					vl_IMU.NumEqt,
					vl_IMU,
					vl_NumAction,
					vl_info_liste_IMU[vl_IMU.NumEqt].sitegestion)
	}												

        vl_fenetre_active = FALSE

        vl_mode_PA = COM_VALIDE
}
ELSE
/*A Boucle de capture des evenements de la boite de dialogue  
*   -------------------------------------------------------- */
vl_fenetre_active = TRUE

/*A tant que la fenetre est active */
WHILE (vl_fenetre_active)

	/* affichage de la liste */
	DB_DISPLAY@(vl_fenetre_TIMU)

	/*A capture de l'evenement dans la BD TIMU */
	vl_controle_sortie = DB_EXIT_CTRL@(vl_fenetre_TIMU)
	
	/*A si l'evenement n'est pas un poke & verrou = vrai */
	if vl_controle_sortie<>"poke_" and SYSTEM_VAR@(vg_verrou)
		/*A reset de l'evenement */
		vl_controle_sortie = NULL
 


	/* selon l'evenement */
	CASE OF vl_controle_sortie

	/*A sur action quitter */

	CASE "BP_quitter"

		vl_fenetre_active = FALSE

	CASE "BR_BICE"
                vl_choix_BICE = DB_CTRL_GET_VALUE@(vl_fenetre_TIMU, "BR_BICE")
 		vl_nom_BICE = vl_strings_BICE[vl_choix_BICE]

		vl_parametres[0].type = SYB#CHAR_
		vl_parametres[0].data = vl_basedd
		vl_parametres[0].output = FALSE

		vl_parametres[1].type = SYB#CHAR_
		vl_parametres[1].data = NULL
		vl_parametres[1].output = FALSE

		IF COM05_SQL_Procedure(XZAO491_Lire_IMU, vl_parametres, vl_resultats, C_MODULE) <> COM_OK
			{ RETURN (COM_NOK) }
		
		vl_data = vl_resultats.select_results[0]
		
		FOR i = 0 TO ARRAY_SIZE@ (vl_data) - 1
			IF vl_data[i][8] = vl_nom_BICE
				{ vl_id_BICE = vl_data[i][0] }
		NEXT i

		ITMA_TIMU_Lecture_Zones_IMU(vl_basedd, vl_id_BICE, vl_fenetre_TIMU, vl_IMU)
		ITMA_TIMU_Lecture_Msgs_IMU(vl_basedd, vl_id_BICE, vl_fenetre_TIMU)

		vl_IMU.NumEqt = vl_id_BICE
		
		/* Lecture de l etat actuel de l equipement */
		ITMA_TIMU_Lecture_IMU(vl_IMU.NumEqt, vl_IMU)

		DB_CTRL_TITLE@(vl_fenetre_TIMU, "LI_fmc_actuel", vl_IMU.fmc_liee)
		DB_CTRL_STRINGS@(vl_fenetre_TIMU, "BL_zones_diff", vl_IMU.ZonesDiff)
		DB_CTRL_VALUE@(vl_fenetre_TIMU, "BL_zones_diff", -1)
		DB_CTRL_STRINGS@(vl_fenetre_TIMU, "BL_msg_diff", COMMA_SPLIT@(vl_IMU.Message))
		DB_CTRL_VALUE@(vl_fenetre_TIMU, "BL_msg_diff", -1)
		DB_CTRL_GRAYED@(vl_fenetre_TIMU,"BP_lier_FMC",FALSE)


	CASE "BR_profil_diff"
		vl_rang = DB_CTRL_GET_VALUE@(vl_fenetre_TIMU,"BR_profil_diff")

		IF vl_rang = 0
		{
			DB_CTRL_DISPLAY@(vl_fenetre_TIMU, "LI_param_diff", FALSE)
			DB_CTRL_DISPLAY@(vl_fenetre_TIMU, "BS_param1", FALSE)
			DB_CTRL_DISPLAY@(vl_fenetre_TIMU, "LI_param1", FALSE)
			DB_CTRL_DISPLAY@(vl_fenetre_TIMU, "BS_param2", FALSE)
			DB_CTRL_DISPLAY@(vl_fenetre_TIMU, "LI_param2", FALSE)
		}

		IF vl_rang = 1
		{
			DB_CTRL_DISPLAY@(vl_fenetre_TIMU, "LI_param_diff", TRUE)
			DB_CTRL_DISPLAY@(vl_fenetre_TIMU, "BS_param1", TRUE)
			DB_CTRL_TITLE@(vl_fenetre_TIMU, "LI_param1", "minutes")
			DB_CTRL_DISPLAY@(vl_fenetre_TIMU, "LI_param1", TRUE)
			DB_CTRL_DISPLAY@(vl_fenetre_TIMU, "BS_param2", FALSE)
			DB_CTRL_DISPLAY@(vl_fenetre_TIMU, "LI_param2", FALSE)
			vl_IMU.Intervalle = 0
		}

		IF vl_rang = 2
		{
			DB_CTRL_DISPLAY@(vl_fenetre_TIMU, "LI_param_diff", TRUE)
			DB_CTRL_DISPLAY@(vl_fenetre_TIMU, "BS_param1", TRUE)
			DB_CTRL_TITLE@(vl_fenetre_TIMU, "LI_param1", "répétitions")
			DB_CTRL_DISPLAY@(vl_fenetre_TIMU, "LI_param1", TRUE)
			DB_CTRL_DISPLAY@(vl_fenetre_TIMU, "BS_param2", TRUE)
			DB_CTRL_TITLE@(vl_fenetre_TIMU, "LI_param2", "secondes entre répétitions")
			DB_CTRL_DISPLAY@(vl_fenetre_TIMU, "LI_param2", TRUE)

		}



	/*A sur action lier FMC */
	CASE "BP_lier_FMC"
 		DB_CTRL_TITLE@(vl_fenetre_TIMU,"LI_status",
									"Status : appel lien FMC")


		/*B on lance la tache de recherche d'evt cause*/
		tl_data=PEND_FOR_NEW_TASK@("ITMA_COM_Liste_Causes",
									"ITMA_TIMU_pilotage_IMU")
		tl_liste_causes=tl_data[0]
		/*B affiche la liste des evts a traiter*/
		DB_CTRL_DISPLAY@(vl_fenetre_TIMU,"TA_Evenements",TRUE)
		DB_CTRL_RETURN_ON_CHANGE@(vl_fenetre_TIMU,"TA_Evenements",TRUE)
		DB_TABLE_SET_MARKER_WIDTH@(vl_fenetre_TIMU, "TA_Evenements", 25)
		DB_TABLE_ALLOW_COLUMN_RESIZING@(
							vl_fenetre_TIMU,"TA_Evenements",True)
		tl_titres[0] = COM_CAUSE_NUMERO,COM_CAUSE_LONG_NUMERO
		tl_titres[1] = COM_CAUSE_CLE,COM_CAUSE_LONG_CLE
		tl_titres[2] = COM_CAUSE_TYPE,COM_CAUSE_LONG_TYPE
		tl_titres[3] = COM_CAUSE_DATE,COM_CAUSE_LONG_DATE
		tl_titres[4] = COM_CAUSE_LOCALISATION,
								COM_CAUSE_LONG_LOCALISATION
		DB_TABLE_SET_DATA@(vl_fenetre_TIMU,"TA_Evenements",
										tl_data[1],tl_titres)
		DB_TABLE_MARKER_PIXMAPS@(vl_fenetre_TIMU, "TA_Evenements", 0, tl_data[2])


	/*B selection d'un element dans la liste des fiches a traiter*/	
  	CASE "TA_Evenements"
 		DB_CTRL_TITLE@(vl_fenetre_TIMU,"LI_status",
								"Status : selection evenement")

		tl_retour=ITMA_COM_Validite_Cause("ITMA_TIMU_pilotage_IMU",
								vl_fenetre_TIMU,tl_liste_causes)
		vl_IMU.NumEvt = tl_retour[0][0]
		vl_IMU.CleEvt = tl_retour[0][1]
		vl_fmc = tl_retour[1]
		DB_CTRL_DISPLAY@(vl_fenetre_TIMU,"TA_Evenements",FALSE)
		DB_CTRL_TITLE@(vl_fenetre_TIMU,"LI_fmc_nouveau",vl_fmc)
		vl_IMU.fmc_liee = vl_fmc


	CASE "BP_terminer"
		/*A Recherche du champ fin d'action */

		if  vl_IMU.NumEvt=0 and vl_IMU.CleEvt=0
		{
			info_message@(
				"Veuillez d'abord lier cette action a une F.M.C")
		}
		else
		{

			/* recuperation du n° d'action dans la base */			
			vl_NumAction = 0 	


			vl_cpt=ITMA_TIMU_Commande_Fin_IMU(vl_poste, 
						FALSE,
						vl_mode_formation,vl_IMU.NumEvt,
						vl_IMU.CleEvt,vl_IMU.NumEqt,
						vl_IMU,vl_NumAction,
						vl_info_liste_IMU[vl_IMU.NumEqt].sitegestion)
			
		

			if vl_cpt = COM_OK
			{
		    		DB_CTRL_TITLE@(vl_fenetre_TIMU,"LI_status",
								"Status : Commande liberation envoyee")
	
				/*A Griser le bouton Executer et Liberer */
				DB_CTRL_GRAYED@(vl_fenetre_TIMU,"BP_executer",TRUE)
				DB_CTRL_GRAYED@(vl_fenetre_TIMU,"BP_terminer",TRUE)
				DB_CTRL_GRAYED@(vl_fenetre_TIMU,"BP_lier_FMC",TRUE)
				DB_CTRL_TITLE@(vl_fenetre_TIMU,"LI_fmc_actuel",vl_fmc)
				DB_CTRL_TITLE@(vl_fenetre_TIMU,"LI_fmc_nouveau","")

				/* Mise a jour de l affichage de l etat courant */
				DB_CTRL_STRINGS@(vl_fenetre_TIMU, "BL_zones_diff", COMMA_SPLIT@(""))
				DB_CTRL_STRINGS@(vl_fenetre_TIMU, "BL_msg_diff", COMMA_SPLIT@(""))

				/* Mise a jour des donnees enregistrees */
				vl_IMU.ZonesDiff = null
				vl_IMU.IdZonesDiff = null

				if vl_appel="ITMA_TPA"				
				{
					vl_mode_PA=COM_VALIDE
					vl_fenetre_active = FALSE

		    			DB_CTRL_TITLE@(vl_fenetre_TIMU,"LI_status",
								"Status : Validation du PA")	
				}
				else
				{
					vl_mode_PA=COM_QUITTE
					if vl_erreur <> COM_NOK
					{
						DB_CTRL_TITLE@(vl_fenetre_TIMU,"LI_status",
								"Status : Pilotage IMU !!!")
					}
					else
					{
						DB_CTRL_TITLE@(vl_fenetre_TIMU,"LI_status",
							"Status : Problème Pilotage IMU !!!")
					}
				}
			}
			else
			{	
				DB_CTRL_TITLE@(vl_fenetre_TIMU,"LI_status",
					"Status : Commande refusee (manque lien FMC)") 
			}
		 }
	   	 vl_IMU.NumEvt = 0
		 vl_IMU.CleEvt = 0


	/*A sur action executer */
	CASE "BP_executer"

		/*A Recherche du champ fin d'action */
		
		vl_rang = DB_CTRL_GET_VALUE@(vl_fenetre_TIMU, "BR_profil_diff")


		if  vl_IMU.NumEvt=0 and vl_IMU.CleEvt=0
		{
			info_message@(
				"Veuillez d'abord lier cette action a une F.M.C")
		}
		else if (vl_rang = 1 AND len@(DB_CTRL_GET_VALUE@(vl_fenetre_TIMU, "BS_param1")) = 0)
			OR
			(vl_rang = 2 AND (len@(DB_CTRL_GET_VALUE@(vl_fenetre_TIMU, "BS_param1")) = 0 OR len@(DB_CTRL_GET_VALUE@(vl_fenetre_TIMU, "BS_param2")) = 0))
		{
			info_message@("Veuillez d'abord remplir les paramètres de diffusion")	
		}
		else
		{
	
			vl_rang_zones = DB_CTRL_GET_VALUE@(vl_fenetre_TIMU, "BL_select_zones")
			vl_rang_msg = DB_CTRL_GET_VALUE@(vl_fenetre_TIMU, "BL_select_msg")
			
			/* Si un message et une ou plusieurs zones ont ete selectionnes */
			if ARRAY_SIZE@(vl_rang_zones) > 0 AND vl_rang_msg > -1
			{
				
				/* Enregistrer les parametres de diffusion */

				vl_rang = DB_CTRL_GET_VALUE@(vl_fenetre_TIMU, "BR_profil_diff")

				IF vl_rang = 0
				{
					vl_IMU.Intervalle = 0
					vl_IMU.Cycles = 0
					vl_IMU.Duree = 0

				}
				
				ELSE IF vl_rang = 1
				{
					IF DB_CTRL_GET_VALUE@(vl_fenetre_TIMU, "BS_param1") <> 0
					{
						vl_IMU.Intervalle = 0
						vl_IMU.Cycles = 0
						vl_IMU.Duree = DB_CTRL_GET_VALUE@(vl_fenetre_TIMU, "BS_param1")
					}

					ELSE
					{ info_message@("Veuillez entrer une durée valide") }	
				}

				ELSE IF vl_rang = 2
				{
					vl_IMU.Intervalle = DB_CTRL_GET_VALUE@(vl_fenetre_TIMU, "BS_param2")
					vl_IMU.Cycles = DB_CTRL_GET_VALUE@(vl_fenetre_TIMU, "BS_param1")
					vl_IMU.Duree = 0
				}

				
				/* Creer la chaine de caracteres qui contient la commande a envoyer */

				vl_liste_msg = DB_CTRL_GET_STRINGS@(vl_fenetre_TIMU, "BL_select_msg")
				vl_nom_msg = vl_liste_msg[vl_rang_msg]

				vl_IMU.Chaine = vl_nom_msg
				
				FOR i = 0 TO ARRAY_SIZE@(vl_rang_zones) - 1
					vl_IMU.Chaine = vl_IMU.Chaine ++ "|" ++ vl_IMU.IdZones[vl_rang_zones[i]]
				NEXT i


				/* recuperation du n° d'action dans la base */			
				vl_NumAction = 0 	
				vl_cpt=ITMA_TIMU_Commande_IMU(vl_poste, 
								FALSE,
								vl_mode_formation,
								vl_IMU.NumEvt,
								vl_IMU.CleEvt,
								vl_IMU.NumEqt,
								vl_IMU,
								vl_NumAction,
								vl_info_liste_IMU[vl_IMU.NumEqt].sitegestion)
			
		

				if vl_cpt = COM_OK
				{
			    		DB_CTRL_TITLE@(vl_fenetre_TIMU,"LI_status",
								"Status : Commande envoyee")

					/*A Griser le bouton Executer */
					DB_CTRL_GRAYED@(vl_fenetre_TIMU,"BP_executer",FALSE)
					DB_CTRL_GRAYED@(vl_fenetre_TIMU,"BP_lier_FMC",TRUE)

					/* Mise a jour affichage FMC */
					DB_CTRL_TITLE@(vl_fenetre_TIMU,"LI_fmc_actuel",vl_fmc)
					DB_CTRL_TITLE@(vl_fenetre_TIMU,"LI_fmc_nouveau","")

					/* Deselection des zones et message */
					vl_array[0] = -1
					DB_CTRL_VALUE@(vl_fenetre_TIMU, "BL_select_zones", vl_array)
					DB_CTRL_VALUE@(vl_fenetre_TIMU, "BL_select_msg", -1)


					if vl_appel="ITMA_TPA"				
					{
						vl_mode_PA=COM_VALIDE
			    			DB_CTRL_TITLE@(vl_fenetre_TIMU,"LI_status",
									"Status : Validation du PA")	
					}
					else
					{
						vl_mode_PA=COM_QUITTE
						if vl_erreur <> COM_NOK
						{
							DB_CTRL_TITLE@(vl_fenetre_TIMU,"LI_status",
									"Status : Pilotage IMU !!!")
						}
						else
						{
							DB_CTRL_TITLE@(vl_fenetre_TIMU,"LI_status",
								"Status : Problème Pilotage IMU !!!")
						}
					}

				}
				else
				{	
					DB_CTRL_TITLE@(vl_fenetre_TIMU,"LI_status",
						"Status : Commande refusee (manque lien FMC)") 
				}
			}
			else
			{
				DB_CTRL_TITLE@(vl_fenetre_TIMU,"LI_fmc_nouveau","")

				info_message@(
				"Veuillez d'abord selectionner des zones et un message")
			}
		}

	   	 vl_IMU.NumEvt = 0
		 vl_IMU.CleEvt = 0


	/*A sur reception de poke */		
	CASE "poke_"
	
		/*A suivant le canal de reception de poke */
		CASE OF DB_GET_POKE@(vl_fenetre_TIMU)

		/*A si poke de fin de canal : fermeture de fenetre */
		CASE COM_CANAL_FIN
			/*A la fenetre n'est plus active */
			vl_fenetre_active = FALSE

		/*A si poke etat equipement : on decode la chaine pour mettre a jour la partie superieure de la fenetre/etat terrain */
		CASE COM_CANAL_MTIMU

			/*A capture du message */
			vl_message = DB_GET_POKE_DATA@(vl_fenetre_TIMU)

			/*A trace de la reception du message */
			vl_text = "   MsgPoke MTIMU : " ++ vl_message[0]
			COM01_Trace(0,vl_text)
			COM01_Trace(0," ")

			/* vl_message[0]= "2,incendie_am|2,0,0" par exemple */

			/*A decomposition des messages en tableau */
			vl_mess = ARRAY_FROM_STRING@(vl_message[0],",")

			/* Mise a jour affichage zones et message en cours de diffusion*/
			vl_array_chaine = ARRAY_FROM_STRING@(vl_mess[1], "|")
			/* "message|idZone1|idZone2|idZone3....."                */
			/* on recupere le nom du message dans le premier element */
			vl_IMU.Message = vl_array_chaine[0]
			/* on recupere les Id de zones de diffusion              */
			IF IS_ARRAY@(vl_array_chaine)
			{
				vl_IMU.IdZonesDiff = ARRAY_DELETE@(vl_array_chaine, 0)
			}
			ELSE
			{
				vl_IMU.idZonesDiff = {}

			}
			FOR i=0 TO ARRAY_SIZE@(vl_IMU.ZonesDiff) - 1
				vl_IMU.ZonesDiff[i] = ""
			NEXT i
	

			FOR i=0 TO ARRAY_SIZE@(vl_IMU.IdZonesDiff) - 1
				vl_index = ARRAY_INDEX@(vl_IMU.IdZones, STRING_TO_VALUE@(vl_IMU.IdZonesDiff[i]))
				/* On recupere les noms de zones de diffusion        */
				vl_IMU.ZonesDiff[i] = vl_IMU.Zones[vl_index]
			NEXT i

			IF NOT IS_ARRAY@(vl_IMU.ZonesDiff)
				vl_IMU.ZonesDiff = ARRAY_FROM_STRING@(" ","|")

			/* On met a jour les listes de valeurs dans les controles graphiques */
			DB_CTRL_STRINGS@(vl_fenetre_TIMU, "BL_zones_diff", vl_IMU.ZonesDiff)
			vl_array_chaine = ARRAY_FROM_STRING@(vl_IMU.message, "|")
			DB_CTRL_STRINGS@(vl_fenetre_TIMU, "BL_msg_diff", vl_array_chaine)

			
			ENDCASE

	ENDCASE

/*A fin tant que */
WEND

if vl_district = XDC_CI
{
	vl_erreur = ITMA_TIMU_Abt_Etat_IMU(XDC_FERMER_ABONNEMENT_EQUEXT,
					COM51_NomSite(XDC_DP))
	vl_erreur = ITMA_TIMU_Abt_Etat_IMU(XDC_FERMER_ABONNEMENT_EQUEXT,
					COM51_NomSite(XDC_VC))
}
ELSE
{
	vl_erreur = ITMA_TIMU_Abt_Etat_IMU(XDC_FERMER_ABONNEMENT_EQUEXT,
					COM51_NomSite(vl_info_liste_IMU[vl_IMU.NumEqt].sitegestion))
}



/*B trace de la fin de traitement */
vl_text = " Stop ITMA_TIMU_pilotage_IMU   User : " ++ vl_NomOperateur
COM01_Trace(0,vl_text)

RETURN(vl_mode_PA)

ENDMACRO


/*X*/
/* ---------------------------------------------------------------------
* SERVICE RENDU :	Initialisation generale de la boite de dialogue
*												Pilotage
*
*  ---------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TIMU_init_boite_dialogue_pilotage(va_fenetre_TIMU, va_messages_acceptes)

/*----------------------------------------------------------------------
* ARGUMENTS EN ENTREE :
*
*  	va_fenetre_TIMU		:	Item de la boite de dialogue Pilotage
*	va_messages_acceptes	:	Liste des messages acceptes par la boite de dialogue
*
*
* ARGUMENTS EN SORTIE :
*
*  	va_fenetre_TIMU		:	Item de la boite de dialogue Pilotage
*
* CODE RETOUR         :
*
* CONDITION D'UTILISATION
*
*
* FONCTION
*    Initialisation generale de la boite de dialogue Pilotage
*
--------------------------------------------------------------------- */


/*A Ouverture de la fiche de pilotage IMU */

va_fenetre_TIMU = DB_LOAD@("ITMA_TIMU_pilotage_IMU")

va_messages_acceptes[0] = COM_CANAL_FIN
va_messages_acceptes[1] = COM_CANAL_MTIMU
DB_ACCEPT_POKES@ (va_fenetre_TIMU, va_messages_acceptes)

DB_CTRL_GRAYED@(va_fenetre_TIMU,"BP_lier_FMC",False)

/*A Positionnement de la fenetre & assignation de la fiche d'aide  
*   ------------------------------------------------------------- */
DB_XPOS@(va_fenetre_TIMU,0)
 if (GET_ENV_VAR@("RTARCH")="hp700_hpux")
DB_YPOS@(va_fenetre_TIMU, 1000)
ELSE
DB_YPOS@(va_fenetre_TIMU, 104)
DB_HEIGHT@(va_fenetre_TIMU, 520)

/*A Griser le bouton 'Executer' */
DB_CTRL_GRAYED@(va_fenetre_TIMU,"BP_executer",FALSE)

DB_DISPLAY_ONLY@(va_fenetre_TIMU,TRUE)
DB_DISPLAY@(va_fenetre_TIMU)
DB_DISPLAY_ONLY@(va_fenetre_TIMU,FALSE)

ENDMACRO


/*X*/
/* ---------------------------------------------------------------------
* SERVICE RENDU :	Commander le sequence d'une voie vers SYBASE
*
* --------------------------------------------------------------------*/

MACRO ITMA_TIMU_Commande_IMU(va_PosteOperateur,
				va_Manuelle,
				va_mode_formation,
				va_NumEvt,
				va_CleEvt,
				va_NumIMU,
				FORMAT PA_IMU va_IMU,
				va_NumAction,
				va_NomSite)

/*----------------------------------------------------------------------
* ARGUMENTS EN ENTREE :
* 
*	va_PosteOperateur		:	le nom du poste operateur
*	va_Manuelle			:	le type manuel ou auto
*	va_mode_formation		:	Indicateur du mode formation
*	va_NumEvt			:	Numero de l'evenement
*	va_CleEvt			:	Cle de l'evenement
*	va_NumIMU			:	Numero de l IMU en cours
*	va_IMU				: 	La structure action IMU
*	va_NumAction			:	Numero d'action
*	va_NomSite			:	Nom du site
*
* ARGUMENTS EN SORTIE : aucun
*
* CODE RETOUR		: COM_OK en cas d'execution correcte, COM_NOK sinon.
*
* CONDITION D'UTILISATION
*   		ITMA_TIMU_pilotage_IMU
*
* FONCTION
*   		Commander le sequence d'une voie vers SYBASE.
*
--------------------------------------------------------------------- */

	VAR FORMAT SQL_Procedure_Params@ vl_parametres
	VAR FORMAT SQL_Procedure_Result@ vl_resultats

	var	vl_Heure			' heure courante base
	var	vl_text

	vl_Heure = COM09_Date_Courante()

	if NOT va_mode_formation
	{
		/*A trace de l'appel de la procedure */
		vl_text = " ---> Appel de la procedure 'XZAC903_Commande_IMU("
						++va_PosteOperateur++","++va_Manuelle++")'"
		COM01_Trace(0,vl_text)

		/*A parametrage de vl_parametres */
		vl_parametres[0].type = SYB#DATETIME_
		vl_parametres[0].data = vl_heure		        ' Heure de lancement
		vl_parametres[0].output = FALSE

		vl_parametres[1].type = SYB#INT4_
		vl_parametres[1].data = va_NumEvt			' NumEvt
		vl_parametres[1].output = FALSE
	
		vl_parametres[2].type = SYB#INT1_
		vl_parametres[2].data = va_CleEvt			' CleEvt
		vl_parametres[2].output = FALSE
	
		vl_parametres[3].type = SYB#INT4_
		vl_parametres[3].data = va_PosteOperateur	        ' Poste Operateur
		vl_parametres[3].output = FALSE

		vl_parametres[4].type = SYB#INT4_
		vl_parametres[4].data = va_NumIMU			' NumEqt
		vl_parametres[4].output = FALSE

		vl_parametres[5].type = SYB#INT1_
		vl_parametres[5].data = va_NomSite			' Nom du site
		vl_parametres[5].output = FALSE

		vl_parametres[6].type = SYB#CHAR_
                vl_parametres[6].data = va_IMU.Chaine                   ' Chaine de caracteres pour la commande
                vl_parametres[6].output = FALSE

		vl_parametres[7].type = SYB#INT4_
		vl_parametres[7].data = va_IMU.Intervalle               ' Intervalle
		vl_parametres[7].output = FALSE

		vl_parametres[8].type = SYB#INT4_
		vl_parametres[8].data = va_IMU.Cycles                   ' Cycles
		vl_parametres[8].output = FALSE
		
		vl_parametres[9].type = SYB#INT4_
		vl_parametres[9].data = va_IMU.Duree                  	' Duree
		vl_parametres[9].output = FALSE

		vl_parametres[10].type = SYB#INT1_
		vl_parametres[10].data = va_IMU.Priorite		' Priorite
		vl_parametres[10].output = FALSE

		vl_parametres[11].type = SYB#INT4_
		vl_parametres[11].data = SYSTEM_VAR@(vg_site)  		'site local
		vl_parametres[11].output = FALSE

		vl_parametres[12].type = SYB#INT4_
		vl_parametres[12].data = NULL				' distance
		vl_parametres[12].output = false

		vl_parametres[13].type = SYB#INT4_
		vl_parametres[13].data = NULL				' NumAction
		vl_parametres[13].output = True
		IF COM05_SQL_Procedure (XZAC903_Commande_IMU,
					vl_parametres,vl_resultats,C_MODULE) <> COM_OK
		{
			RETURN (COM_NOK)
		}
		va_NumAction = vl_resultats.return_parameters[0]
		COM01_Trace(0," ")
	}

	/*A retour du N° d'action */
	RETURN (COM_OK)

ENDMACRO

/*X*/
/* ---------------------------------------------------------------------
* SERVICE RENDU :	Retour a l'etat normal de la IMU
*
* --------------------------------------------------------------------*/

MACRO ITMA_TIMU_Commande_fin_IMU(va_PosteOperateur,
				va_Manuelle,
				va_mode_formation,
				va_NumEvt,
				va_CleEvt,
				va_NumIMU,
				FORMAT PA_IMU va_IMU,
				va_NumAction,
				va_NomSite)

/*----------------------------------------------------------------------
* ARGUMENTS EN ENTREE :
*
*       va_PosteOperateur               :       le nom du poste operateur
*       va_Manuelle                     :       le type manuel ou auto
*       va_mode_formation               :       Indicateur du mode formation
*       va_NumEvt                       :       Numero de l'evenement
*       va_CleEvt                       :       Cle de l'evenement
*       va_NumIMU                       :       Numero de l IMU en cours
*       va_IMU                          :       La structure action IMU
*       va_NumAction                    :       Numero d'action
*       va_NomSite                      :       Nom du site
*
* ARGUMENTS EN SORTIE : aucun
*
* CODE RETOUR		: COM_OK en cas d'execution correcte, COM_NOK sinon.
*
* CONDITION D'UTILISATION
*   		ITMA_TIMU_pilotage_IMU
*
* FONCTION
*   		Retour a l'etat normal de la IMU.
*
--------------------------------------------------------------------- */

	VAR FORMAT SQL_Procedure_Params@ vl_parametres
	VAR FORMAT SQL_Procedure_Result@ vl_resultats

	var	vl_Heure			' heure courante
	var	vl_text

	
	if NOT(COM04_Operateur_A_Le_Droit_De( XDC_FAM_EXPLOITATION_DISTRICT)) and 
		NOT(COM04_Operateur_A_Le_Droit_De(XDC_FAM_PC_SIMPLIFIE)) and
		NOT(COM04_Operateur_A_Le_Droit_De(XDC_FAM_EXPLOITATION_PC2)) and
		NOT(COM04_Operateur_A_Le_Droit_De(XDC_FAM_EXPLOITATION_CI))
	{
		/*ITMA_TIMU_Acces_interdit("ITMA_TIMU_Commande_fin_IMU",
											va_PosteOperateur)*/
		RETURN(COM_NOK)
	}

	if NOT va_mode_formation
	{
		vl_Heure = COM09_Date_Courante()

		/*A trace de l'appel de la procedure */
		vl_text =
		" ---> Appel de la procedure'XZAC904_Commande_Fin_IMU("
						++va_NumIMU++","++va_NomSite++","
							++vl_Heure++","++va_Manuelle++")'"
		COM01_Trace(0,vl_text)

		/*A parametrage de vl_parametres */
		vl_parametres[0].type = SYB#DATETIME_
		vl_parametres[0].data = vl_heure			' Heure de lancement
		vl_parametres[0].output = FALSE

		vl_parametres[1].type = SYB#INT4_
		vl_parametres[1].data = va_NumEvt			' NumEvt
		vl_parametres[1].output = FALSE
	
		vl_parametres[2].type = SYB#INT1_
		vl_parametres[2].data = va_CleEvt			' CleEvt
		vl_parametres[2].output = FALSE
	
		vl_parametres[3].type = SYB#INT4_
		vl_parametres[3].data = va_PosteOperateur		' Poste Operateur
		vl_parametres[3].output = FALSE

		vl_parametres[4].type = SYB#INT4_
		vl_parametres[4].data = va_NumIMU			' NumEqt
		vl_parametres[4].output = FALSE

		vl_parametres[5].type = SYB#INT1_
		vl_parametres[5].data = va_NomSite			' Nom du site
		vl_parametres[5].output = FALSE

		vl_parametres[6].type = SYB#CHAR_
                vl_parametres[6].data = va_IMU.Chaine                   ' ChaineIMU
                vl_parametres[6].output = FALSE

		vl_parametres[7].type = SYB#INT4_
		vl_parametres[7].data = va_IMU.Intervalle               ' Intervalle
		vl_parametres[7].output = FALSE

		vl_parametres[8].type = SYB#INT4_
		vl_parametres[8].data = va_IMU.Cycles                   ' Cycles
		vl_parametres[8].output = FALSE
		
		vl_parametres[9].type = SYB#INT4_
		vl_parametres[9].data = va_IMU.Duree                   ' Duree
		vl_parametres[9].output = FALSE

		vl_parametres[10].type = SYB#INT1_
		vl_parametres[10].data = va_IMU.Priorite			' Priorite
		vl_parametres[10].output = FALSE

		vl_parametres[11].type = SYB#INT4_
		vl_parametres[11].data = SYSTEM_VAR@(vg_site)  		' site local
		vl_parametres[11].output = FALSE

		vl_parametres[12].type = SYB#INT4_
		vl_parametres[12].data = NULL				' NumAction
		vl_parametres[12].output = True


		IF COM05_SQL_Procedure(XZAC904_Commande_Fin_IMU,
					vl_parametres,vl_resultats,C_MODULE) <> COM_OK
		{
			RETURN (COM_NOK)
		}
		va_NumAction = vl_resultats.return_parameters[0]
	}

	/*A retour OK */
	RETURN (COM_OK)

ENDMACRO



/*X*/
/* ---------------------------------------------------------------------
* SERVICE RENDU :	Lecture des equipements disponibles
*
*  ---------------------------------------------------------------------
*/

MACRO ITMA_TIMU_Liste_Eqt_Disponibles( va_District, 
						FORMAT Config_IMU va_Config_IMU )

/*
* ARGUMENTS EN ENTREE :
* 
*		va_District    : le numero du district
*		va_Config_IMU
*
* ARGUMENTS EN SORTIE :
* 
*		ListeEqts   : la liste des equipements correspondants
*
*
* CODE RETOUR		: COM_OK en cas d'execution correcte, COM_NOK sinon.
*
*
* CONDITION D'UTILISATION
*   ITMA_TIMU
*
*
* FONCTION
*   	Lecture des equipements en disponibilites.
*
--------------------------------------------------------------------- */

var	FORMAT COM_Donnees_Equipements vl_info_equip
var	FORMAT COM_Donnees_Equipements vl_info_equip_suite
VAR     FORMAT COM_Localisation vl_localisation
VAR     FORMAT TDO_District vl_les_districts
var	vl_Liste		' liste formattee
var	i, k			' index de loop
var	vl_district
var	vl_nb_eqt
var	vl_index_site

	if va_District = XDC_CI

	{	vl_district=NULL }
	else
	{	vl_district=va_District }

	ITMA_COM_Lire_Equipements(	XDC_EQT_IMU, 
								vl_district,
								XDC_EQT_MINEUR, 	' Conditions niees
								XDC_EQT_MINEUR,		' Conditions
				 				XDC_EQT_HS + XDC_EQT_MAJEUR + XDC_EQT_CRITIQUE + XDC_EQT_DESACTIVE + XDC_EQT_INHIBE,	' Exclusions	
								0,
								vl_info_equip,
					     		C_MODULE )
	
vl_les_districts = SYSTEM_VAR@ (vg_les_districts)

	/*A RAZ indicateurs de disponibilite de l'equipement */
	for i=0 to ARRAY_SIZE@(va_Config_IMU)
		va_Config_IMU[i].Disponible=FALSE
	next i

	k = 0

	/*A Construction de la liste des equipements */
	if  IS_ARRAY@(vl_info_equip)
	{  
		for i = 0 to ARRAY_SIZE@(vl_info_equip) - 1	
	   		if (vl_info_equip[i].sitegestion = va_District) OR
				((va_District = XDC_CI) )
			{
	
	vl_localisation.NumAuto         = vl_info_equip[i].autoroute

	vl_localisation.PR              = vl_info_equip[i].PR

	vl_localisation.sens_circulation = vl_info_equip[i].sens
	va_Config_IMU [vl_info_equip[i].numero].Identifiant =
						vl_info_equip[i].nom ++ COM10_Localisation(vl_localisation)

	va_Config_IMU [vl_info_equip[i].numero].Autoroute =
						vl_info_equip[i].autoroute

	va_Config_IMU [vl_info_equip[i].numero].sitegestion =
						vl_info_equip[i].sitegestion

	va_Config_IMU [vl_info_equip[i].numero].PR =
						vl_info_equip[i].PR

        va_Config_IMU [vl_info_equip[i].numero].Sens =
						vl_info_equip[i].Sens

	vl_Index_Site = ARRAY_INDEX@ (ARRAY_COLUMN@
			(vl_les_districts,TDO_NUMERO_DISTRICT),
			ITMA_COM_Site_PR(vl_localisation.NumAuto,
					vl_localisation.PR,C_MODULE))
	if vl_Index_Site >= 0
	{
		va_Config_IMU [vl_info_equip[i].numero].NumSite =
					vl_les_districts[vl_Index_Site].numero
		va_Config_IMU [vl_info_equip[i].numero].NomSite =
					vl_les_districts[vl_Index_Site].code

	}

				vl_Liste[k] = va_Config_IMU[vl_info_equip[i].numero].Identifiant

				va_Config_IMU[vl_info_equip[i].numero].Disponible=TRUE
				k= k + 1
			}

		next i
	}
	else
	{
		vl_Liste[0] = ""
		info_message@("Pas d'IMU diponible dans cette région ...")
	}
	
	RETURN(vl_Liste)

ENDMACRO






/*X*/
/* ---------------------------------------------------------------------
* SERVICE RENDU :	Permet de s'abonner a l'etat des IMU de la base.
*
* --------------------------------------------------------------------*/

MACRO ITMA_TIMU_Abt_Etat_IMU(va_Abonnement,va_NomSite)

/*----------------------------------------------------------------------
* ARGUMENTS EN ENTREE : 
*
*		va_Abonnement	:	Type d'abonnement (debut ou fin)
*		va_NomSite		:	Nom du site
*
* ARGUMENTS EN SORTIE : aucun
*
* CODE RETOUR	: COM_OK en cas d'execution correcte, COM_NOK sinon.
*
* CONDITION D'UTILISATION :
*   ITMA_TCA_pilotage_camera
*
* FONCTION :
*	Permet de s'abonner a l'etat des panneaux de la IMU.
* ------------------------------------------------------------------- */

	VAR vl_cmd
	VAR vl_text

	/*A trace de l'appel de procedure */
	vl_text = " --> XZEA084_Abt_Etat_IMU "
	COM01_Trace(0,vl_text)

	/*B preparation de la requete pour le coupleur */
	vl_cmd[0]=MTAR_MSG_EXEC

	/*B num de commande pour retour. Non utilise ici */
	vl_cmd[1]=1			

	/*B fonction a executer */
	vl_cmd[2]=MTAR_FCT_XZEA084

	/*B arguments */
	vl_cmd[3]= va_Abonnement ++ MTAR_CAR_SEPAR ++ va_NomSite

	/*B envoi de la commande a la tache ITMA_TAR01 */
	DB_SEND_POKE@(COM_CANAL_TAR01,vl_cmd)
	
	/*B trace de l'emmission */
	vl_text = " - DB_SEND_POKE@(COM_CANAL_TAR01," ++ vl_cmd[3] ++ ")"
	COM01_Trace(0,vl_text)
	COM01_Trace(0," ")

	/*B code retour OK */
	RETURN(COM_OK)

ENDMACRO




/*X*/
/* ---------------------------------------------------------------------
* SERVICE RENDU :	Lecture de l'etat d'une IMU a une horodate donnee
*
*  ---------------------------------------------------------------------
*/

MACRO ITMA_TIMU_Lecture_IMU(va_NumIMU,FORMAT PA_IMU va_IMU)

/*
* ARGUMENTS EN ENTREE 	:
*
*	va_NumIMU : N° d'eqt de la IMU ;
*	va_IMU : La structure action IMU
*
* ARGUMENTS EN SORTIE	: 
*
*	va_IMU : La structure action IMU
*
*
* CODE RETOUR		: COM_OK en cas d'execution correcte, COM_NOK sinon.
*
*
* CONDITION D'UTILISATION
*   ITMA_TIMU
*
*
* FONCTION
*	Lecture de l'etat d'une IMU a une horodate donnee
*
--------------------------------------------------------------------- */


	VAR FORMAT SQL_Procedure_Params@ vl_parametres
	VAR FORMAT SQL_Procedure_Result@ vl_resultats
	VAR	vl_lib_fmc						' libelle fmc
	var	vl_tptext							' zone de text tampon
	VAR	i,j								' index de boucle
	VAR	vl_array_chaine
	VAR	vl_index

	
	/*A trace de l'appel de procedure */
	vl_tptext = "--> XZAT066_Utilisation_IMU"
	COM01_Trace(0,vl_tptext)


	/*A si n° Eqt du IMU nul : sortir */
	if va_NumIMU=NULL or va_NumIMU=0
	{
		vl_tptext = "ITMA_TIMU_Lecture_IMU("++va_NumIMU++") refusee"
		COM01_Trace(0,vl_tptext)
		RETURN(COM_NOK)
	}

	va_IMU.NumEqt = va_NumIMU

	/*A Definition de vl_parametres */
	vl_parametres[0].type	= SYB#DATETIME_
	vl_parametres[0].data	= XDC_DATE_NULLE
	vl_parametres[0].output	= FALSE

	vl_parametres[1].type	= SYB#INT1_
	vl_parametres[1].data	= va_IMU.NumEqt+0
	vl_parametres[1].output	= FALSE

	vl_parametres[2].type	= SYB#INT2_
	vl_parametres[2].data	= 0			' Dispo IMU
	vl_parametres[2].output	= TRUE

	vl_parametres[3].type	= SYB#INT4_
	vl_parametres[3].data	= 0			' N° Evt
	vl_parametres[3].output	= TRUE

	vl_parametres[4].type	= SYB#INT2_
	vl_parametres[4].data	= 0			' Cle Evt
	vl_parametres[4].output	= TRUE

	vl_parametres[5].type	= SYB#INT2_
	vl_parametres[5].data	= 0			' Priorite
	vl_parametres[5].output	= TRUE

	vl_parametres[6].type	= SYB#INT4_
	vl_parametres[6].data	= 0			' Distance Evt
	vl_parametres[6].output	= TRUE

	vl_parametres[7].type	= SYB#INT4_
	vl_parametres[7].data	= 0			' N° Action
	vl_parametres[7].output	= TRUE

	vl_parametres[8].type	= SYB#INT1_
	vl_parametres[8].data	= 0			' N° Site Action
	vl_parametres[8].output	= TRUE

	vl_parametres[9].type	= SYB#CHAR_
	vl_parametres[9].data	= ""			' Chaine
	vl_parametres[9].output	= TRUE

	/*A Execution de la procedure XZAT066_Utilisation_IMU */
	
	IF COM05_SQL_Procedure(XZAT066_Utilisation_IMU,vl_parametres,
							vl_resultats,C_MODULE) <> COM_OK
	{
    			RETURN (COM_NOK)
	}
	
	/*A MAJ de la table IMU avec les arguments de sorties */
	va_IMU.Dispo	 		=	vl_resultats.return_parameters[0]
	va_IMU.NumEvt			=	vl_resultats.return_parameters[1]+0
	va_IMU.CleEvt			=	vl_resultats.return_parameters[2]+0
	va_IMU.Priorite			=	vl_resultats.return_parameters[3]
	va_IMU.DistanceEvt		=	vl_resultats.return_parameters[4]
	va_IMU.NumeroAction		=	vl_resultats.return_parameters[5]
	va_IMU.NomSite			=	vl_resultats.return_parameters[6]
	va_IMU.Chaine			=	vl_resultats.return_parameters[7]

	vl_array_chaine			=	ARRAY_FROM_STRING@(va_IMU.Chaine, "|")
	va_IMU.Message			= 	vl_array_chaine[0]
	va_IMU.IdZonesDiff		=	ARRAY_DELETE@(vl_array_chaine, 0)

	FOR i=0 TO ARRAY_SIZE@(va_IMU.ZonesDiff) - 1
		va_IMU.ZonesDiff[i] = ""
	NEXT i
	
	FOR i=0 TO ARRAY_SIZE@(va_IMU.IdZonesDiff) - 1
		vl_index = ARRAY_INDEX@(va_IMU.IdZones, STRING_TO_VALUE@(va_IMU.IdZonesDiff[i]))
		va_IMU.ZonesDiff[i] = va_IMU.Zones[vl_index]
	NEXT i

	IF NOT IS_ARRAY@(va_IMU.ZonesDiff)
		va_IMU.ZonesDiff = ARRAY_FROM_STRING@(" ","|")

	/* On met a jour les listes de valeurs dans les controles graphiques */
	DB_CTRL_STRINGS@(vl_fenetre_TIMU, "BL_zones_diff", va_IMU.ZonesDiff)
	vl_array_chaine = ARRAY_FROM_STRING@(va_IMU.message, "|")
	DB_CTRL_STRINGS@(vl_fenetre_TIMU, "BL_msg_diff", vl_array_chaine)

	if va_IMU.NumEvt<>0 and  va_IMU.CleEvt<>0
	{
		/*A MAJ du libelle fmc */
		ITMA_COM_Lire_Evenement(va_IMU.NumEvt,
						va_IMU.CleEvt,vl_lib_fmc,C_MODULE)
		va_IMU.fmc_liee = COM11_Libelle_FMC(vl_lib_fmc)
	}
	else
	{
		va_IMU.fmc_liee = "Pas de libelle FMC."
	}

	
RETURN (COM_OK)

ENDMACRO


/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :       Lecture d'une action IMU a partir du num de PA
*
*  ----------------------------------------------------------------------------
*/

MACRO ITMA_TIMU_Lecture_Action_IMU(va_NumAction,va_CleAction,va_evt,va_cle,va_libelle, va_fenetre, FORMAT PA_IMU va_IMU,
FORMAT Config_IMU va_info_liste_IMU)

/*
* ARGUMENTS EN ENTREE   :
*    va_NumAction               : Num d'action
*    va_CleAction       : Cle action (site)
*       va_evt          : le num de l'evenement
*       va_cle          : le num de la cle
*
*
* ARGUMENTS EN SORTIE   :
*      
*
*
* CODE RETOUR           : COM_OK en cas d'execution correcte, COM_NOK sinon.
*
*
* CONDITION D'UTILISATION
*   ITMA_TIMU_etat_IMU
*
*
---------------------------------------------------------------------------- */
        VAR     vl_lib_fmc              ' libelle fmc
        var     vl_tptext               ' zone de text tampon

        VAR FORMAT SQL_Procedure_Params@ vl_parametres
        VAR FORMAT SQL_Procedure_Result@ vl_resultats
	VAR	vl_array_chaine
	VAR	i
	VAR	vl_Index
	VAR 	vl_basedd
	VAR 	vl_data
	var	vl_liste_BICE
	VAR	vl_Nom_BICE

        /*A trace de l'appel de procedure */
        vl_tptext = COM09_Date_Courante()
        vl_tptext =  vl_tptext ++ "--> XZAC890_Lire_Commande_IMU"
        COM01_Trace(0,vl_tptext)


        /*A Definition de vl_parametres */
        vl_parametres[0].type   = SYB#INT4_
        vl_parametres[0].data   = va_NumAction		' numero de l action
        vl_parametres[0].output = FALSE

        vl_parametres[1].type   = SYB#INT1_
        vl_parametres[1].data   = va_CleAction		' nom du site
        vl_parametres[1].output = FALSE

        vl_parametres[2].type   = SYB#INT4_
        vl_parametres[2].data   = 0                     ' NumEqt
        vl_parametres[2].output = TRUE

        vl_parametres[3].type   = SYB#DATETIME_
        vl_parametres[3].data   = 0                     ' heure lancement
        vl_parametres[3].output = TRUE

        vl_parametres[4].type   = SYB#DATETIME_
        vl_parametres[4].data   = 0                     ' heure fin lancement
        vl_parametres[4].output = TRUE

        vl_parametres[5].type   = SYB#DATETIME_
        vl_parametres[5].data   = 0                     ' heure succes
        vl_parametres[5].output = TRUE

        vl_parametres[6].type   = SYB#DATETIME_
        vl_parametres[6].data   = 0                     ' heure echec
        vl_parametres[6].output = TRUE

        vl_parametres[7].type   = SYB#DATETIME_
        vl_parametres[7].data   = 0                     ' heure fin
        vl_parametres[7].output = TRUE

	vl_parametres[8].type   = SYB#CHAR_
	vl_parametres[8].data   = va_IMU.Chaine		' chaine commande
	vl_parametres[8].output = TRUE

	vl_parametres[9].type   = SYB#INT4_
	vl_parametres[9].data   = va_IMU.Intervalle     ' intervalle
	vl_parametres[9].output = TRUE

	vl_parametres[10].type   = SYB#INT4_
        vl_parametres[10].data   = va_IMU.Cycles         ' cycles
	vl_parametres[10].output = TRUE

	vl_parametres[11].type   = SYB#INT4_
        vl_parametres[11].data   = va_IMU.Duree          ' duree
	vl_parametres[11].output = TRUE

	/*A Execution de la procedure XZAC890_Lire_Commande_IMU */
        
	IF COM05_SQL_Procedure
                (XZAC890_Lire_Commande_IMU,vl_parametres,vl_resultats,C_MODULE) <> COM_OK
                RETURN (COM_NOK)

	vl_basedd="CFG"
	va_IMU.NumEqt = vl_resultats.return_parameters[0]+0
	va_IMU.NumEvt = va_evt
	va_IMU.CleEvt = va_cle
	va_IMU.Chaine = vl_resultats.return_parameters[6]
	va_IMU.Intervalle = vl_resultats.return_parameters[7]+0
	va_IMU.Cycles = vl_resultats.return_parameters[8]+0
	va_IMU.Duree = vl_resultats.return_parameters[9]+0

	ITMA_TIMU_Lecture_Zones_IMU(vl_basedd, va_IMU.NumEqt, vl_fenetre_TIMU, va_IMU)

	DB_CTRL_TITLE@(va_fenetre, "LI_lancement", "Lancement : " ++
			COM18_Date_SGBD_Formatee(vl_resultats.return_parameters[1]))
	DB_CTRL_TITLE@(va_fenetre, "LI_succes", "Succes : " ++
			COM18_Date_SGBD_Formatee(vl_resultats.return_parameters[3]))
	DB_CTRL_TITLE@(va_fenetre, "LI_echec", "Echec : " ++
			COM18_Date_SGBD_Formatee(vl_resultats.return_parameters[4]))
	DB_CTRL_TITLE@(va_fenetre, "LI_fin", "Fin : " ++
			COM18_Date_SGBD_Formatee(vl_resultats.return_parameters[5])	)
	DB_CTRL_TITLE@(va_fenetre, "LI_fmc_actuel", va_libelle)
	
	DB_CTRL_GRAYED@(va_fenetre, "BP_lier_FMC", true)
	DB_CTRL_GRAYED@(va_fenetre, "BP_executer", true)
	
	/*afficher BP_terminer que si succes et non echec ou fin*/
	IF (COM18_Date_SGBD_Formatee(vl_resultats.return_parameters[3])<>NULL AND
	    (COM18_Date_SGBD_Formatee(vl_resultats.return_parameters[4])=NULL OR
	    COM18_Date_SGBD_Formatee(vl_resultats.return_parameters[5])=NULL))
		DB_CTRL_GRAYED@(va_fenetre, "BP_terminer", true)
	ELSE
		DB_CTRL_GRAYED@(va_fenetre, "BP_terminer", false)

	vl_parametres[0].type = SYB#CHAR_
	vl_parametres[0].data = vl_basedd
	vl_parametres[0].output = FALSE

	vl_parametres[1].type = SYB#CHAR_
	vl_parametres[1].data = NULL
	vl_parametres[1].output = FALSE

	IF COM05_SQL_Procedure(XZAO491_Lire_IMU, vl_parametres, vl_resultats, C_MODULE) <> COM_OK
		{ RETURN (COM_NOK) }
		
	vl_data = vl_resultats.select_results[0]
		
	FOR i = 0 TO ARRAY_SIZE@ (vl_data) - 1
		IF vl_data[i][0] = va_IMU.NumEqt
			{ vl_Nom_BICE = vl_data[i][1] }
	NEXT i
	vl_liste_BICE = DB_CTRL_GET_STRINGS@(va_fenetre,"BR_BICE")
	FOR i = 0 TO ARRAY_SIZE@(vl_liste_BICE) - 1
		IF vl_liste_BICE[i] = vl_Nom_BICE
			{ DB_CTRL_VALUE@(va_fenetre,"BR_BICE",i) }
	NEXT i

	/* Mise a jour affichage zones et message en cours de diffusion*/
	/* "message|idZone1|idZone2|idZone3....."                */
	vl_array_chaine			=	ARRAY_FROM_STRING@(va_IMU.Chaine, "|")
	/* on recupere les Id de zones de diffusion              */
	IF IS_ARRAY@(vl_array_chaine)
	{
		va_IMU.Message=vl_array_chaine[0]
		va_IMU.IdZonesDiff = ARRAY_DELETE@(vl_array_chaine, 0)
	}
	ELSE
	{
		va_IMU.Message = ""
		va_IMU.idZonesDiff = {}
	}
	FOR i=0 TO ARRAY_SIZE@(va_IMU.ZonesDiff) - 1
		va_IMU.ZonesDiff[i] = ""
	NEXT i

	FOR i=0 TO ARRAY_SIZE@(va_IMU.IdZonesDiff) - 1
		vl_index = ARRAY_INDEX@(va_IMU.IdZones, STRING_TO_VALUE@(va_IMU.IdZonesDiff[i]))
		/* On recupere les noms de zones de diffusion        */
		va_IMU.ZonesDiff[i] = va_IMU.Zones[vl_index]
	NEXT i

	IF NOT IS_ARRAY@(va_IMU.ZonesDiff)
		va_IMU.ZonesDiff = ARRAY_FROM_STRING@(" ","|")

	/* On met a jour les listes de valeurs dans les controles graphiques */
	DB_CTRL_STRINGS@(va_fenetre, "BL_zones_diff", va_IMU.ZonesDiff)
	vl_array_chaine = ARRAY_FROM_STRING@(va_IMU.message, "|")
	DB_CTRL_STRINGS@(va_fenetre, "BL_msg_diff", vl_array_chaine)

	DB_CTRL_VALUE@(va_fenetre,"BL_zones_diff",-1)
	DB_CTRL_VALUE@(va_fenetre,"BL_msg_diff",-1)
	DB_CTRL_GRAYED@(va_fenetre, "BR_BICE", true)
	DB_CTRL_STRINGS@(va_fenetre, "BL_select_zones",{})
	DB_CTRL_STRINGS@(va_fenetre, "BL_select_msg",{})
	DB_CTRL_GRAYED@(va_fenetre, "BL_select_zones", true)
	DB_CTRL_GRAYED@(va_fenetre, "BL_select_msg", true)


RETURN (COM_OK)

ENDMACRO



/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :       Lecture en base des zones IMU a partir de l id du BICE
*			(et affichage des zones dans la fenetre)
*
*  ----------------------------------------------------------------------------
*/

MACRO ITMA_TIMU_Lecture_Zones_IMU(va_Basedd, va_IdBice, va_Fenetre, FORMAT PA_IMU va_IMU)

/*
* ARGUMENTS EN ENTREE   :
*	va_Basedd	: base de donnees
*	va_IdBice	: id du BICE selectionne
*	va_Fenetre	: fenetre de pilotage
*	va_IMU		: structure action IMU
*
* ARGUMENTS EN SORTIE   :
*
* CODE RETOUR           : COM_OK en cas d'execution correcte, COM_NOK sinon.
*
* CONDITION D'UTILISATION
*
---------------------------------------------------------------------------- */

VAR FORMAT SQL_Procedure_Params@ vl_parametres
VAR FORMAT SQL_Procedure_Result@ vl_resultats
VAR vl_data
VAR FORMAT T_zone tm_zones
VAR i

/*A Definition des parametres */

vl_parametres[0].type = SYB#CHAR_
vl_parametres[0].data = va_Basedd
vl_parametres[0].output = FALSE

vl_parametres[1].type = SYB#INT4_
vl_parametres[1].data = va_IdBice
vl_parametres[1].output = FALSE

IF COM05_SQL_Procedure (XZAO494_Lire_Zones_IMU,
	                vl_parametres, vl_resultats, C_MODULE) <> COM_OK
	RETURN (COM_NOK)

vl_data = vl_resultats.select_results[0]
tm_zones = null

FOR i = 0  TO ARRAY_SIZE@ (vl_data) - 1
	tm_zones[i].numero_eqt = vl_data[i][0]
	tm_zones[i].id = vl_data[i][1]
	tm_zones[i].libelle = vl_data[i][2]
NEXT i

va_IMU.IdZones = ARRAY_COLUMN@(tm_zones, 1)
va_IMU.Zones = ARRAY_COLUMN@(tm_zones, 2)

DB_CTRL_STRINGS@(va_Fenetre, "BL_select_zones", va_IMU.Zones)

RETURN (COM_OK)


ENDMACRO


/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :       Lecture en base des messages IMU a partir de l id du BICE
*                       (et affichage des messages dans la fenetre)
*
*  ----------------------------------------------------------------------------
*/

MACRO ITMA_TIMU_Lecture_Msgs_IMU(va_Basedd, va_IdBice, va_Fenetre)

/*
* ARGUMENTS EN ENTREE   :
*       va_Basedd       : base de donnees
*       va_IdBice       : id du BICE selectionne
*       va_Fenetre      : fenetre de pilotage
*
* ARGUMENTS EN SORTIE   :
*
* CODE RETOUR           : COM_OK en cas d'execution correcte, COM_NOK sinon.
*
* CONDITION D'UTILISATION
*
---------------------------------------------------------------------------- */

VAR FORMAT SQL_Procedure_Params@ vl_parametres
VAR FORMAT SQL_Procedure_Result@ vl_resultats
VAR vl_data
VAR FORMAT T_msg tm_msgs
VAR i

/*A Definition des parametres */

vl_parametres[0].type = SYB#CHAR_
vl_parametres[0].data = va_Basedd
vl_parametres[0].output = FALSE

vl_parametres[1].type = SYB#INT4_
vl_parametres[1].data = va_IdBice
vl_parametres[1].output = FALSE

IF COM05_SQL_Procedure (XZAO497_Lire_Msg_IMU,
                        vl_parametres, vl_resultats, C_MODULE) <> COM_OK
	RETURN (COM_NOK)

vl_data = vl_resultats.select_results[0]
tm_msgs = null

FOR i = 0  TO ARRAY_SIZE@ (vl_data) - 1
        tm_msgs[i].numero_eqt = vl_data[i][0]
	tm_msgs[i].libelle = vl_data[i][1]
NEXT i

DB_CTRL_STRINGS@(va_Fenetre, "BL_select_msg", ARRAY_COLUMN@(tm_msgs, 1))
DB_CTRL_VALUE@(va_Fenetre,"BL_select_msg",-1)

RETURN (COM_OK)


ENDMACRO

