/*E*/
/*  Fichier : $Id: ITMA_TFM_Fiche_Trafic_FM.am,v 1.63 2020/11/03 17:38:26 pc2dpdy Exp $        Release : $Revision: 1.63 $        Date : $Date: 2020/11/03 17:38:26 $
-------------------------------------------------------------------------------
* STERIA *  PROJET MIGRAZUR
-------------------------------------------------------------------------------
* SOUS-SYSTEME  GESIHM
-------------------------------------------------------------------------------
* MODULE ITMA_TFM * FICHIER ITMA_TFM_Fiche_Trafic_FM.am
-------------------------------------------------------------------------------
* DESCRIPTION DU MODULE :
*
*   Affichage de messages Trafic FM au CI ou au PC.
*
*   Cf. DCG 2.4.30
*
-------------------------------------------------------------------------------
* HISTORIQUE :
*
* Lecrivain  08 Sep 1994 : Creation
* Lecrivain  11 Oct 1994 : Changement codes de retour en COM_XXX  V1.7
* Lecrivain  12 Oct 1994 : Suppression du code de tests           V1.8
* Guilhou    14 Oct 1994 : Ajout fichiers inclusion _ax.h	   V1.9
* Lecrivain  02 Nov 1994 : Interdiction de modification selon cas V1.12
* Noel	     20 Dec 1994 : Correction duplication de lignes SCCS	V1.16
* Lecrivain  20 Dec 1994 : Redimensionnement                              V1.17
* Guilhou    27 dec 1994 : nouvelle taille			V1.18
* Guilhou    10 jan 1994 : montre sur Verifie                             V1.19
* Lecrivain  21 Fev 1995 : Redimensionnement                              V1.23
* Lecrivain  06 Mar 1995 : Fusion de l'enrichissement et modif. au CI     V1.23
* Lecrivain  05 Avr 1995 : Fermeture du plan d'action sur "Quitter"       V1.24
* Lecrivain  13 Avr 1995 : Init MTMC : Le site est celui de l'action !    V1.25
* Lecrivain  14 Avr 1995 : Sur fermeture fenetre, autorisation calcul PA  V1.26
* Lecrivain  24 Avr 1995 : Annul. flag PA ; collage fragments message     V1.28
* Lecrivain  25 Avr 1995 : Ajout de l'impression du message               V1.29
* Lecrivain  27 Avr 1995 : Position du bouton "Imprimer" selon le cas     V1.30
* Torregrossa  05 Sep 1995 : Inhiber les boutons valider et refuser au district     V1.31
* Noel	     21 Sep 1995 : Introduction de la procédure commune d'impression V1.32
* Niepceron	29 oct 1996 : ajout du niveau de qualif (dem/1248) v1.33
* Guilhou	12 nov 1996 : amelioration presentation (DEM/1276) 1.34
* Niepceron	12 Nov 1996 : ajout du niveau de qualif suite (dem/1248) v1.35
* Niepceron	09 Dec 1996 : ajout accent à l'impression de proposé (dem/1248) v1.36
* Niepceron	09 Dec 1996 : ajout d'un libelle parametrable associe au niveau (dem/1328) v1.37 1.38
* Guilhou	02 avr 1998 : supprimer le verrou (dem/1619) 1.39
* Niepceron 18 jun 1998 : ajout consigne diffusion + correction BP refuse 1.40
* Niepceron 18 Mar 1999 : correction BP refuse 1.41
* Guilhou	28 Nov 2000 : une seule zone d'edition(.d) + changement police caracteres 1.42
* Hilmarcher    20 oct 2003: ajout bouton 'envoi fax ASF' 1.43
* Niepceron    23 fev 2005: ajout du précédent message diffusé DEM/424 1.45
* Hilmarcher	19 avr 2005 : gestion des zones de decrochage TFM par sens DEM457 v1.46
* Hilmarcher    13/06/2005  : modif pour differenciation zones 1 et zones 2 DEM459 v1.47
* Lizot		27/06/2005  : modif pour SAGA DEM473 v1.48
* Ferrero		08/01/2007  : modif N° de FAX ASF RTFM qui a change v1.49
* Ferrero		12/01/2007  : modif N° de FAX ASF RTFM qui a change v1.50
* JPL		24/11/2008 : Envoi du message a ASF par mail plutot que par fax (DEM 823) 1.51
* JPL		23/09/2009 : Datation a la seconde de l'action TFM (lie a DEM 906) 1.52
* PNI		05/01/2011 : Changement du nom d'interlocuteur:RTFM V devient RADIO TRAFIC FM 84 DEM972 1.53
* PFE		20/04/2011 : Changement du nom d'interlocuteur:RADIO TRAFIC FM 84 devient RADIO VINCI DEM982 1.54
* JPL		06/01/2012 : Changement tous libelles "Trafic FM" et "RTFM" en "RVA" (DEM 1009)  1.55
* JMG		13/03/2012 : linux 1.56
* PCL		02/05/2013 : CI -> CIT  1.59
* XXX		22/06/2018 : Autoriser la diffusion RVA en region  1.60
* JPL		26/06/2018 : Enregistrement d'un indicateur de modification du message RVA (DEM 1293)  1.61
* PNI		27/09/2019 : Correctif sur localisation DEM1357 1.62
* LCL   	22/04/20   : MOVIS Ajout site local pilotage DEM-SAE93
---------------------------------------------------------------------------- */

INCLUDE	"dbase_.am"
INCLUDE	"datetim_.am"

INCLUDE	"XDMICG/inc/xdc_ax.h"
INCLUDE	"XDMICG/inc/xzic_ax.h"

INCLUDE	"GESIHM/inc/ITMA_COM.h"
INCLUDE	"GESIHM/inc/ITMA_TDO.h"
INCLUDE	"GESIHM/inc/ITMA_TAR.h"
INCLUDE "GESIHM/inc/ITMA_TAN_Escota.h"

INCLUDE	"GESIHM/inc/xzai03sp.h"
INCLUDE	"GESIHM/inc/xzai08sp.h"
INCLUDE	"GESIHM/inc/xzae111sp.h"
INCLUDE	"GESIHM/inc/xzan15sp.h"
INCLUDE	"GESIHM/inc/xzap16sp.h"
INCLUDE	"GESIHM/inc/xzac19sp.h"
INCLUDE	"GESIHM/inc/xzac20sp.h"
INCLUDE	"GESIHM/inc/xzac44sp.h"
INCLUDE	"GESIHM/inc/xzac77sp.h"
INCLUDE "GESIHM/inc/xzac190sp.h"
INCLUDE "GESIHM/inc/xzac200sp.h"


DEFINE	C_MODULE	"MTFM"			' Nom du module



DEFINE	C_MODELE_MSG		"ITMA_TMA_Message_TFM"	' Modele d'impression
DEFINE	C_SOUS_REP_MODELES	COM_SOUS_REP_IHM	' Repertoire des modeles
DEFINE	C_LIB_NIV		"      Niveau choisi :"	' Modele d'impression


DEFINE 	TMA_NIVEAU	0
DEFINE 	TMA_LIB_NIV	1
DEFINE 	TMA_COULEUR	2
DEFINE 	TMA_MODE1		3
DEFINE	TMA_MODE2		4

DEFINE 	TMA_TRC		0
DEFINE	TMA_AUT		1
DEFINE 	TMA_PRDEB		2
DEFINE	TMA_PRFIN		3

DEFINE	TMA_ZONE		0
DEFINE	TMA_TRC1		1
DEFINE	TMA_TRC2		2
DEFINE	TMA_TRC3		3
DEFINE	TMA_TRC4		4

DEFINE	TMA_NIV1		1
DEFINE	TMA_NIV2		2
DEFINE	TMA_NIV3		3
DEFINE	TMA_NIV4		4

DEFINE	TMA_NOM_COUL	0	'voire pas cool du tout !
DEFINE	TMA_RGB		1

DEFINE	TMA_MAX_PERIODE 3600

DEFINE  C_MODELE_FAX                    "ITMA_TFX_modele_fax"
DEFINE  C_NOM_POSTE_FAX         "SP"
DEFINE  C_FMT_CMD_FAX 		"cat %s | rsh %s . .profile 2>&- \; tisendfax.ksh %s %s %s 0"

DEFINE	C_FMT_CMD_MAIL		"cat %s | rsh %s . .profile 2>&- \; tisendmail.ksh %s %s %s %s %d &"
DEFINE	CM_FICH_TEXTE_MAIL	"ITMA_TFM_texte_mail"
DEFINE	CM_FICH_OBJET_MAIL	"ITMA_TFM_objet_mail"
DEFINE	CM_REPERTOIRE_TEMPO	"/tmp/"


VAR vm_mode_formation
VAR FORMAT TDO_NIV_LIB vm_liste_niveaux

FORMAT TMC_actionFiche
	numero_fiche,
	cle_fiche,
	numero_action,
	cle_action,
	libelle_fiche,
	heure_action,
	etat_action
/*A
 * Description du format des localisations lues en base
 * ----------------------------------------------
 */

FORMAT	TMA_Localisations_Message_TFM
	autoroute,				' Nom autoroute
	sens,					'sens
	pr_debut,				' pr_debut
	pr_fin					' pr_fin


VAR	vm_message_initial			' Memorisation du contenu (texte filtré) du message a l'ouverture de la fiche


VAR	vm_F_mode, vm_F_troncon_TFM, vm_F_zone_diff, vm_F_periode_diff, vm_F_periode_diffTA
VAR	vm_PRdebut, vm_PRfin, vm_aut, vm_couleur

VAR vm_lib_niv, vm_periodes, vm_sens
VAR vm_num_action


/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
*  Visualisation / enrichissement par l'operateur (s'il en a le droit)
*  d'un message Trafic FM.
*  Validation ou refus de l'envoi du message vers le poste TFM.
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TFM_Fiche_Trafic_FM (va_appelant,
				FORMAT COM_Identifiant_FMC va_id_FMC,
				va_1, va_2, va_3, va_4)

/*
* ARGUMENTS EN ENTREE :
*  va_appelant        : Nom de la macro Applix ayant invoque la presente ;
*  va_id_FMC          : Identifiant de la FMC (Numero evenement et cle) ;
*
* . Si activation depuis DPAC :
*    va_enrichir_ok   : Indicateur des droits d'enrichissement ;
*    va_message       : Le texte du message (selon le cas).
*
* . Si activation depuis MTPA :
*    va_num_PA        : Numero du plan d'action ;
*    va_num_ordre     : Numero d'ordre du plan d'action ;
*    va_libelle_FMC   : Libelle de la fiche main courante.
*
* . Si activation depuis MTMC
*	va_1 est du type TMC_actionFiche
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : COM_VALIDE si le message est envoye au poste TFM ;
*			COM_QUITTE si la fenetre est quittee ;
*			COM_REFUSE si le message est refuse ;
*			COM_NOK en cas d'erreur.
*
* CONDITION D'UTILISATION
*   TDPAC apres calcul du message Trafic FM (MTMC sur reception du message de
*   fin de calcul) ;
*   MTPA sur selection de l'action.
*   MTMC sur selection d'une action dans la liste des actions realisees.
*
* FONCTION
*   Lit eventuellement en base de donnees et affiche le message Trafic FM
*   compose par TDPAC.
*    . Si activation depuis DPAC :
*       . si l'operateur a le droit d'enrichir le message, bloque l'IHM et lui
*         permet d'enrichir le message en saisissant l'annotation et un critere
*         de confidentialite, puis de l'acquitter ;
*       . sinon attend simplement que l'operateur quitte la fenetre de dialogue.
*
*    . Si activation depuis MTPA :
*      affiche et autorise l'edition du message annote, puis permet de valider
*      (envoyer pour diffusion), refuser ou ignorer le message.
*
*    . Si activation depuis MTMC :
*      affiche le message annote ayant ete envoye pour diffusion et permet
*      si l'operateur en a les droits de demander la fin de la diffusion.
*
---------------------------------------------------------------------------- */

    VAR     va_enrichir_ok			' Arguments,
    VAR     va_message				' en cas d'appel depuis TDPAC

    VAR     va_num_PA				' Arguments,
    VAR     va_num_ordre			' en cas d'appel
    VAR     va_libelle_FMC			' depuis MTPA

    VAR     vl_fenetre				' Nom de la fenetre du module
    VAR     vl_objet_selecte			' L'objet courant de la fenetre
    VAR     vl_les_messages_acceptes		' Pour reception de signaux
    VAR     vl_la_fenetre_est_active
    VAR     vl_installer_traitement_erreur

    VAR     vl_appelant				' Module appelant
    VAR     vl_conf				' Indicateur : msg. confidentiel
    VAR     vl_texte				' Texte modifie ou annotation

    VAR     vl_statut				' Valeur de retour du module
    VAR     vl_fichier, vl_fichier_mail, vl_fichier_objet
    VAR     vl_niveau, vl_niveau_propose, vl_niveau_choisi
    VAR     vl_mail_rtfm_asf
    VAR     vl_poste_fax, vl_poste_mail, vl_rep_dyn
    VAR     vl_cmd, vl_liste_dest
    VAR	    tl_texte, vl_telecopie, vl_liste, vl_objet
	VAR tl_select, tl_texte_select, tl_coller
	VAR j,i
	VAR vl_ltexte, vl_lcoller

/*A
 * Traitements en cas d'erreur durant l'initialisation :
 * informer l'operateur, tracer l'erreur et abandonner
 * -----------------------------------------------------
 */

ON ERROR {
    ERROR_BOX@
    COM01_Trace (COM_WARNING, COM03_Message_Erreur (C_MODULE))
    RETURN (COM_NOK)
}

vm_mode_formation = (SYSTEM_VAR@ (vg_formation) <> NULL)

vm_F_mode= SYSTEM_VAR@ (vg_niv_diff)
vm_F_troncon_TFM =  SYSTEM_VAR@ (vg_troncon_TFM)
vm_F_zone_diff= SYSTEM_VAR@ (vg_zone_diff)
vm_F_periode_diff= SYSTEM_VAR@ (vg_periode_diff)
vm_F_periode_diffTA= SYSTEM_VAR@ (vg_periode_diffTA)
vm_couleur= SYSTEM_VAR@ (vg_couleur)

/*A
 * Charger la fenetre "Fiche Trafic FM"
 * ------------------------------------
 */

vl_fenetre= DB_LOAD@ ("ITMA_TFM")
DB_WINDOW_REMAIN@ (vl_fenetre, TRUE)

DB_XPOS@ (vl_fenetre, 0)
DB_YPOS@ (vl_fenetre, 93)

COM02_Attacher_Aide (vl_fenetre, "ITMA_TFM_Fiche_Trafic_FM")


/*A
 * Mettre en place la reception des messages
 * -----------------------------------------
 */

vl_les_messages_acceptes[0] = COM_CANAL_FIN
DB_ACCEPT_POKES@ (vl_fenetre, vl_les_messages_acceptes)

/*DB_CTRL_MONOSPACE@(vl_fenetre, "BE_Texte",TRUE)*/

DB_CTRL_RETURN_ON_CHANGE@ (vl_fenetre, "BO_Niveau", TRUE)


/*A
 * Definir les caracteristiques des objets graphiques selon l'appelant
 * -------------------------------------------------------------------
 */

vl_appelant = SUBSTRING@ (va_appelant, 1, 8)
CASE OF vl_appelant

/*A Appel sur reception du message TFM de TDPAC */
CASE "DPAC_TFM"
    va_enrichir_ok = va_1
    va_message = va_2
    vl_niveau = va_3
	if (vl_niveau > 4)
		vl_niveau = 1

    DB_CTRL_DISPLAY@ (vl_fenetre, "LI_Evenement_Lie", FALSE)
    DB_CTRL_DISPLAY@ (vl_fenetre, "LI_fmc_liee", FALSE)

    DB_CTRL_DISPLAY@ (vl_fenetre, "LI_Nb_Diffusions", FALSE)
    DB_CTRL_DISPLAY@ (vl_fenetre, "BP_Arreter_Diffusion", FALSE)

    DB_CTRL_DISPLAY@ (vl_fenetre, "LI_Remarque", FALSE)
    DB_CTRL_DISPLAY@ (vl_fenetre, "ID_Confidentiel", FALSE)

    /*IF SYSTEM_VAR@ (vg_site) = XDC_CI {*/
	DB_CTRL_TITLE@ (vl_fenetre, "LI_Message", "Message A Diffuser")
    /*
    } ELSE {
	DB_CTRL_DISPLAY@ (vl_fenetre, "BP_Refuser", FALSE)
	DB_CTRL_DISPLAY@ (vl_fenetre, "BP_TraficFM", FALSE)
	DB_CTRL_DISPLAY@ (vl_fenetre, "LI_Libelle_MODE", FALSE)
	DB_CTRL_DISPLAY@ (vl_fenetre, "LI_Mode1", FALSE)
	DB_CTRL_DISPLAY@ (vl_fenetre, "LI_Mode2" , FALSE)
	DB_CTRL_DISPLAY@ (vl_fenetre, "LI_ZONES", FALSE)
	DB_CTRL_DISPLAY@ (vl_fenetre, "LI_Zone1", FALSE)
	DB_CTRL_DISPLAY@ (vl_fenetre, "LI_Zone2", FALSE)
     } */

    DB_CTRL_TITLE@ (vl_fenetre, "LI_Niveau", "")

    vm_liste_niveaux =  SYSTEM_VAR@ ( vg_niv_diff )
    DB_CTRL_STRINGS@ (vl_fenetre, "BO_Niveau" ,ARRAY_COLUMN@(vm_liste_niveaux,TDO_LIB_NIV) )

    IF TFM_Init_Visu_DPAC (vl_fenetre,
				va_id_FMC, va_enrichir_ok, va_message, vl_niveau) <> COM_OK
	RETURN (COM_NOK)


/*A Appel depuis le plan d'action */
CASE "ITMA_TPA"
    va_num_PA = va_1
    va_num_ordre = va_2
    va_libelle_FMC = va_3
   
    DB_CTRL_TITLE@ (vl_fenetre, "LI_Evenement_Lie", va_libelle_FMC)

    DB_CTRL_DISPLAY@ (vl_fenetre, "LI_Nb_Diffusions", FALSE)
    DB_CTRL_DISPLAY@ (vl_fenetre, "BP_Arreter_Diffusion", FALSE)

    /*IF SYSTEM_VAR@ (vg_site) <> XDC_CI {
	DB_CTRL_DISPLAY@ (vl_fenetre, "BP_Refuser", FALSE)
	DB_CTRL_DISPLAY@ (vl_fenetre, "BP_TraficFM", FALSE)
    }*/

    DB_CTRL_RETURN_ON_CHANGE@ (vl_fenetre, "BA_Confidentiel", TRUE)

    /*COM27_Agrandir_Fenetre (vl_fenetre, COM_LARGEUR_FMC, COM_HAUTEUR_MAX)*/

    vm_liste_niveaux =  SYSTEM_VAR@ ( vg_niv_diff )

    DB_CTRL_STRINGS@ (vl_fenetre, "BO_Niveau" ,ARRAY_COLUMN@(vm_liste_niveaux,TDO_LIB_NIV) )

    IF TFM_Init_Visu_MTPA (vl_fenetre, va_num_PA, va_num_ordre, va_4) <> COM_OK
	RETURN (COM_NOK)


/*A Appel depuis la liste des actions realisees dans la FMC */
CASE "ITMA_TMC"
    va_libelle_FMC = va_1[4]
    DB_CTRL_TITLE@ (vl_fenetre, "LI_Evenement_Lie", va_libelle_FMC)

    DB_CTRL_TITLE@ (vl_fenetre, "LI_Remarque", "Nombre de Diffusions")

    DB_CTRL_DISPLAY@ (vl_fenetre, "BE_Texte", TRUE)
    DB_CTRL_DISPLAY@ (vl_fenetre, "BE_Msg", FALSE)
    DB_CTRL_DISPLAY@ (vl_fenetre, "LI_MessagePrec", FALSE)

    DB_CTRL_DISPLAY@ (vl_fenetre, "ID_Confidentiel", FALSE)
    DB_CTRL_DISPLAY@ (vl_fenetre, "BA_Confidentiel", FALSE)

    DB_CTRL_DISPLAY@ (vl_fenetre, "BP_Copier", FALSE)
    DB_CTRL_DISPLAY@ (vl_fenetre, "BP_Refuser", FALSE)
    DB_CTRL_DISPLAY@ (vl_fenetre, "BP_TraficFM", FALSE)

    DB_CTRL_DISPLAY@ (vl_fenetre, "LI_Libelle_MODE", FALSE)
    DB_CTRL_DISPLAY@ (vl_fenetre, "LI_Mode1", FALSE)
    DB_CTRL_DISPLAY@ (vl_fenetre, "LI_Mode2", FALSE)
    DB_CTRL_DISPLAY@ (vl_fenetre, "LI_ZONES", FALSE)
    DB_CTRL_DISPLAY@ (vl_fenetre, "LI_Zone1", FALSE)
    DB_CTRL_DISPLAY@ (vl_fenetre, "LI_Zone2", FALSE)
    DB_CTRL_DISPLAY@ (vl_fenetre, "LI_T", FALSE)

    /*COM27_Agrandir_Fenetre (vl_fenetre, COM_LARGEUR_FMC, COM_HAUTEUR_MAX)*/

    vm_liste_niveaux =  SYSTEM_VAR@ ( vg_niv_diff )

    IF TFM_Init_Visu_MTMC (vl_fenetre, va_1) <> COM_OK
	RETURN (COM_NOK)
ENDCASE



/*A
 * Traitements en cas d'erreur durant la visualisation :
 * informer l'operateur et selon la nature et la gravite
 * de l'erreur la tracer ou non, continuer ou abandonner
 * -----------------------------------------------------
 */

vl_installer_traitement_erreur = TRUE
WHILE vl_installer_traitement_erreur
    vl_installer_traitement_erreur = FALSE

    ON ERROR {
	ERROR_BOX@
	COM01_Trace (COM_WARNING, COM03_Message_Erreur (C_MODULE))
	vl_installer_traitement_erreur = TRUE
    }
WEND


/*A
 * Tant que la fenetre n'est pas desactivee, la visualiser
 * -------------------------------------------------------
 */

vl_la_fenetre_est_active = TRUE
WHILE vl_la_fenetre_est_active

    DB_DISPLAY@ (vl_fenetre)
    vl_objet_selecte = DB_EXIT_CTRL@ (vl_fenetre)

    CASE OF vl_objet_selecte

    CASE "poke_"
        CASE OF  DB_GET_POKE@ (vl_fenetre)
        CASE COM_CANAL_FIN
	    vl_statut = COM_QUITTE
            vl_la_fenetre_est_active = FALSE
        ENDCASE


    /*A
     * Sur choix "Niveau du message"
     * -----------------------------
     */



    CASE "BP_Quitter"
	DB_SEND_POKE@ (COM_CANAL_MTPA, "FIN")
	vl_statut = COM_QUITTE
	vl_la_fenetre_est_active = FALSE


    /*A
     * Sur saisie du critere de confidentialite,
     * autoriser ou non la validation selon la valeur
     * ----------------------------------------------
     */

    CASE "BA_Confidentiel"
	vl_conf = DB_CTRL_GET_VALUE@ (vl_fenetre, "BA_Confidentiel")
	DB_CTRL_DISPLAY@ (vl_fenetre, "ID_Confidentiel", vl_conf)
	DB_CTRL_GRAYED@ (vl_fenetre, "BP_TraficFM", vl_conf)


    CASE "BO_Niveau"
	vl_niveau = DB_CTRL_GET_VALUE@ (vl_fenetre, "BO_Niveau")
	TFM_Calcul_Consignes(vl_fenetre,vl_niveau)


    /*A
     * Sur choix "Refuser Diffusion", si l'activation provient de TDPAC
     * archiver le texte du message initial propose, sans annotation
     * ----------------------------------------------------------------
     */

    CASE "BP_Refuser"
	vl_statut = COM_REFUSE
	vl_niveau = DB_CTRL_GET_VALUE@ (vl_fenetre, "BO_Niveau")
	vl_la_fenetre_est_active = FALSE
	IF vl_appelant = "DPAC_TFM"  AND  NOT vm_mode_formation {
	    vl_conf = DB_CTRL_GET_VALUE@ (vl_fenetre, "BA_Confidentiel")
	    TFM_Archiver_Annotation (va_id_FMC, vl_conf, va_message, NULL,vm_liste_niveaux[vl_niveau+0].niveau+0 )
	}


    /*A
     * Sur choix "Valider", si l'activation provient de TDPAC
     * archiver le texte du message initial propose par le SAD
     * puis envoyer le message eventuellement modifie au poste TFM
     * -----------------------------------------------------------
     */

    CASE "BP_TraficFM"

	vl_niveau = DB_CTRL_GET_VALUE@ (vl_fenetre, "BO_Niveau")
	IF ( vl_niveau = "0" )
			Info_Message@( " Veuillez renseigner le Niveau de Message ")
	ELSE
	{
	IF NOT vm_mode_formation {
	    IF vl_appelant = "DPAC_TFM" {
		TFM_Archiver_Annotation (va_id_FMC, FALSE, va_message, NULL, vm_liste_niveaux[vl_niveau+0].niveau+0)
	    }

	    vl_texte = DB_EDITBOX_GET_DATA@ (vl_fenetre, "BE_Texte")
	    TFM_Envoyer_Message_TFM (va_id_FMC, vl_texte, vm_liste_niveaux[vl_niveau].niveau+0)
  		}
	vl_statut = COM_VALIDE
	vl_la_fenetre_est_active = FALSE
  	}


    /*A
     * Sur choix "Arreter Diffusion", enregistrer la
     * fin d'action TFM et terminer la visualisation
     * ---------------------------------------------
     */

    CASE "BP_Arreter_Diffusion"
	TFM_Finir_Message_TFM (va_1)
	vl_statut = COM_QUITTE
	vl_la_fenetre_est_active = FALSE


    /*A
     * Sur choix "Imprimer", produire un fichier contenant
     * le texte du message puis demander l'impression du fichier
     * ---------------------------------------------------------
     */

    CASE "BP_Imprimer"
	/*B Ouvrir une fenetre ApplixWord non visible et charger le modele */
	WP_APPLICATION_DLG@ (NULL, TRUE)
	WP_LOAD_FILE@ (SYSTEM_VAR@ (vg_repertoire_migrazur) ++
			    C_SOUS_REP_MODELES ++ C_MODELE_MSG ++ ".aw")

	/* Valuer le texte, avec les eventuelles modifications */
	vl_texte = DB_EDITBOX_GET_DATA@ (vl_fenetre, "BE_Texte")
	WP_SET_DOC_VAR@ ("message", vl_texte)

	vl_niveau = DB_CTRL_GET_VALUE@ (vl_fenetre, "BO_Niveau")
	vl_niveau_choisi = vm_liste_niveaux[vl_niveau+0].libelle
	vl_niveau_propose = DB_CTRL_GET_TITLE@ (vl_fenetre, "LI_Niveau")

	IF ( DB_CTRL_GET_TITLE@ (vl_fenetre, "LI_Niveau_Propose") = C_LIB_NIV)
		WP_SET_DOC_VAR@ ("consignes", "Niveau choisi : " ++ vl_niveau_propose)
	ELSE
		WP_SET_DOC_VAR@ ("consignes", "Niveau proposé : " ++vl_niveau_propose++"\nNiveau choisi : " ++
	vl_niveau_choisi)

	/*B Formater le texte actuellement ouvert et l'imprimer */
	vl_fichier = C_MODELE_MSG ++ "_" ++ SYSTEM_VAR@ (vg_numero_poste)
	COM36_Imprimer_Texte(vl_fichier)


    /*A
     * Sur choix "Faxer ASF", produire un fichier contenant
     * le texte du fax puis l'envoyer
     * (obsolete, remplace par l'envoi par mail ci-dessous)
     * ----------------------------------------------------
     */

    CASE "BP_Faxer_ASF"
	
	/* Griser le bouton "Faxer ASF" 
	DB_CTRL_GRAYED@ (vl_fenetre, "BP_Faxer_ASF", TRUE)
	*/

	/*B Mettre en base le message TFM */
	TFM_Archiver_Annotation (va_id_FMC, FALSE, va_message, NULL,0)
	
	vl_texte = DB_EDITBOX_GET_DATA@ (vl_fenetre, "BE_Texte")

	ASF_Creer_Action (va_id_FMC, vl_texte,0)

	/*A Produire le fichier */
	vl_fichier = C_MODELE_FAX ++ "_" ++
			SYSTEM_VAR@ (vg_numero_poste) ++ ".ps"
	
	/*B Ouvrir une fenetre ApplixWord non visible et charger le modele */
	WP_APPLICATION_DLG@(NULL, TRUE)
	WP_LOAD_FILE@ (SYSTEM_VAR@ (vg_repertoire_migrazur) ++
				C_SOUS_REP_MODELES ++ C_MODELE_FAX ++ ".aw")
	WP_SET_DOC_VAR@ ("site", "Centre Information Trafic")
	
	/*coordonnees expediteur: le CI*/
	vl_telecopie = TAN_FAX_CI
	vl_liste = TAN_ADR1_CI, TAN_ADR2_CI, "TEL. : " ++ TAN_TEL_CI
	WP_SET_DOC_VAR@ ("telecopie", vl_telecopie)
	WP_SET_DOC_VAR@ ("adresse1", vl_liste[0])
	WP_SET_DOC_VAR@ ("adresse2", vl_liste[1])
	WP_SET_DOC_VAR@ ("adresse3", vl_liste[2])

	WP_SET_DOC_VAR@ ("destinataires","RADIO VINCI AUTOROUTES 84			       0490327695")
	WP_SET_DOC_VAR@ ("texte", vl_texte)
	
	WP_PRINT@ (NULL, FALSE, 1, FALSE, TRUE, 0, 0, FALSE, NULL, vl_fichier,
			NULL, NULL, NULL, NULL, NULL, FALSE, COM_FORMAT_PS)
	WP_EXIT@()
	
	/*B copier le fichier dans le rep /fichiers/dyn sur le poste fax SPCI
	 *  puis le renommer en .old
	 */
	
	vl_poste_fax = "SPCI" 
	vl_rep_dyn = SYSTEM_VAR@ (vg_repertoire_migrazur) ++ COM_SOUS_REP_DYN
	vl_cmd = FORMAT@ ("rcp %s %s:%s", "/tmp/" ++ vl_fichier, vl_poste_fax, vl_rep_dyn)
	SHELL_COMMAND@ (vl_cmd)
	
	vl_cmd = FORMAT@ ("mv  %s %s", "/tmp/" ++ vl_fichier,"/tmp/" ++ vl_fichier ++ ".old")
	SHELL_COMMAND@ (vl_cmd) 

	/*B Construire la liste du destinatire: fax ASF
	 *  en test pour le moment dc dest = DT a modifier
	 */

	vl_liste_dest = NULL 
	vl_liste_dest = vm_num_action ++ "|00490327695" ++ "\n" 

	/*B Envoyer le fax sur le poste */
	WRITE_ASCII_FILE@ ("/tmp/liste_actions", vl_liste_dest)
	vl_cmd = FORMAT@ (C_FMT_CMD_FAX,
					"/tmp/liste_actions",
					"SPCI",
					vl_rep_dyn ++ vl_fichier,	
					"43",
					"CI")
	SHELL_COMMAND@ (vl_cmd)
	SHELL_COMMAND@ ("mv /tmp/liste_actions /tmp/liste_actions.old")
 	
	vl_la_fenetre_est_active = FALSE


    /*A
     * Sur choix "Envoi ASF", produire les fichiers
     * contenant le texte et l'objet du mail et les envoyer
     * ----------------------------------------------------
     */

    CASE "BP_Mail_ASF"
	/*B Prendre pour objet du mail une portion de la premiere ligne de texte saisi */
	tl_texte = DB_EDITBOX_GET_DATA@ (vl_fenetre, "BE_Texte")
	vl_objet = ""
	i = 0
	WHILE (i < ARRAY_SIZE@ (tl_texte))  AND  (vl_objet = "")
		vl_objet = TRIM@ (tl_texte[i])
		i = i + 1
	WEND

	/*B Rechercher l'adresse mail de RTFM ASF */
	vl_mail_rtfm_asf = TFM_Adresse_RTFM_ASF ()

	/*B Si un texte de mail est saisi et l'adresse mail RTFM est obtenue alors */
	IF (vl_objet <> "")  AND  (NOT IS_NULL@ (vl_mail_rtfm_asf))
	{
		/*B Mettre en base le message TFM */
		TFM_Archiver_Annotation (va_id_FMC, FALSE, va_message, NULL,0)

		ASF_Creer_Action (va_id_FMC, tl_texte, 0)

		/*B Supprimer tous fichiers crees par une invocation precedente */
		vl_fichier_mail = CM_FICH_TEXTE_MAIL ++ "_" ++ SYSTEM_VAR@ (vg_numero_poste) ++ ".txt"
		vl_fichier_objet = CM_FICH_OBJET_MAIL ++ "_" ++ SYSTEM_VAR@ (vg_numero_poste) ++ ".txt"
		vl_cmd = FORMAT@ ("rm %s %s %s",
		                     CM_REPERTOIRE_TEMPO ++ vl_fichier_mail,
		                     CM_REPERTOIRE_TEMPO ++ vl_fichier_objet,
		                     CM_REPERTOIRE_TEMPO ++ "liste_actions_mail_tfm")
		SHELL_COMMAND@ (vl_cmd)

		/*B Produire les fichiers des texte et objet du mail */
		WRITE_ASCII_FILE@ (CM_REPERTOIRE_TEMPO ++ vl_fichier_mail, tl_texte)
		WRITE_ASCII_FILE@ (CM_REPERTOIRE_TEMPO ++ vl_fichier_objet, SUBSTRING@ (vl_objet, 1, 140))

		/*B Copier les fichiers dans le repertoire adequat sur le poste d'envoi des mails */
		vl_poste_mail = "SPCI"
		vl_cmd = FORMAT@ ("rcp %s %s %s:%s",
		                     CM_REPERTOIRE_TEMPO ++ vl_fichier_mail,
		                     CM_REPERTOIRE_TEMPO ++ vl_fichier_objet,
		                     vl_poste_mail,
		                     CM_REPERTOIRE_TEMPO)
		SHELL_COMMAND@ (vl_cmd)

		/*B Construire la liste des destinataires : ASF seul destinataire */
		vl_liste_dest = { (vm_num_action + 0) ++ "|" ++ vl_mail_rtfm_asf }
		WRITE_ASCII_FILE@ (CM_REPERTOIRE_TEMPO ++ "liste_actions_mail_tfm", vl_liste_dest)

		/*B Executer la commande d'envoi du mail */
		vl_cmd = FORMAT@ (C_FMT_CMD_MAIL,
		                     CM_REPERTOIRE_TEMPO ++ "liste_actions_mail_tfm",
		                     vl_poste_mail,
		                     CM_REPERTOIRE_TEMPO ++ vl_fichier_mail,
		                     SYSTEM_VAR@ (vg_site),
		                     SYSTEM_VAR@ (vg_nom_site),
		                     CM_REPERTOIRE_TEMPO ++ vl_fichier_objet,
		                     1)
		SHELL_COMMAND@ (vl_cmd)

		vl_la_fenetre_est_active = FALSE
	}


/*DEBUT DEM/424 */
		/*A appui sur le bouton copier/coller */
		CASE "BP_Copier"
/*A COPIER */
			j=0
			tl_texte_select = null
			tl_select = null
			tl_texte = null
			tl_select = DB_EDITBOX_GET_SELECTION@(vl_fenetre, "BE_Msg")					
			tl_texte = DB_EDITBOX_GET_DATA@(vl_fenetre, "BE_Msg")

			IF tl_select[2]=tl_select[0]
			{
				tl_select[0]=0
				tl_select[1]=1
				IF (tl_select[2]>0)
					tl_select[2]=tl_select[2]-1
				tl_select[3]=1
			}
				tl_texte_select[j]=SUBSTRING@(tl_texte[tl_select[0]], 
														tl_select[1])
				j=j+1
				FOR i=tl_select[0]+1 to tl_select[2]-1
					tl_texte_select[j]=tl_texte[i]
					j=j+1
				NEXT i
				tl_texte_select[j]=SUBSTRING@(tl_texte[tl_select[2]],1,
													tl_select[3]-1)

			tl_coller = tl_texte_select

/*A COLLER */
			tl_texte_select = null
			tl_select = null
			tl_texte = null
			tl_select = DB_EDITBOX_GET_SELECTION@(vl_fenetre, "BE_Texte")
			tl_texte = DB_EDITBOX_GET_DATA@(vl_fenetre, "BE_Texte")
			vl_ltexte=ARRAY_SIZE@(tl_texte)
			vl_lcoller=ARRAY_SIZE@(tl_coller)
			FOR i=0 to tl_select[0]-1
				tl_texte_select[i]=tl_texte[i]
			NEXT i
			tl_texte_select[tl_select[0]] = SUBSTRING@(tl_texte[tl_select[0]],1,
													tl_select[1]-1)
									++tl_coller[0]
			IF vl_lcoller>2
			{
				FOR i=1 to vl_lcoller-2
					tl_texte_select[i+tl_select[0]]=tl_coller[i]
				NEXT i
			}
			IF vl_lcoller>1
			{

				tl_texte_select[tl_select[0]+vl_lcoller-1]=
					   tl_coller[vl_lcoller-1]
					++ SUBSTRING@(tl_texte[tl_select[2]],tl_select[3])
			}
			ELSE
			{
				tl_texte_select[tl_select[0]]=tl_texte_select[tl_select[0]]
						++ SUBSTRING@(tl_texte[tl_select[2]],tl_select[3])
			}
j=0
			FOR i=tl_select[2]+1 to vl_ltexte
				tl_texte_select[tl_select[0]+vl_lcoller+j]=
													tl_texte[i]
				j=j+1
			NEXT i
			DB_EDITBOX_SET_DATA@(vl_fenetre, "BE_Texte", tl_texte_select)
			/*A Met le curseur en debur du msg proposé */
			DB_EDITBOX_SELECTION@(vl_fenetre, "BE_Texte", 0,0,0,0) 
/*FIN DEM/424 */
    ENDCASE
WEND

/*A
 * Si activation depuis TDPAC et l'operateur
 * a le droit d'enrichir alors debloquer l'IHM
 * -------------------------------------------
 */

IF vl_appelant = "DPAC_TFM"  AND  va_enrichir_ok
    SET_SYSTEM_VAR@ (vg_verrou, FALSE)

RETURN (vl_statut)

ENDMACRO



/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
*  Initialise la visualisation (lors d'un appel depuis TDPAC).
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO TFM_Init_Visu_DPAC (va_fenetre, FORMAT COM_Identifiant_FMC va_id_FMC,
			     va_enrichir_ok, va_message, va_niveau)

/*
* ARGUMENTS EN ENTREE :
*   va_fenetre        : Id. de la fenetre a initialiser ;
*   va_id_FMC         : Identifiant de la FMC (Numero et cle evenement) ;
*   va_enrichir_ok    : Indicateur des droits d'enrichissement ;
*   va_message        : Texte du message (selon le cas).
*   va_niveau         : Niveau de qualification.
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : COM_OK en cas d'execution correcte, COM_NOK sinon.
*
* CONDITION D'UTILISATION
*   ITMA_TFM_Fiche_Trafic_FM
*
* FONCTION
*   Initialise les valeurs a afficher (texte du message TFM, confidentialite).
*
---------------------------------------------------------------------------- */

    VAR     i
    VAR     vl_l_texte				' Textes dernier message 
    VAR     vl_l_message			'Texte message (liste de lignes)
    VAR	    vl_index
    VAR FORMAT SQL_Procedure_Params@ vl_parametres
    VAR FORMAT SQL_Procedure_Result@ vl_resultats

/* Conserver le contenu du message initial */
vm_message_initial = TFM_Extrait_Texte_Formate (va_message)


/*A
 * Afficher le texte du message fourni en argument
 * -----------------------------------------------
 */

vl_l_message[0] = va_message


DB_DISPLAY_ONLY@ (va_fenetre, TRUE)                     ' Pour avoir acces
DB_DISPLAY@ (va_fenetre)                                ' aux boites d'edition
DB_DISPLAY_ONLY@ (va_fenetre, FALSE)

DB_EDITBOX_SET_DATA@ (va_fenetre, "BE_Texte", vl_l_message)

DB_CTRL_VALUE@ (va_fenetre, "BA_Confidentiel", FALSE)

if ( ( va_niveau = XDC_SANS_NTFMAX ) OR IS_NULL@ (va_niveau) )
	{
	DB_CTRL_TITLE@ (va_fenetre, "LI_Niveau", "")
	DB_CTRL_VALUE@ (va_fenetre, "BO_Niveau", 0 )
	}
ELSE
	{
	vl_index=ARRAY_INDEX@( ARRAY_COLUMN@ ( vm_liste_niveaux,TDO_NIVEAU_TFM ), va_niveau )
	if ( vl_index <> -1 )
		DB_CTRL_TITLE@ (va_fenetre, "LI_Niveau", vm_liste_niveaux[vl_index].libelle)
	else
		DB_CTRL_TITLE@ (va_fenetre, "LI_Niveau", "?")
	
	DB_CTRL_VALUE@ (va_fenetre, "BO_Niveau", vl_index )
	}

TFM_PR_FMC ( va_id_FMC.numero, va_id_FMC.cle)
if (vm_aut[0]="A0")
 return (COM_OK)
else
 TFM_Calcul_Consignes(va_fenetre,va_niveau)

/*DEBUT DEM/424 */

/*B Passer le numero de fmc */
vl_parametres[0].type = COM_Numero_Evenement
vl_parametres[0].data = va_id_FMC.numero
vl_parametres[0].output = FALSE

/*B Passer la cle de fmc */
vl_parametres[1].type = COM_Cle_Evenement
vl_parametres[1].data = va_id_FMC.cle
vl_parametres[1].output = FALSE


vl_parametres[2].type = COM_Numero_PA
vl_parametres[2].data = 0
vl_parametres[2].output = FALSE


IF COM05_SQL_Procedure (XZAC77_Lire_DernierTFM,
			   vl_parametres, vl_resultats, C_MODULE) <> COM_OK
    RETURN (COM_NOK)

FOR i = 0  TO ARRAY_SIZE@ (vl_resultats.select_results[0]) - 1
    vl_l_texte[0] = vl_l_texte[0] ++ vl_resultats.select_results[0, i, 0]
NEXT i

DB_DISPLAY_ONLY@ (va_fenetre, TRUE)                     ' Pour avoir acces
DB_DISPLAY@ (va_fenetre)                                ' aux boites d'edition
DB_DISPLAY_ONLY@ (va_fenetre, FALSE)

DB_EDITBOX_SET_DATA@ (va_fenetre, "BE_Msg", vl_l_texte)
/*A Met le curseur en debur du msg proposé */
DB_EDITBOX_SELECTION@(va_fenetre, "BE_Texte", 0,0,0,0) 

/*FIN DEM/424 */
RETURN (COM_OK)

ENDMACRO



/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
*  Initialise la visualisation (lors d'un appel depuis MTPA).
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO TFM_Init_Visu_MTPA (va_fenetre, va_num_PA, va_num_ordre, va_niveau)

/*
* ARGUMENTS EN ENTREE :
*   va_fenetre        : Id. de la fenetre a initialiser ;
*   va_num_PA         : Numero du plan d'action ;
*   va_num_ordre      : Numero d'ordre du plan d'action.
*   va_niveau		  : niveau propose
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : COM_OK en cas d'execution correcte, COM_NOK sinon.
*
* CONDITION D'UTILISATION
*   ITMA_TFM_Fiche_Trafic_FM
*
* FONCTION
*   Initialise les valeurs a afficher (texte et annotation du message TFM).
*
---------------------------------------------------------------------------- */

    VAR     vl_l_texte				' Textes message + annotation
    VAR     vl_l_remarque			' Texte de la remarque
    VAR     vl_confidentiel			' Critere de confidentialite
    VAR     i, vl_niveau, vl_index

    VAR FORMAT SQL_Procedure_Params@ vl_parametres
    VAR FORMAT SQL_Procedure_Result@ vl_resultats


vl_parametres[0].type = COM_Numero_PA
vl_parametres[0].data = va_num_PA
vl_parametres[0].output = FALSE

vl_parametres[1].type = COM_Numero_Ordre_PA
vl_parametres[1].data = va_num_ordre
vl_parametres[1].output = FALSE

vl_parametres[2].type = SYB#CHAR_			' Remarque du SAD
vl_parametres[2].output = TRUE

vl_parametres[3].type = SYB#BIT_			'Critere confidentialite
vl_parametres[3].output = TRUE

vl_parametres[4].type = SYB#INT1_			'Niveau
vl_parametres[4].output = TRUE


IF COM05_SQL_Procedure (XZAP16_Lire_Prop_Envoi_TFM,
			   vl_parametres, vl_resultats, C_MODULE) <> COM_OK
    RETURN (COM_NOK)


vl_l_remarque[0] = vl_resultats.return_parameters[0]
vl_confidentiel = (vl_resultats.return_parameters[1] = XDC_VRAI)

DB_CTRL_VALUE@ (va_fenetre, "BA_Confidentiel", vl_confidentiel)

vl_niveau = vl_resultats.return_parameters[2]


if ( ( va_niveau = XDC_SANS_NTFMAX ) OR IS_NULL@ (va_niveau) )
	{
	DB_CTRL_TITLE@ (va_fenetre, "LI_Niveau", "")
	}
ELSE
	{
	vl_index=ARRAY_INDEX@( ARRAY_COLUMN@ ( vm_liste_niveaux,TDO_NIVEAU_TFM ), va_niveau )
	if ( vl_index <> -1 )
		DB_CTRL_TITLE@ (va_fenetre, "LI_Niveau", vm_liste_niveaux[vl_index].libelle)
	else
		DB_CTRL_TITLE@ (va_fenetre, "LI_Niveau", "?")
	}

if ( ( vl_niveau = XDC_SANS_NTFMAX ) OR IS_NULL@ (vl_niveau) )
	{
	DB_CTRL_VALUE@ (va_fenetre, "BO_Niveau", 0 )
	}
ELSE
	{
	vl_index=ARRAY_INDEX@( ARRAY_COLUMN@ ( vm_liste_niveaux,TDO_NIVEAU_TFM ), vl_niveau )
	if vl_index<>-1
		DB_CTRL_VALUE@ (va_fenetre, "BO_Niveau", vl_index )
	else
			DB_CTRL_VALUE@ (va_fenetre, "BO_Niveau", 0)
	}

DB_CTRL_DISPLAY@ (va_fenetre, "ID_Confidentiel", vl_confidentiel)
DB_CTRL_GRAYED@ (va_fenetre, "BP_TraficFM", vl_confidentiel)


FOR i = 0  TO ARRAY_SIZE@ (vl_resultats.select_results[0]) - 1
    vl_l_texte[0] = vl_l_texte[0] ++ vl_resultats.select_results[0, i, 0]
NEXT i

/* Conserver le contenu du message initial */
vm_message_initial = TFM_Extrait_Texte_Formate (vl_l_texte[0])

DB_DISPLAY_ONLY@ (va_fenetre, TRUE)                     ' Pour avoir acces
DB_DISPLAY@ (va_fenetre)                                ' aux boites d'edition
DB_DISPLAY_ONLY@ (va_fenetre, FALSE)

DB_EDITBOX_SET_DATA@ (va_fenetre, "BE_Texte", vl_l_texte)


/*DEBUT DEM/424 */

/*B Passer le numero de fmc */
vl_parametres[0].type = COM_Numero_Evenement
vl_parametres[0].data = 0
vl_parametres[0].output = FALSE

/*B Passer la cle de fmc */
vl_parametres[1].type = COM_Cle_Evenement
vl_parametres[1].data = 0
vl_parametres[1].output = FALSE


vl_parametres[2].type = COM_Numero_PA
vl_parametres[2].data = va_num_PA
vl_parametres[2].output = FALSE


IF COM05_SQL_Procedure (XZAC77_Lire_DernierTFM,
			   vl_parametres, vl_resultats, C_MODULE) <> COM_OK
    RETURN (COM_NOK)

FOR i = 0  TO ARRAY_SIZE@ (vl_resultats.select_results[0]) - 1
    vl_l_texte[0] = vl_l_texte[0] ++ vl_resultats.select_results[0, i, 0]
NEXT i

DB_EDITBOX_SET_DATA@ (va_fenetre, "BE_Msg", vl_l_texte)
/*A Met le curseur en debur du msg proposé */
DB_EDITBOX_SELECTION@(va_fenetre, "BE_Texte", 0,0,0,0) 

/*FIN DEM/424 */

RETURN (COM_OK)

ENDMACRO



/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
*  Initialise la visualisation (lors d'un appel depuis MTMC).
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO TFM_Init_Visu_MTMC (va_fenetre, FORMAT TMC_actionFiche va_action)

/*
* ARGUMENTS EN ENTREE :
*   va_fenetre        : Id. de la fenetre a initialiser ;
*   va_action         : Fiche de l'action.
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : COM_OK en cas d'execution correcte, COM_NOK sinon.
*
* CONDITION D'UTILISATION
*   ITMA_TFM_Fiche_Trafic_FM
*
* FONCTION
*   Lit en base de donnees et affiche le texte du message TFM correspondant
*   a l'action d'identifiant indique.
*
---------------------------------------------------------------------------- */

    VAR     vl_l_message			'Texte message (liste de lignes)

    VAR FORMAT SQL_Procedure_Params@ vl_parametres
    VAR FORMAT SQL_Procedure_Result@ vl_resultats
    VAR     i, vl_niveau , vl_index


/*A
 * Lire le message en base de donnees
 * ----------------------------------
 */

vl_parametres[0].type = SYB#INT4_
vl_parametres[0].data = va_action.numero_action
vl_parametres[0].output = FALSE

vl_parametres[1].type = SYB#INT4_
vl_parametres[1].data = va_action.cle_action
vl_parametres[1].output = FALSE

vl_parametres[2].type = SYB#DATETIME_
vl_parametres[2].output = TRUE

vl_parametres[3].type = SYB#DATETIME_
vl_parametres[3].output = TRUE

vl_parametres[4].type = SYB#DATETIME_
vl_parametres[4].output = TRUE

vl_parametres[5].type = SYB#DATETIME_
vl_parametres[5].output = TRUE

vl_parametres[6].type = SYB#INT4_
vl_parametres[6].output = TRUE

vl_parametres[7].type = SYB#INT1_
vl_parametres[7].output = TRUE

IF COM05_SQL_Procedure (XZAC44_Lire_ActionTFM,
			    vl_parametres, vl_resultats, C_MODULE) <> COM_OK
{
    INFO_MESSAGE@ ("Erreur dans la lecture du message RVA en base")
    RETURN (COM_NOK)
}


DB_CTRL_TITLE@(va_fenetre, "LI_Nb_Diffusions",vl_resultats.return_parameters[4])

/*A
 * Autoriser la demande d'arret de la diffusion si l'operateur
 * en a les droits et si l'arret n'a pas deja ete effectue
 * -----------------------------------------------------------
 */

IF (vl_resultats.return_parameters[1] <> NULL)  /*OR
   NOT COM04_Operateur_A_Le_Droit_De (XDC_FAM_EXPLOITATION_CI)*/
    DB_CTRL_DISPLAY@ (va_fenetre, "BP_Arreter_Diffusion", FALSE)


FOR i = 0  TO ARRAY_SIZE@ (vl_resultats.select_results[0]) - 1
    vl_l_message[0] = vl_l_message[0] ++ vl_resultats.select_results[0, i, 0]
NEXT i

/* Conserver le contenu du message initial */
vm_message_initial = TFM_Extrait_Texte_Formate (vl_l_message[0])

DB_DISPLAY_ONLY@ (va_fenetre, TRUE)                     ' Pour avoir acces
DB_DISPLAY@ (va_fenetre)                                ' aux boites d'edition
DB_DISPLAY_ONLY@ (va_fenetre, FALSE)

DB_EDITBOX_SET_DATA@ (va_fenetre, "BE_Texte", vl_l_message)

vl_niveau = vl_resultats.return_parameters[5]

DB_CTRL_TITLE@( va_fenetre, "LI_Niveau_Propose" , C_LIB_NIV )

IF ( IS_NULL@(vl_niveau) )
	DB_CTRL_TITLE@( va_fenetre, "LI_Niveau" , "" )
ELSE
	{
	vl_index=ARRAY_INDEX@( ARRAY_COLUMN@ ( vm_liste_niveaux,TDO_NIVEAU_TFM ), vl_niveau )
	if ( vl_index <> -1 )
		DB_CTRL_TITLE@ (va_fenetre, "LI_Niveau", vm_liste_niveaux[vl_index].libelle)
	else
		DB_CTRL_TITLE@ (va_fenetre, "LI_Niveau", "?")
	}


RETURN (COM_OK)

ENDMACRO



/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
*
*  Recherche l'adresse mail de Radio Trafic FM ASF (a Vedene).
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

FUNCTION TFM_Adresse_RTFM_ASF ()

/*
* ARGUMENTS EN ENTREE : Aucun
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         :
*   L'adresse mail de Radio Trafic FM ASF.
*
* CONDITION D'UTILISATION
*   ITMA_TFM_Fiche_Trafic_FM
*
* FONCTION
*   La premiere fois, recherche en base de donnees la fiche annuaire
*   de Radio Trafic FM ASF, et conserve en variable systeme l'adresse mail.
*   Ensuite retourne simplement cette valeur.
*
---------------------------------------------------------------------------- */

    VAR	FORMAT SQL_Procedure_Params@ vl_parametres
    VAR	FORMAT SQL_Procedure_Result@ vl_resultats
    VAR	vl_cr
    VAR	tl_interlocuteurs
    VAR	vl_adresse_mail

/*B Lire la valeur d'adresse mail dans l'environnement */
vl_adresse_mail = SYSTEM_VAR@ (vg_mail_rtfm_asf)


/*B Si la valeur de l'adresse mail n'a pas encore ete obtenue alors */
IF IS_NULL@ (vl_adresse_mail) {
	/*B rechercher la fiche annuaire de RTFM ASF */
	vl_parametres[0].type = SYB#CHAR_
	vl_parametres[0].data = "RADIO VINCI AUTOROUTES 84"
	vl_parametres[0].output = FALSE

	vl_parametres[1].type = SYB#INT1_
	vl_parametres[1].data = NULL		' Indique le CI
	vl_parametres[1].output = FALSE

	vl_cr = COM05_SQL_Procedure (XZAN15_Rechercher_Annuaire, vl_parametres, vl_resultats, C_MODULE)
	IF vl_cr = COM_OK {
		tl_interlocuteurs = vl_resultats.select_results[0]
		/*! la requete est supposee ne retourner qu'une seule fiche ! */
		vl_adresse_mail = TRIM@ (tl_interlocuteurs[0][2])
		SET_SYSTEM_VAR@ (vg_mail_rtfm_asf, vl_adresse_mail)
	}
	IF IS_NULL@ (vl_adresse_mail) {
		INFO_MESSAGE@ ("La fiche annuaire de RVA ASF n'est pas trouvée ou ne peut être lue")
	}
}

RETURN (vl_adresse_mail)

ENDFUNCTION



/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
*  Archive le texte de l'annotation apres enrichissement
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO TFM_Archiver_Annotation (FORMAT COM_Identifiant_FMC va_id_FMC,
				  va_confidentiel, va_message, va_annotation, va_niveau)

/*
* ARGUMENTS EN ENTREE :
*   va_id_FMC         : Identifiant de la FMC (numero et cle evenement) ;
*   va_confidentiel   : Indicateur de confidentialite ;
*   va_message        : Texte du message provenant du SAD (UNE ligne) ;
*   va_annotation     : Texte de l'annotation au format IHM.
*   va_niveau		  : Niveau de qualification
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : COM_OK en cas d'execution correcte, COM_NOK sinon.
*
* CONDITION D'UTILISATION
*   ITMA_TFM_Fiche_Trafic_FM
*
* FONCTION
*   Traduit les textes du message et de l'annotation au format SGBD puis
*   les archive.
*
---------------------------------------------------------------------------- */

    VAR     vl_l_texte				' Texte au format SGBD
    VAR     vl_nb_lignes			' Nombre de lignes de ce texte
    VAR     vl_date_msg				' Date identifiant le message

    VAR FORMAT SQL_Procedure_Params@ vl_parametres
    VAR FORMAT SQL_Procedure_Result@ vl_resultats
    VAR     i


/*B Lire l'horodate courante (en secondes) */
vl_date_msg = COM09_Date_Courante (TRUE)


/*A
 * Traduire les textes du message et de l'annotation
 * au format SGBD et archiver chacun des fragments
 * -------------------------------------------------
 */

/*B Passer le numero de fmc */
vl_parametres[0].type = COM_Numero_Evenement
vl_parametres[0].data = va_id_FMC.numero
vl_parametres[0].output = FALSE

/*B Passer la cle de fmc */
vl_parametres[1].type = COM_Cle_Evenement
vl_parametres[1].data = va_id_FMC.cle
vl_parametres[1].output = FALSE

vl_parametres[2].type = SYB#DATETIME_
vl_parametres[2].data = vl_date_msg
vl_parametres[2].output = FALSE

vl_parametres[3].type = SYB#BIT_			' Indic. msg./annotation
vl_parametres[3].output = FALSE

vl_parametres[4].type = SYB#CHAR_
vl_parametres[4].output = FALSE

vl_parametres[5].type = SYB#INT1_
vl_parametres[5].data = va_niveau
vl_parametres[5].output = FALSE

/*A
 * Traduire et archiver le message
 * -------------------------------
 */

vl_l_texte[0] = va_message
vl_l_texte = COM07_Texte_SGBD (vl_l_texte)
vl_parametres[3].data = XDC_TFM_MESSAGE

vl_nb_lignes = ARRAY_SIZE@(vl_l_texte)
FOR i = 0  TO vl_nb_lignes - 1
    vl_parametres[4].data = vl_l_texte[i]

    IF COM05_SQL_Procedure (XZAI08_Verifier_Bloc_TFM,
			       vl_parametres, vl_resultats, C_MODULE) <> COM_OK
	RETURN (COM_NOK)
NEXT i

/*A
 * Traduire et archiver l'annotation
 * ---------------------------------
 */

vl_l_texte = COM07_Texte_SGBD (va_annotation)
vl_parametres[3].data = XDC_TFM_ANNOTATION

/*B
 * Les trois premiers arguments de la requete
 * sont identiques a ceux de la requete precedente
 * -----------------------------------------------
 */

vl_nb_lignes = ARRAY_SIZE@(vl_l_texte)
FOR i = 0  TO vl_nb_lignes - 1
    vl_parametres[4].data = vl_l_texte[i]

    IF COM05_SQL_Procedure (XZAI08_Verifier_Bloc_TFM,
			       vl_parametres, vl_resultats, C_MODULE) <> COM_OK
	RETURN (COM_NOK)
NEXT i


/*A
 * Finir l'enregistrement en fournissant le caractere de confidentialite
 * ---------------------------------------------------------------------
 */

vl_parametres = NULL

vl_parametres[0].type = COM_Numero_Evenement
vl_parametres[0].data = va_id_FMC.numero
vl_parametres[0].output = FALSE

vl_parametres[1].type = COM_Cle_Evenement
vl_parametres[1].data = va_id_FMC.cle
vl_parametres[1].output = FALSE

vl_parametres[2].type = SYB#BIT_
IF va_confidentiel
    vl_parametres[2].data = XDC_VRAI
ELSE vl_parametres[2].data = XDC_FAUX
vl_parametres[2].output = FALSE

vl_parametres[3].type = SYB#INT1_
vl_parametres[3].output = FALSE
vl_parametres[3].data = va_niveau

vl_parametres[4].type = SYB#DATETIME_
vl_parametres[4].output = FALSE
vl_parametres[4].data = vl_date_msg


IF COM05_SQL_Procedure (XZAI03_Verifier_TFM,
			   vl_parametres, vl_resultats, C_MODULE) <> COM_OK
{
    RETURN (COM_NOK)

}

RETURN (COM_OK)

ENDMACRO



/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
* Creation de l'action trafic fm en base
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ASF_Creer_Action (FORMAT COM_Identifiant_FMC va_id_FMC, va_message ,va_niveau)

/*
* ARGUMENTS EN ENTREE :
*   va_id_FMC         : Identifiant de la FMC (numero et cle evenement) ;
*   va_message        : Texte du message et de l'annotation.
*   va_niveau         : Niveau de qualification.
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : COM_OK en cas d'execution correcte, COM_NOK sinon.
*
*
* CONDITION D'UTILISATION
*   ITMA_TFM_Fiche_Trafic_FM
*
* FONCTION
* insertion ds table FMC_TFM, creation de l'action TFM ds ACT_GEN avec
* insert de heure_lancement ET heure_succes (XZAC190)
* insertion du texte formate par morceau ds ACT_TXT_TFM (XZAC200)
*
---------------------------------------------------------------------------- */

	VAR	vl_contenu_message			' Contenu textuel formate
	VAR	tl_texte				' Texte formate pour le SGBD
	VAR	vl_nb_lignes				' Nombre de lignes de ce texte
	VAR	vl_proprietes				' Attributs du message

	VAR     vl_le_site

	VAR FORMAT SQL_Procedure_Params@ vl_parametres
	VAR FORMAT SQL_Procedure_Result@ vl_resultats
	VAR     i

/* Extraire le contenu alphabetique du texte et le comparer au contenu du message initial */
vl_contenu_message = TFM_Extrait_Texte_Formate (ARRAY_TO_STRING@ (va_message, ""))
vl_proprietes = 0
IF vl_contenu_message <> vm_message_initial {
	vl_proprietes = XDC_TFM_MSG_MODIFIE
}

vl_le_site = SYSTEM_VAR@ (vg_site)

/*A
 * Creer une nouvelle action et obtenir son numero
 * -----------------------------------------------
 */

vm_num_action = 0

vl_parametres[0].type = COM_Numero_Evenement
vl_parametres[0].data = va_id_FMC.numero
vl_parametres[0].output = FALSE

vl_parametres[1].type = COM_Cle_Evenement
vl_parametres[1].data = va_id_FMC.cle
vl_parametres[1].output = FALSE

vl_parametres[2].type = COM_Identifiant_Action          ' Numero d'action
vl_parametres[2].data = NULL
vl_parametres[2].output = FALSE

vl_parametres[3].type = COM_Identifiant_District        ' Site action
vl_parametres[3].data = vl_le_site
vl_parametres[3].output = FALSE

vl_parametres[4].type = SYB#INT1_
vl_parametres[4].data = va_niveau
vl_parametres[4].output = FALSE

vl_parametres[5].type = SYB#DATETIME_
vl_parametres[5].data = COM09_Date_Courante(TRUE)
vl_parametres[5].output = FALSE

vl_parametres[6].type = SYB#DATETIME_
vl_parametres[6].data = NULL
vl_parametres[6].output = FALSE

vl_parametres[7].type = COM_Identifiant_Operateur
vl_parametres[7].data = SYSTEM_VAR@ (vg_numero_operateur)
vl_parametres[7].output = FALSE

vl_parametres[8].type = COM_Identifiant_Action_TFM      ' Numero d'action creee
vl_parametres[8].output = TRUE

vl_parametres[9].type = SYB#INT1_
vl_parametres[9].data = vl_proprietes
vl_parametres[9].output = FALSE

vl_parametres[10].type = SYB#CHAR_                               ' Site local
vl_parametres[10].data = SYSTEM_VAR@(vg_nom_site)
vl_parametres[10].output = FALSE

IF COM05_SQL_Procedure (XZAC190_Action_TFM,
				vl_parametres, vl_resultats, C_MODULE) <> COM_OK
	RETURN (COM_NOK)

vm_num_action = vl_resultats.return_parameters[0]


/*A
* Formater ensuite le texte en segments de longueur fixe,
* puis inserer les segments sous le numero d'action obtenu
* --------------------------------------------------------
*/

tl_texte = COM07_Texte_SGBD (va_message)

vl_parametres = NULL

vl_parametres[0].type = COM_Identifiant_Action
vl_parametres[0].data = vm_num_action
vl_parametres[0].output = FALSE

vl_parametres[1].type = COM_Identifiant_District
vl_parametres[1].data = vl_le_site
vl_parametres[1].output = FALSE

vl_parametres[2].type = SYB#CHAR_
vl_parametres[2].output = FALSE

vl_parametres[3].type = SYB#BIT_
vl_parametres[3].data = XDC_FAUX
vl_parametres[3].output = FALSE

vl_parametres[4].type = SYB#CHAR_                               ' Site local
vl_parametres[4].data = SYSTEM_VAR@(vg_nom_site)
vl_parametres[4].output = FALSE


vl_nb_lignes = ARRAY_SIZE@(tl_texte)
FOR i = 0  TO vl_nb_lignes - 1
  vl_parametres[2].data = tl_texte[i]
  
  IF COM05_SQL_Procedure (XZAC200_Texte_TFM,
				vl_parametres, vl_resultats, C_MODULE) <> COM_OK

	RETURN (COM_NOK)
NEXT i

RETURN (COM_OK)

ENDMACRO



/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
*  Envoie le message au poste TFM
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO TFM_Envoyer_Message_TFM (FORMAT COM_Identifiant_FMC va_id_FMC, va_message,va_niveau)

/*
* ARGUMENTS EN ENTREE :
*   va_id_FMC         : Identifiant de la FMC (numero et cle evenement) ;
*   va_message        : Texte du message et de l'annotation.
*   va_niveau        : Niveau de qualification.
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : COM_OK en cas d'execution correcte, COM_NOK sinon.
*
* CONDITION D'UTILISATION
*   ITMA_TFM_Fiche_Trafic_FM
*
* FONCTION
*   Envoie les informations (message et annotation) au poste TFM.
*
---------------------------------------------------------------------------- */

    VAR     vl_contenu_message			' Contenu textuel formate
    VAR     tl_texte				' Texte formate pour le SGBD
    VAR     vl_nb_lignes			' Nombre de lignes de ce texte
    VAR     vl_proprietes			' Attributs du message

    VAR     vl_le_site
    VAR     vl_num_action			' Numero de l'action creee

    VAR FORMAT SQL_Procedure_Params@ vl_parametres
    VAR FORMAT SQL_Procedure_Result@ vl_resultats
    VAR     i

/* Extraire le contenu alphabetique du texte et le comparer au contenu du message initial */
vl_contenu_message = TFM_Extrait_Texte_Formate (ARRAY_TO_STRING@ (va_message, ""))
vl_proprietes = 0
IF vl_contenu_message <> vm_message_initial {
	vl_proprietes = XDC_TFM_MSG_MODIFIE
}


vl_le_site = SYSTEM_VAR@ (vg_site)

/*A
 * Creer une nouvelle action et obtenir son numero
 * -----------------------------------------------
 */

vl_parametres[0].type = COM_Numero_Evenement
vl_parametres[0].data = va_id_FMC.numero
vl_parametres[0].output = FALSE

vl_parametres[1].type = COM_Cle_Evenement
vl_parametres[1].data = va_id_FMC.cle
vl_parametres[1].output = FALSE

vl_parametres[2].type = COM_Identifiant_Action		' Numero d'action
vl_parametres[2].data = NULL
vl_parametres[2].output = FALSE

vl_parametres[3].type = COM_Identifiant_District	' Site action
vl_parametres[3].data = vl_le_site
vl_parametres[3].output = FALSE

vl_parametres[4].type = SYB#INT1_
vl_parametres[4].data = va_niveau
vl_parametres[4].output = FALSE

vl_parametres[5].type = SYB#DATETIME_
vl_parametres[5].data = COM09_Date_Courante(TRUE)
vl_parametres[5].output = FALSE

vl_parametres[6].type = SYB#DATETIME_
vl_parametres[6].data = NULL
vl_parametres[6].output = FALSE

vl_parametres[7].type = COM_Identifiant_Operateur
vl_parametres[7].data = SYSTEM_VAR@ (vg_numero_operateur)
vl_parametres[7].output = FALSE

vl_parametres[8].type = COM_Identifiant_Action_TFM	' Numero d'action creee
vl_parametres[8].output = TRUE

vl_parametres[9].type = SYB#INT1_
vl_parametres[9].data = vl_proprietes
vl_parametres[9].output = FALSE

vl_parametres[10].type = SYB#CHAR_                               ' Site local
vl_parametres[10].data = SYSTEM_VAR@(vg_nom_site)
vl_parametres[10].output = FALSE

IF COM05_SQL_Procedure (XZAC19_Ecrire_Action_TFM,
			   vl_parametres, vl_resultats, C_MODULE) <> COM_OK
    RETURN (COM_NOK)

vl_num_action = vl_resultats.return_parameters[0]


/*A
 * Formater ensuite le texte en segments de longueur fixe,
 * puis inserer les segments sous le numero d'action obtenu
 * --------------------------------------------------------
 */

tl_texte = COM07_Texte_SGBD (va_message)

vl_parametres = NULL

vl_parametres[0].type = COM_Identifiant_Action
vl_parametres[0].data = vl_num_action
vl_parametres[0].output = FALSE

vl_parametres[1].type = COM_Identifiant_District
vl_parametres[1].data = vl_le_site
vl_parametres[1].output = FALSE

vl_parametres[2].type = SYB#CHAR_
vl_parametres[2].output = FALSE

vl_parametres[3].type = SYB#BIT_
vl_parametres[3].data = XDC_FAUX
vl_parametres[3].output = FALSE

vl_parametres[4].type = SYB#CHAR_                               ' Site local
vl_parametres[4].data = SYSTEM_VAR@(vg_nom_site)
vl_parametres[4].output = FALSE

vl_nb_lignes = ARRAY_SIZE@(tl_texte)
FOR i = 0  TO vl_nb_lignes - 1
    vl_parametres[2].data = tl_texte[i]
    IF  i = (vl_nb_lignes - 1)
	vl_parametres[3].data = XDC_VRAI

    IF COM05_SQL_Procedure (XZAC20_Ecrire_Texte_TFM,
			       vl_parametres, vl_resultats, C_MODULE) <> COM_OK
	RETURN (COM_NOK)
NEXT i


RETURN (COM_OK)

ENDMACRO



/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
*  Envoie un message de fin de diffusion au poste TFM.
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO TFM_Finir_Message_TFM (FORMAT TMC_actionFiche va_2, va_niveau)

/*
* ARGUMENTS EN ENTREE :
*   va_niveau        : Niveau de qualification.
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : COM_OK en cas d'execution correcte, COM_NOK sinon.
*
* CONDITION D'UTILISATION
*   ITMA_TFM_Fiche_Trafic_FM
*
* FONCTION
*   Termine une action Trafic FM.
*
---------------------------------------------------------------------------- */

    VAR FORMAT SQL_Procedure_Params@ vl_parametres
    VAR FORMAT SQL_Procedure_Result@ vl_resultats


/*A
 * Preparation des parametres d'appel a XZAC19_Ecrire_Action_TFM
 * -------------------------------------------------------------
 */

/* Numero de la FMC */
vl_parametres[0].type = COM_Numero_Evenement
vl_parametres[0].data = va_2.numero_fiche
vl_parametres[0].output = FALSE

/* Cle de la FMC */
vl_parametres[1].type = COM_Cle_Evenement
vl_parametres[1].data = va_2.cle_fiche
vl_parametres[1].output = FALSE

/* Numero de l'action */
vl_parametres[2].type = COM_Identifiant_Action
vl_parametres[2].data = va_2.numero_action
vl_parametres[2].output = FALSE

/* Cle de l'action */
vl_parametres[3].type = COM_Identifiant_District
vl_parametres[3].data = va_2.cle_action
vl_parametres[3].output = FALSE

vl_parametres[4].type = SYB#INT1_
vl_parametres[4].data = va_niveau
vl_parametres[4].output = FALSE

/* Heure de lancement */
vl_parametres[5].type = SYB#DATETIME_
vl_parametres[5].output = FALSE

/* Heure de fin d'action (maintenant) */
vl_parametres[6].type = SYB#DATETIME_
vl_parametres[6].data = COM09_Date_Courante(TRUE)
vl_parametres[6].output = FALSE

/* Identifiant de l'operateur */
vl_parametres[7].type = COM_Identifiant_Operateur
vl_parametres[7].data = SYSTEM_VAR@(vg_numero_operateur)
vl_parametres[7].output = FALSE

/* Numero d'action en retour */
vl_parametres[8].type = COM_Identifiant_Action_TFM
vl_parametres[8].output = TRUE

/* Proprietes attachees au message (aucune) */
vl_parametres[9].type = SYB#INT1_
vl_parametres[9].data = 0
vl_parametres[9].output = FALSE

vl_parametres[10].type = SYB#CHAR_                               ' Site local
vl_parametres[10].data = SYSTEM_VAR@(vg_nom_site)
vl_parametres[10].output = FALSE

IF COM05_SQL_Procedure (XZAC19_Ecrire_Action_TFM,
			   vl_parametres, vl_resultats, C_MODULE) <> COM_OK
    RETURN (COM_NOK)

ENDMACRO



/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
*  Calcul les consignes pour l'animateur.
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO TFM_Calcul_Consignes (va_fenetre, va_niveau)

/*
* ARGUMENTS EN ENTREE :
*   va_fenetre        : Id. de la fenetre ;
*   va_nniveau     : Numero de l'action ;
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Indefini
*
* CONDITION D'UTILISATION
*   ITMA_TMA_Msg_Animateur_TFM
*
* FONCTION
*
---------------------------------------------------------------------------- */


VAR vl_couleur, vl_mode1, vl_mode2, vl_zone, vl_zone1, vl_zone2, vl_t, vl_ta
VAR vl_index, vl_indexTA, vl_indice, vl_indice_trc, i ,j,vl_taille, vl_taille2, vl_arret, vl_arret_TA, vl_trc, vl_ligne, vl_valeur, vl_prefixe, vl_prefixeta,
	vl_table,tl_couleur, vl_texte_niveau

/*A S'il n'y a pas de niveau de message TFM alors on vide les champs */
IF ( ( IS_NULL@(va_niveau) 	) OR (va_niveau = XDC_SANS_NTFMAX) ){
DB_CTRL_TITLE@(va_fenetre, "LI_Niveau", "")
DB_CTRL_TITLE@(va_fenetre, "LI_Mode1", "")
DB_CTRL_TITLE@(va_fenetre, "LI_Mode2", "")
DB_CTRL_TITLE@(va_fenetre, "LI_Zone1", "")
DB_CTRL_TITLE@(va_fenetre, "LI_Zone2", "")
DB_CTRL_TITLE@(va_fenetre, "LI_T", "")
TFM_Coloriage( va_fenetre , "noir" )
}
/*A Sinon, calcul des consignes */
ELSE {
	/*B Calcul de la couleur */
	DB_CTRL_TITLE@(va_fenetre, "LI_T", "")
	vl_index=ARRAY_INDEX@( ARRAY_COLUMN@ ( vm_F_mode, TMA_NIVEAU ), va_niveau )
	if ( vl_index <> -1 )
		vm_lib_niv= vm_F_mode[vl_index,TMA_LIB_NIV]
	else
		vm_lib_niv=	"?"


	if (vl_index=-1)
		vl_couleur=vm_F_mode[0,TMA_COULEUR]
	else
		vl_couleur=vm_F_mode[vl_index,TMA_COULEUR]

	/*B Calcul des modes de diffusion */
	if (vl_index=-1)
		vl_index=0
	vl_mode1=vm_F_mode[vl_index,TMA_MODE1]
	vl_mode2=vm_F_mode[vl_index,TMA_MODE2]

	DB_CTRL_TITLE@(va_fenetre, "LI_Mode1", vl_mode1)
	DB_CTRL_TITLE@(va_fenetre, "LI_Mode2", vl_mode2)

   /*si niveau > 1 alors affichage toutes zones donc pas de calcul*/
   IF (vl_index <= 1)
   {
	/*B Recherche des tronçons */
	vl_indice_trc=0
	IF  IS_NULL@(vm_PRfin)
		vm_PRfin = vm_PRdebut

	FOR j = 0 to ARRAY_SIZE@(vm_aut)-1
	  FOR i = 0 to ARRAY_SIZE@(vm_F_troncon_TFM)-1
		IF ( vm_F_troncon_TFM[i,TMA_AUT] = vm_aut[j] ) AND
		   ((( vm_F_troncon_TFM[i,TMA_PRDEB] <= vm_PRdebut[j]) AND 
			( vm_F_troncon_TFM[i,TMA_PRFIN] >= vm_PRdebut[j]) )
		    OR
		    (( vm_F_troncon_TFM[i,TMA_PRDEB] <= vm_PRfin[j]) AND 
			( vm_F_troncon_TFM[i,TMA_PRFIN] >= vm_PRfin[j]) )
		    )
		{
			vl_trc[vl_indice_trc,0] = vm_F_troncon_TFM[i,TMA_TRC]
			vl_trc[vl_indice_trc,1] = vm_sens[j]
			vl_indice_trc=vl_indice_trc+1
		}
	  NEXT i
     NEXT j

	/*B Calcul des zones de diffusion */
	vl_indice=0
     IF ( vl_indice_trc>0)
		vl_taille2 = ARRAY_SIZE@(vl_trc) -1
	ELSE
		vl_taille2 = -1	
	for i = 0 to ARRAY_SIZE@(vm_F_zone_diff)-1
        for j = 0 to vl_taille2
		
		IF ( (ARRAY_INDEX@(vm_F_zone_diff[i],vl_trc[j,0])<>-1)
				AND ( ARRAY_INDEX@(vm_F_zone_diff[i],vl_trc[j,1])<>-1))
				AND ( ARRAY_INDEX@(vl_zone,vm_F_zone_diff[i,TMA_ZONE]) = -1 )
				{
				vl_zone[vl_indice]=vm_F_zone_diff[i,TMA_ZONE]
				vl_indice=vl_indice+1
				}
			
        next j
	next i

	DB_CTRL_TITLE@(va_fenetre, "LI_Zone1", "")
	DB_CTRL_TITLE@(va_fenetre, "LI_Zone2", "")
	IF ( vl_indice > 0 ) {
		DB_CTRL_TITLE@(va_fenetre, "LI_Zone1", vl_zone[0])
		vl_zone2=""
		FOR i = 1 to ARRAY_SIZE@(vl_zone)-1
			vl_zone2=vl_zone2 ++ vl_zone[i] ++ "  "
		NEXT i
		DB_CTRL_TITLE@(va_fenetre, "LI_Zone2", vl_zone2)
		}
  } /* fin si niveau <= 1 */
  ELSE
  {
	DB_CTRL_TITLE@(va_fenetre, "LI_Zone1", "Z1")
	DB_CTRL_TITLE@(va_fenetre, "LI_Zone2", "Z2")
  }
	
	/*B Calcul des periodes de diffusions */
	vl_index = ARRAY_INDEX@(vm_F_periode_diff[0], va_niveau )
	if (vl_index=-1)
		vl_index=0
	vl_indexTA = ARRAY_INDEX@(vm_F_periode_diff[0], va_niveau )
	if (vl_indexTA=-1)
		vl_indexTA=0
	vl_t=TMA_MAX_PERIODE
	vl_ta=TMA_MAX_PERIODE
	vl_arret=FALSE
	vl_arret_TA=FALSE
	vl_prefixe="mn"
	vl_prefixeta="mn"
	for i = 0 to vl_taille2
		IF vl_arret=FALSE
		{
		vl_indice = ARRAY_INDEX@(ARRAY_COLUMN@(vm_F_periode_diff,TMA_TRC), 		
							vl_trc[i,0])
		IF ( vl_indice <> -1 )
			{
			vl_valeur=vm_F_periode_diff[vl_indice,vl_index]
			IF ( IS_NUMERIC_STRING@(vl_valeur) )
				{
				vl_valeur=vl_valeur+0
				IF ( vl_valeur < vl_t )
					vl_t=vl_valeur
				}
			ELSE
				{
				vl_t=vl_valeur
				vl_prefixe=""
				vl_arret=TRUE
				}
			}
		}
		IF vl_arret_TA=FALSE
		{
		vl_indice = ARRAY_INDEX@(ARRAY_COLUMN@(vm_F_periode_diffTA,TMA_TRC), 		
							vl_trc[i,0])
		IF ( vl_indice <> -1 )
			{
			vl_valeur=vm_F_periode_diffTA[vl_indice,vl_indexTA]
			IF ( IS_NUMERIC_STRING@(vl_valeur) )
				{
				vl_valeur=vl_valeur+0
				IF ( vl_valeur < vl_ta )
					vl_ta=vl_valeur
				}
			ELSE
				{
				vl_ta=vl_valeur
				vl_prefixeta=""
				vl_arret_TA=TRUE
				}
			}
		}
		
	next i

	IF ( vl_t=TMA_MAX_PERIODE ) {
		vl_prefixe=""
		vl_t=""
	}
	IF ( vl_ta=TMA_MAX_PERIODE ) {
		vl_prefixeta=""
		vl_ta=""
	}

	vm_periodes = "( T = "++vl_t++" "++vl_prefixe++"; T-TA = "
++vl_ta++" "++vl_prefixeta++" )"
	DB_CTRL_TITLE@(va_fenetre, "LI_Niveau",vm_lib_niv ++ "     " ++ vm_periodes)

	/*B Mise en couleur */

	TFM_Coloriage( va_fenetre , vl_couleur )
}


RETURN (COM_OK)

ENDMACRO



/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
*  Calcul les consignes pour l'animateur.
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO TFM_Coloriage (va_fenetre, va_couleur)

/*
* ARGUMENTS EN ENTREE :
*   va_fenetre        : Id. de la fenetre ;
*   va_couleur     : chaine de cars decrivant la couleur ;
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Indefini
*
* CONDITION D'UTILISATION
*   ITMA_TMA_Msg_Animateur_TFM
*
* FONCTION
*
---------------------------------------------------------------------------- */

VAR tl_couleur, vl_couleur, vl_index
	

	/*A Recherche de la couleur */
	vl_index=ARRAY_INDEX@(ARRAY_COLUMN@(vm_couleur,TMA_NOM_COUL),va_couleur)

	/*A Si la couleur n'est ni rouge vert bleu ou noir alors par defaut c'est noir */
	if ( vl_index = -1 )
		vl_index=0

	vl_couleur = vm_couleur[vl_index,TMA_RGB]
	tl_couleur[0]= 1
	tl_couleur[1]=vl_couleur

	DB_CTRL_LABEL_COLOR@(va_fenetre, "LI_Niveau", tl_couleur)
	DB_CTRL_LABEL_COLOR@(va_fenetre, "LI_Mode1", tl_couleur)
	DB_CTRL_LABEL_COLOR@(va_fenetre, "LI_Mode2", tl_couleur)
	DB_CTRL_LABEL_COLOR@(va_fenetre, "LI_Zone1", tl_couleur)
	DB_CTRL_LABEL_COLOR@(va_fenetre, "LI_Zone2", tl_couleur)
	DB_CTRL_LABEL_COLOR@(va_fenetre, "LI_T", tl_couleur)

	DB_CTRL_LABEL_COLOR@(va_fenetre, "LI_NIVEAU_MESSAGE", tl_couleur)
	DB_CTRL_LABEL_COLOR@(va_fenetre, "LI_ZONES", tl_couleur)
	DB_CTRL_LABEL_COLOR@(va_fenetre, "LI_Libelle_MODE", tl_couleur)


RETURN (COM_OK)

ENDMACRO



/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
*  Recherche des PR de la FMC .
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO TFM_PR_FMC ( va_numevt, va_cleevt)

/*
* ARGUMENTS EN ENTREE :
*   va_numevt     : Numero de l'action ;
*   va_cleevt     : Identifiant su site.
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Indefini
*
* CONDITION D'UTILISATION
*   ITMA_TMA_Msg_Animateur_TFM
*
* FONCTION
*   Lit en base de donnees la FMC et memorise les pr et l'autoroute.
*
---------------------------------------------------------------------------- */

    	VAR     vl_l_texte					' Message(liste chaines)

    	VAR FORMAT SQL_Procedure_Params@ vl_parametres
    	VAR FORMAT SQL_Procedure_Result@ vl_resultats
	VAR FORMAT TMA_Localisations_Message_TFM vl_data
	VAR i

vl_parametres[0].type = SYB#INT4_
vl_parametres[0].data = va_numevt
vl_parametres[0].output = FALSE

vl_parametres[1].type = SYB#INT2_
vl_parametres[1].data = va_cleevt
vl_parametres[1].output = FALSE


IF COM05_SQL_Procedure (XZAE111_Lire_Localisation_FMC,
			   vl_parametres, vl_resultats, C_MODULE) <> COM_OK
    RETURN (COM_NOK)


vl_data = vl_resultats.select_results[0]

FOR i = 0  TO ARRAY_SIZE@ (vl_data) - 1
    vm_aut[i] = TRIM@( vl_data[i].autoroute )
    /* DEM457: Attention valable pour A8 uniquement */
    vm_sens[i] = vl_data[i].sens
    IF (vm_sens[i]=3) vm_sens[i]=1
    IF (vm_sens[i]=4) vm_sens[i]=2
    IF (vm_sens[i]=7) vm_sens[i]=1
    IF (vm_sens[i]=8) vm_sens[i]=2
    vm_PRdebut[i] = vl_data[i].pr_debut
    vm_PRfin[i] = vl_data[i].pr_fin
NEXT i

RETURN (COM_OK)

ENDMACRO




/*X*/
/* ----------------------------------------------------------------------------
* SERVICE RENDU :
*
*  Extrait d'un texte le contenu purement alphabétique formaté.
-------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

FUNCTION TFM_Extrait_Texte_Formate (va_texte)

/*
* ARGUMENTS EN ENTREE :
*   va_texte          : le texte complet.
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* VALEUR RETOURNEE    :
*   Le contenu alphabétique extrait du texte, sans accents et en majuscules.
*
* CONDITION D'UTILISATION
*   ITMA_TFM_Fiche_Trafic_FM
*
* FONCTION
*   Supprime du texte initial, en majuscules et sans espaces, certaines
*   portions de texte usuellement incluses dans un message RVA
*   afin de les ignorer dans la comparaison de textes.
*   Ensuite retourne simplement cette valeur.
*
---------------------------------------------------------------------------- */

	VAR	vl_texte, vl_texte2
	VAR	vl_citation, vl_extrait
	VAR	vl_car, vl_a_substituer, vl_substituants
	VAR	vl_idx, vl_idx2

vl_texte = UPPERCASE@ (REPLACE_SUBSTR@ (va_texte, " ", ""))

/*A Substituer les caracteres accentues (AVANT la recherche de motifs) */
vl_a_substituer = "ÀÂÄÉÈÊËÎÏÔÖÙÛÜ"
vl_substituants = "AAAEEEEIIOOUUU"

vl_texte2 = ""
FOR vl_idx = 1  TO LEN@ (vl_texte)
	vl_car = SUBSTRING@ (vl_texte, vl_idx, 1)
	vl_idx2 = STRING_INDEX@ (vl_a_substituer, vl_car)
	IF vl_idx2 > 0 {
		vl_car = SUBSTRING@ (vl_substituants, vl_idx2, 1)
	}
	vl_texte2 = vl_texte2 ++ vl_car
NEXT vl_idx
vl_texte = vl_texte2


/*A Rechercher et supprimer la mention d'émetteur en fin de message */
vl_idx = STRING_INDEX@ (vl_texte, "CENTREINFORMATIONTRAFICLE")
IF vl_idx > 0 {
	vl_texte = SUBSTRING@ (vl_texte, 1, vl_idx - 1)
}


/*A Rechercher et supprimer la mention de citations additionnelles */
vl_citation = "ECHANGEURSETBARRIERESFERMES:"
vl_idx = STRING_INDEX@ (vl_texte, vl_citation)
IF vl_idx > 0 {
        vl_texte = SUBSTRING@ (vl_texte, 1, vl_idx - 1) ++ SUBSTRING@ (vl_texte, vl_idx + LEN@ (vl_citation))
}

vl_citation = "SERVICESSURPLACE:"
vl_idx = STRING_INDEX@ (vl_texte, vl_citation)
IF vl_idx > 0 {
	vl_texte = SUBSTRING@ (vl_texte, 1, vl_idx - 1) ++ SUBSTRING@ (vl_texte, vl_idx + LEN@ (vl_citation))
}

vl_citation = "VOIESRESTANTES:"
vl_idx = STRING_INDEX@ (vl_texte, vl_citation)
IF vl_idx > 0 {
	vl_texte = SUBSTRING@ (vl_texte, 1, vl_idx - 1) ++ SUBSTRING@ (vl_texte, vl_idx + LEN@ (vl_citation))
}

vl_citation = "VOIESIMPACTEES:"
vl_idx = STRING_INDEX@ (vl_texte, vl_citation)
IF vl_idx > 0 {
	vl_texte = SUBSTRING@ (vl_texte, 1, vl_idx - 1) ++ SUBSTRING@ (vl_texte, vl_idx + LEN@ (vl_citation))
}

vl_citation = "BILANMATERIEL:"
vl_idx = STRING_INDEX@ (vl_texte, vl_citation)
IF vl_idx > 0 {
	vl_texte = SUBSTRING@ (vl_texte, 1, vl_idx - 1) ++ SUBSTRING@ (vl_texte, vl_idx + LEN@ (vl_citation))
}


/*A Extraire les caracteres alphanumeriques */
vl_extrait = ""
FOR vl_idx = 1  TO LEN@ (vl_texte)
	vl_car = SUBSTRING@ (vl_texte, vl_idx, 1)
	IF ( ((vl_car >>= "A")  AND  (vl_car <<= "Z"))  OR
	     ((vl_car >>= "0")  AND  (vl_car <<= "9")) )
	{
		vl_extrait = vl_extrait ++ vl_car
	}
NEXT vl_idx

RETURN (vl_extrait)

ENDFUNCTION
