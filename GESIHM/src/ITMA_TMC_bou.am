/*E*/
/* Fichier : $Id: ITMA_TMC_bou.am,v 1.21 2020/11/03 17:43:13 pc2dpdy Exp $		  Release :$Revision: 1.21 $	   Date : $Date: 2020/11/03 17:43:13 $
-----------------------------------------------------------------------
*  GTIE  *  PROJET MIGRAZUR
-----------------------------------------------------------------------
*  SOUS-SYSTEM GESIHM
-----------------------------------------------------------------------
*  MODULE MTMC  *  Fichier ITMA_TMC_bou.am
-----------------------------------------------------------------------
*  DESCRIPTION DU MODULE :
* affiche les controles specifiques au type bouchon
* gere les actions sur ces controles
*
-----------------------------------------------------------------------
*  HISTORIQUE :
*
*  Guilhou	24 Oct 1994	1.1	: Création
*  Torregrossa	27 Nov 1995	1.11	: Modif acces valeur type trafic 
*  Torregrossa	25 Oct 1996	1.12	: Suppression define format TMC_bou (IHM7) (1250)
*  Niepceron	08 Jan 1998	1.13	: Modif datex dem/1723
*  Niepceron	02 Mar 2005	: Ajout type accordeon DEM428  v1.15
*  Lizot        14 Avr 2004     1.16    : Gestion du droit de propriete ESCOTA/DDE83 (SAGA)
*  Lecrivain	23 Mar 2007	: Afficher/effacer champs pour retypage (dem/637) 1.16
*  Lecrivain	09 Sep 2008	: Gestion case a cocher 'Associer camera' (DEM 807) 1.17
*  Lecrivain	20 Nov 2009	: Types bouchons (trafic) en var. globales, lus en base une fois 1.18
*  Lecrivain	23 Nov 2009	: Ajout macros d'affichage / saisie / controles (vides) 1.19
*  Niepceron	20 Oct 2017	: Patch sur visibilité de bouton 1.20
* LCL   22/04/20        : MOVIS Ajout site local pilotage DEM-SAE93
-----------------------------------------------------------------------
*/

/*A Déclaration des fichiers à inclure */
INCLUDE	"dbase_.am"

INCLUDE	"XDMICG/inc/xdc_ax.h"
INCLUDE	"XDMICG/inc/xzaec_ax.h"
INCLUDE	"XDMICG/inc/xzic_ax.h"

INCLUDE	"GESIHM/inc/ITMA_COM.h"
INCLUDE	"GESIHM/inc/ITMA_TDO.h"
INCLUDE	"GESIHM/inc/ITMA_TAR.h"
INCLUDE	"GESIHM/inc/ITMA_TMC.h"
INCLUDE 	"GESIHM/inc/xzae60sp.h"
INCLUDE 	"GESIHM/inc/xzae51sp.h"


/*A Définition des constantes */

DEFINE	C_MODULE	"MTMC"		' Nom du module


VAR	FORMAT TDO_Libelle_Predefini	tm_types_bouchon
VAR	FORMAT TDO_Libelle_Predefini	tm_types_bouchon_valide


/*X*/
/* -----------------------------------------------------------------------
* SERVICE RENDU :
* affiche les controles specifiques au type bouchon
*
-----------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TMC_bou (va_fenetre, va_type_fmc, va_visible)

/*
* ARGUMENTS EN ENTREE :
*  va_fenetre         : id de la boite de dialogue ou afficher les champs
*  va_type_fmc        : type de la fmc
*  va_visible         : indicateur de visibilite demandee
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Indefini
*
* CONDITION D'UTILISATION
*   MTMT
*
* FONCTION
--------------------------------------------------------------------- */
VAR tl_controles
VAR vl_indice
VAR vl_fenetre
VAR vl_droits


/*A Traitements en cas d'erreur durant l'initialisation :
*   informer l'operateur, tracer l'erreur et abandonner
* ------------------------------------------------------*/
ON ERROR 
{
	ERROR_BOX@
	COM01_Trace (COM_WARNING, COM03_Message_Erreur (C_MODULE))
	RETURN
}

vl_fenetre = va_fenetre


ITMA_TMC_bou_init (vl_fenetre)


/*A rendre visibles ou masquer les champs associes au type fmc */

/* Modif SAGA : la visibilte depend du droit de propriete */
vl_droits = SYSTEM_VAR@ (vg_datex_propriete)

/* Champs visibles, grises sans droit de propriete */
tl_controles = {
	/* donnees de l'application */
	"BO_typetrafic",
	"BE_local_tetebou",
	"LI_titrelongueurbou",
	"LI_longueurbou",
	"PA_longueurbou"
}
FOR vl_indice = 0 TO ARRAY_SIZE@ (tl_controles) - 1
	DB_CTRL_DISPLAY@ (vl_fenetre, tl_controles[vl_indice], va_visible)
	DB_CTRL_GRAYED@ (vl_fenetre, tl_controles[vl_indice],
			     FALSE )
NEXT vl_indice


/* Champs non visibles sans droit de propriete */
tl_controles = {
	"BP_local_tetebou"
}
IF (SYSTEM_VAR@ (vg_site) <> XDC_CI) {
	tl_controles[ARRAY_SIZE@ (tl_controles)] = "BA_associer_camera"
}
FOR vl_indice = 0 TO ARRAY_SIZE@ (tl_controles) - 1
	DB_CTRL_DISPLAY@ (vl_fenetre, tl_controles[vl_indice],
			     va_visible AND (vl_droits = XDC_VRAI))
NEXT vl_indice

RETURN (vl_fenetre)

ENDMACRO




/*X*/
/* ---------------------------------------------------------------------------------
* SERVICE RENDU :
*
*  Initialiser certaines données et champs specifiques des FMC
*   de classe Bouchon.
*
------------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TMC_bou_init (va_fenetre)

VAR	vl_marque

/*B Initialisations a effectuer a chaque ouverture de la fenetre FMC au moins */
vl_marque = DB_CTRL_GET_CLIENT_DATA@ (va_fenetre, "BO_typetrafic")
IF IS_NULL@ (vl_marque) {
	DB_CTRL_CLIENT_DATA@ (va_fenetre, "BO_typetrafic", "Initialise")

	tm_types_bouchon	= SYSTEM_VAR@ (vg_types_bouchon)
	tm_types_bouchon_valide	= SYSTEM_VAR@ (vg_types_bouchon_valide)

	/*B Lire en base de donnees les types de bouchon DEM428 */
	IF (ARRAY_SIZE@ (tm_types_bouchon) = 0) {
		COM37_Lit_Libelles_Predefinis (TYP_BOUCHON, tm_types_bouchon, tm_types_bouchon_valide)
		SET_SYSTEM_VAR@ (vg_types_bouchon, tm_types_bouchon)
		SET_SYSTEM_VAR@ (vg_types_bouchon_valide, tm_types_bouchon_valide)
	}

	DB_CTRL_STRINGS@ (va_fenetre, "BO_typetrafic",
	                     ARRAY_COLUMN@ (tm_types_bouchon, TDO_TEXTE_LIBELLE))
}

ENDMACRO




/*X*/
/* -----------------------------------------------------------------------
* SERVICE RENDU :
* sauve en base les informations specifiques du type bouchon
*
* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
* CODE NON UTILISE VOIR ITMA_TMC_valide_comp_bouchon
*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
-----------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TMC_bou_sauve (FORMAT COM_Identifiant_FMC ta_num_evt, FORMAT TMC_bouchon va_tampon,va_mode,va_horodate,va_fenetre)

/*
* ARGUMENTS EN ENTREE :
* ta_num_evt		: numero et cle d'evenement
* va_tampon		: valeurs des controles
* va_mode			: prevision, traiter, clos
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Indefini
*
* CONDITION D'UTILISATION
*   MTMT
*
* FONCTION
--------------------------------------------------------------------- */
VAR FORMAT SQL_Procedure_Params@	vl_parametres	
VAR FORMAT SQL_Procedure_Result@	vl_resultats
VAR vl_indice
VAR tm_valeurs_type_trafic

/*A Traitements en cas d'erreur durant l'initialisation :
*   informer l'operateur, tracer l'erreur et abandonner
* ------------------------------------------------------*/
ON ERROR 
{
    ERROR_BOX@
    COM01_Trace (COM_WARNING, COM03_Message_Erreur (C_MODULE))
    RETURN
}
	vl_indice=0
	/*A preparation des parametres de la procedure stockee*/
	vl_parametres[vl_indice].data=ta_num_evt.numero
	vl_parametres[vl_indice].type=SYB#INT4_
	vl_parametres[vl_indice].output=FALSE
	vl_indice=vl_indice+1

	vl_parametres[vl_indice].data=ta_num_evt.cle
	vl_parametres[vl_indice].type=SYB#INT4_
	vl_parametres[vl_indice].output=FALSE
	vl_indice=vl_indice+1

	/*Ecriture en base du code type bouchon a partir du libelle DEM428 */
	vl_parametres[vl_indice].data=tm_types_bouchon[DB_CTRL_GET_VALUE@(va_fenetre,"BO_typetrafic")].code
INFO_MESSAGE@(vl_parametres[vl_indice].data)
	vl_parametres[vl_indice].type=SYB#INT4_
	vl_parametres[vl_indice].output=FALSE
	vl_indice=vl_indice+1

	vl_parametres[vl_indice].data=va_horodate
	vl_parametres[vl_indice].type=SYB#DATETIME_
	vl_parametres[vl_indice].output=FALSE
	vl_indice=vl_indice+1

	IF (SYSTEM_VAR@(vg_surcharge)=TRUE)
		vl_parametres[vl_indice].data=SYSTEM_VAR@(vg_numero_poste_surcharge)
	ELSE
		vl_parametres[vl_indice].data=SYSTEM_VAR@(vg_numero_poste)
	vl_parametres[vl_indice].type=SYB#INT4_
	vl_parametres[vl_indice].output=FALSE
	vl_indice=vl_indice+1

	vl_parametres[vl_indice].data=va_mode
	vl_parametres[vl_indice].type=SYB#INT4_
	vl_parametres[vl_indice].output=FALSE

/*B Site local */
        vl_indice = vl_indice +1
        vl_parametres[vl_indice].type = SYB#CHAR_
        vl_parametres[vl_indice].data = SYSTEM_VAR@(vg_nom_site)
        vl_parametres[vl_indice].output = FALSE

	IF COM05_SQL_Procedure (XZAE60_Ecrire_Fiche_Bouchon,
			   vl_parametres, vl_resultats, C_MODULE) <> COM_OK
	{
		INFO_MESSAGE@("Impossible de sauver le tampon bouchon en base")
	}

	RETURN
ENDMACRO


/*X*/
/* -----------------------------------------------------------------------
* SERVICE RENDU :
* charge de la base les informations specifiques du type bouchon
*
-----------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TMC_bou_charge (va_fenetre,FORMAT COM_Identifiant_FMC ta_num_evt,
							va_horodate)

/*
* ARGUMENTS EN ENTREE :
* ta_num_evt            : numero et cle d'evenement
* va_fenetre            : id de la boite de dialogue fiche main courante
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Indefini
*
* CONDITION D'UTILISATION
*   MTMT
*
* FONCTION
--------------------------------------------------------------------- */
VAR FORMAT SQL_Procedure_Params@        vl_parametres
VAR FORMAT SQL_Procedure_Result@        vl_resultats
VAR vl_indice
VAR FORMAT TMC_bouchon         vl_tampon
VAR vl_fenetre
VAR tl_retour
VAR i

/*A Traitements en cas d'erreur durant l'initialisation :
*   informer l'operateur, tracer l'erreur et abandonner
* ------------------------------------------------------*/
ON ERROR
{
    ERROR_BOX@
    COM01_Trace (COM_WARNING, COM03_Message_Erreur (C_MODULE))
    RETURN
}

     vl_indice=0
	vl_fenetre=va_fenetre

	vl_parametres[vl_indice].type=SYB#DATETIME_
	vl_parametres[vl_indice].data=va_horodate
	vl_parametres[vl_indice].output=false
	vl_indice=vl_indice+1

	vl_parametres[vl_indice].data=ta_num_evt.numero
	vl_parametres[vl_indice].type=SYB#INT4_
	vl_parametres[vl_indice].output=false
	vl_indice=vl_indice+1

	vl_parametres[vl_indice].data=ta_num_evt.cle
	vl_parametres[vl_indice].type=SYB#INT4_
	vl_parametres[vl_indice].output=false
	vl_indice=vl_indice+1

	vl_parametres[vl_indice].type=SYB#INT4_
	vl_parametres[vl_indice].output=true
	vl_indice=vl_indice+1

	vl_parametres[vl_indice].type=SYB#INT4_
	vl_parametres[vl_indice].output=true
	vl_indice=vl_indice+1

	vl_parametres[vl_indice].type=SYB#INT4_
	vl_parametres[vl_indice].output=true
	vl_indice=vl_indice+1

	vl_parametres[vl_indice].type=SYB#INT4_
	vl_parametres[vl_indice].output=true
	vl_indice=vl_indice+1

	vl_parametres[vl_indice].type=SYB#INT4_
	vl_parametres[vl_indice].output=true
	vl_indice=vl_indice+1

	IF COM05_SQL_Procedure (XZAE51_Lire_Fiche_Bouchon,
				  vl_parametres, vl_resultats, C_MODULE) <> COM_OK
	{
		INFO_MESSAGE@("Erreur dans la lecture du tampon bouchon en base")
		tl_retour[0]=va_fenetre
		tl_retour[1]=null
	 	RETURN (tl_retour)
	}

	vl_tampon.type=vl_resultats.return_parameters[1]
	vl_tampon.longueur=vl_resultats.return_parameters[2]

	/*A mise a jour des controles dans la boite de dialogue*/
	DB_CTRL_TITLE@(vl_fenetre,"LI_longueurbou",vl_tampon.longueur)

	/*affichage du libelle type bouchon a partir du num code recu DEM428*/
	IF (ARRAY_SIZE@ (tm_types_bouchon) = 0) {
		tm_types_bouchon = SYSTEM_VAR@ (vg_types_bouchon)
	}
	IF vl_tampon.type = null {
		i=1
	} ELSE {
		i=ARRAY_INDEX@(ARRAY_COLUMN@(tm_types_bouchon, TDO_CODE_LIBELLE),vl_tampon.type)
	}
	if i=-1 then    i=1

	DB_CTRL_VALUE@(vl_fenetre, "BO_typetrafic", i)

	tl_retour[0]=vl_fenetre
	tl_retour[1]=vl_tampon

	RETURN (tl_retour)
ENDMACRO




/*X*/
/* ---------------------------------------------------------------------------------
* SERVICE RENDU :
*
*  Affiche les donnees specifiques d'une fiche Bouchon
*
------------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TMC_bou_affiche (va_fenetre, FORMAT TMC_bouchon va_bouchon)

/*
* ARGUMENTS EN ENTREE :
*  va_fenetre         : ID de la fenetre FMC
*  va_bouchon         : Données de la fiche Bouchon
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : Indefini
*
* CONDITION D'UTILISATION
*   ITMA_TMC sur ouverture fiche Bouchon
*
* FONCTION
*  Value les champs de saisie spécifiques aux FMC de classe Bouchon
*
--------------------------------------------------------------------------------- */

ENDMACRO




/*X*/
/* ---------------------------------------------------------------------------------
* SERVICE RENDU :
*
*  Lit les donnees specifiques d'une fiche Bouchon saisies dans la fenetre
*
------------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TMC_bou_saisie (va_fenetre, FORMAT TMC_bouchon va_bouchon)

/*
* ARGUMENTS EN ENTREE :
*  va_fenetre         : ID de la fenetre FMC
*
*
* ARGUMENTS EN SORTIE :
*  va_bouchon         : Donnees de la fiche Bouchon
*
*
* CODE RETOUR         : XDC_NOK si une valeur saisie est incorrecte, XDC_OK sinon.
*
* CONDITION D'UTILISATION
*   ITMA_TMC sur validation fiche Bouchon
*
* FONCTION
*  Remplit la fiche avec les donnees des champs de saisie specifiques.
*
--------------------------------------------------------------------------------- */

	RETURN (XDC_OK)
ENDMACRO




/*X*/
/* ---------------------------------------------------------------------------------
* SERVICE RENDU :
*
*  Effectue les controles de validite des donnees specifiques d'une fiche Bouchon
*
------------------------------------------------------------------------------------
* SEQUENCE D'APPEL :
*/

MACRO ITMA_TMC_bou_controle (FORMAT TMC_fmc va_fiche, FORMAT TMC_bouchon va_bouchon)

/*
* ARGUMENTS EN ENTREE :
*  va_fiche           : Donnees generiques de la Fmc ;
*  va_bouchon         : Donnees specifiques a la Fmc Bouchon
*
*
* ARGUMENTS EN SORTIE : Aucun
*
*
* CODE RETOUR         : XDC_NOK si les donnees sont incorrectes, XDC_OK sinon.
*
* CONDITION D'UTILISATION
*   ITMA_TMC sur validation fiche Bouchon
*
* FONCTION
*
--------------------------------------------------------------------------------- */

	RETURN (XDC_OK)
ENDMACRO
